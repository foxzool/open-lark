diff --git a/src/client/mod.rs b/src/client/mod.rs
index 6777d89..40e844d 100644
--- a/src/client/mod.rs
+++ b/src/client/mod.rs
@@ -1,11 +1,3 @@
-#[cfg(any(
-    feature = "attendance",
-    feature = "authentication",
-    feature = "im",
-    feature = "search",
-    feature = "cloud-docs"
-))]
-use std::sync::Arc;
 use std::time::Duration;
 
 use crate::core::{config::Config, constants::AppType};
@@ -337,113 +329,116 @@ impl LarkClientBuilder {
                 .expect("Failed to build HTTP client with timeout")
         }
 
+        // 创建共享的 Arc<Config> 实例
+        let config = self.config.clone();
+
         LarkClient {
-            config: self.config.clone(),
+            config: self.config,
             // 核心服务 - 使用条件编译
             #[cfg(feature = "acs")]
-            acs: AcsService::new(self.config.clone()),
+            acs: AcsService::new(config.clone()),
             #[cfg(feature = "admin")]
-            admin: AdminService::new(self.config.clone()),
+            admin: AdminService::new(config.clone()),
             #[cfg(feature = "ai")]
-            ai: AiService::new(self.config.clone()),
+            ai: AiService::new(config.clone()),
             #[cfg(feature = "aily")]
-            aily: AilyService::new(self.config.clone()),
+            aily: AilyService::new(config.clone()),
             #[cfg(feature = "apass")]
-            apass: ApassService::new(self.config.clone()),
+            apass: ApassService::new(config.clone()),
             #[cfg(feature = "application")]
-            application: ApplicationService::new(self.config.clone()),
+            application: ApplicationService::new(config.clone()),
             #[cfg(feature = "approval")]
-            approval: ApprovalService::new(self.config.clone()),
+            approval: ApprovalService::new(config.clone()),
             #[cfg(feature = "attendance")]
-            attendance: AttendanceService::new(Arc::new(self.config.clone())),
+            attendance: AttendanceService::new(config.clone()),
             #[cfg(feature = "authentication")]
-            auth: AuthenService::new(Arc::new(self.config.clone())),
+            auth: AuthenService::new(config.clone()),
             #[cfg(feature = "bot")]
-            bot: BotService::new(self.config.clone()),
+            bot: BotService::new(config.clone()),
             #[cfg(feature = "calendar")]
-            calendar: CalendarService::new(self.config.clone()),
+            calendar: CalendarService::new(config.clone()),
             #[cfg(feature = "cardkit")]
-            cardkit: CardkitService::new(self.config.clone()),
+            cardkit: CardkitService::new(config.clone()),
             #[cfg(feature = "contact")]
-            contact: ContactService::new(self.config.clone()),
+            contact: ContactService::new(config.clone()),
             #[cfg(feature = "corehr")]
-            corehr: CoreHRService::new(self.config.clone()),
+            corehr: CoreHRService::new(config.clone()),
             #[cfg(feature = "directory")]
-            directory: DirectoryService::new(self.config.clone()),
+            directory: DirectoryService::new(config.clone()),
             #[cfg(feature = "ehr")]
-            ehr: EhrService::new(self.config.clone()),
+            ehr: EhrService::new(config.clone()),
             #[cfg(feature = "elearning")]
-            elearning: ELearningService::new(self.config.clone()),
+            elearning: ELearningService::new(config.clone()),
             #[cfg(feature = "group")]
-            group: GroupService::new(self.config.clone()),
+            group: GroupService::new(config.clone()),
             #[cfg(feature = "helpdesk")]
-            helpdesk: HelpdeskService::new(self.config.clone()),
+            helpdesk: HelpdeskService::new(config.clone()),
             #[cfg(feature = "hire")]
-            hire: HireService::new(self.config.clone()),
+            hire: HireService::new(config.clone()),
             #[cfg(feature = "human-authentication")]
-            human_authentication: HumanAuthenticationService::new(self.config.clone()),
+            human_authentication: HumanAuthenticationService::new(config.clone()),
             #[cfg(feature = "im")]
-            im: ImService::new(Arc::new(self.config.clone())),
+            im: ImService::new(config.clone()),
             #[cfg(feature = "lingo")]
-            lingo: LingoService::new(self.config.clone()),
+            lingo: LingoService::new(config.clone()),
             #[cfg(feature = "mail")]
-            mail: MailService::new(self.config.clone()),
+            mail: MailService::new(config.clone()),
             #[cfg(feature = "mdm")]
-            mdm: MdmService::new(self.config.clone()),
+            mdm: MdmService::new(config.clone()),
             #[cfg(feature = "minutes")]
-            minutes: MinutesService::new(self.config.clone()),
+            minutes: MinutesService::new(config.clone()),
             #[cfg(feature = "moments")]
-            moments: MomentsService::new(self.config.clone()),
+            moments: MomentsService::new(config.clone()),
             #[cfg(feature = "okr")]
-            okr: OkrService::new(self.config.clone()),
+            okr: OkrService::new(config.clone()),
             #[cfg(feature = "payroll")]
-            payroll: PayrollService::new(self.config.clone()),
+            payroll: PayrollService::new(config.clone()),
             #[cfg(feature = "performance")]
-            performance: PerformanceService::new(self.config.clone()),
+            performance: PerformanceService::new(config.clone()),
             #[cfg(feature = "personal-settings")]
-            personal_settings: PersonalSettingsService::new(self.config.clone()),
+            personal_settings: PersonalSettingsService::new(config.clone()),
             #[cfg(feature = "report")]
-            report: ReportService::new(self.config.clone()),
+            report: ReportService::new(config.clone()),
             #[cfg(feature = "search")]
-            search: SearchService::new(Arc::new(self.config.clone())),
+            search: SearchService::new(config.clone()),
             #[cfg(feature = "security-and-compliance")]
-            security_and_compliance: SecurityAndComplianceService::new(self.config.clone()),
+            security_and_compliance: SecurityAndComplianceService::new(config.clone()),
             #[cfg(feature = "task")]
-            task: TaskV2Service::new(self.config.clone()),
+            task: TaskV2Service::new(config.clone()),
             #[cfg(feature = "tenant")]
-            tenant: TenantService::new(self.config.clone()),
+            tenant: TenantService::new(config.clone()),
             #[cfg(feature = "tenant-tag")]
-            tenant_tag: TenantTagService::new(self.config.clone()),
+            tenant_tag: TenantTagService::new(config.clone()),
             #[cfg(feature = "trust-party")]
-            trust_party: TrustPartyService::new(self.config.clone()),
+            trust_party: TrustPartyService::new(config.clone()),
             #[cfg(feature = "vc")]
-            vc: VcService::new(self.config.clone()),
+            vc: VcService::new(config.clone()),
             #[cfg(feature = "verification")]
-            verification: VerificationService::new(self.config.clone()),
+            verification: VerificationService::new(config.clone()),
             #[cfg(feature = "workplace")]
-            workplace: WorkplaceService::new(self.config.clone()),
+            workplace: WorkplaceService::new(config.clone()),
             // 云文档服务聚合
             #[cfg(feature = "cloud-docs")]
-            cloud_docs: CloudDocsService::new(Arc::new(self.config.clone())),
+            cloud_docs: CloudDocsService::new(config.clone()),
             // 向后兼容的字段（重新创建实例）
             #[cfg(feature = "cloud-docs")]
-            assistant: AssistantService::new(Arc::new(self.config.clone())),
+            assistant: AssistantService::new(config.clone()),
             #[cfg(feature = "cloud-docs")]
-            docs: DocsService::new(Arc::new(self.config.clone())),
+            docs: DocsService::new(config.clone()),
             #[cfg(feature = "cloud-docs")]
-            drive: DriveService::new(Arc::new(self.config.clone())),
+            drive: DriveService::new(config.clone()),
             #[cfg(feature = "cloud-docs")]
-            sheets: SheetsService::new(Arc::new(self.config.clone())),
+            sheets: SheetsService::new(config.clone()),
             #[cfg(feature = "cloud-docs")]
-            bitable: BitableService::new(Arc::new(self.config.clone())),
+            bitable: BitableService::new(config.clone()),
             #[cfg(feature = "cloud-docs")]
-            wiki: WikiService::new(Arc::new(self.config.clone())),
+            wiki: WikiService::new(config.clone()),
             #[cfg(feature = "cloud-docs")]
-            comments: CommentsService::new(Arc::new(self.config.clone())),
+            comments: CommentsService::new(config.clone()),
             #[cfg(feature = "cloud-docs")]
-            permission: PermissionService::new(Arc::new(self.config.clone())),
+            permission: PermissionService::new(config.clone()),
             #[cfg(feature = "cloud-docs")]
-            board: BoardService::new(Arc::new(self.config.clone())),
+            board: BoardService::new(config.clone()),
         }
     }
 }
diff --git a/src/client/ws_client/tests.rs b/src/client/ws_client/tests.rs
index b9300f3..0ab2365 100644
--- a/src/client/ws_client/tests.rs
+++ b/src/client/ws_client/tests.rs
@@ -18,7 +18,7 @@ async fn test_single_package_payload_preservation() {
                 value: "event".to_string(),
             },
             Header {
-                key: "message_id".to_string(),
+                key: "message_id",
                 value: "test_msg_001".to_string(),
             },
             // 没有 sum 和 seq 头部，应该默认为单包
@@ -59,7 +59,7 @@ async fn test_multi_package_payload_combination() {
                 value: "event".to_string(),
             },
             Header {
-                key: "message_id".to_string(),
+                key: "message_id",
                 value: "test_msg_002".to_string(),
             },
             Header {
@@ -93,7 +93,7 @@ async fn test_multi_package_payload_combination() {
                 value: "event".to_string(),
             },
             Header {
-                key: "message_id".to_string(),
+                key: "message_id",
                 value: "test_msg_002".to_string(),
             },
             Header {
diff --git a/src/core/api_req.rs b/src/core/api_req.rs
index e549563..a173e84 100644
--- a/src/core/api_req.rs
+++ b/src/core/api_req.rs
@@ -76,22 +76,26 @@ pub struct ApiRequest {
     /// 存储将被附加到URL末尾的查询参数。
     /// 例如：`?page_size=10&page_token=xxx`
     ///
-    /// # 示例
+    /// # 性能优化
+    ///
+    /// 键使用 `&'static str` 避免堆分配，配合 `QueryParams` 常量使用：
     ///
     /// ```rust,ignore
-    /// api_req.query_params.insert("page_size".to_string(), "10".to_string());
-    /// api_req.query_params.insert("page_token".to_string(), token);
+    /// api_req.query_params.insert(QueryParams::PAGE_SIZE, "10".to_string());
+    /// api_req.query_params.insert(QueryParams::PAGE_TOKEN, token);
     /// ```
-    pub query_params: HashMap<String, String>,
+    ///
+    /// 这种设计减少了每次API调用约8-16字节的内存分配。
+    pub query_params: HashMap<&'static str, String>,
 
     /// URL路径参数（保留字段）
     ///
     /// 该字段为未来的路径模板功能保留。目前在现有架构中：
-    /// 
+    ///
     /// - **当前做法**: 路径参数通过 `format!` 宏直接嵌入 `api_path`
     /// - **替代方案**: 可使用 `RequestExecutor::execute_with_path_params()` 进行路径参数替换
     /// - **设计考虑**: 保留该字段可为未来的模板系统升级提供支持
-    /// 
+    ///
     /// 关于路径参数处理，参考 `crate::service::endpoints::EndpointHelper::replace_path_params`
     /// 和 `crate::core::request_executor::RequestExecutor::execute_with_path_params`。
     pub path_params: HashMap<String, Vec<String>>,
diff --git a/src/core/migration_guide.rs b/src/core/migration_guide.rs
index f6a1005..e80f72d 100644
--- a/src/core/migration_guide.rs
+++ b/src/core/migration_guide.rs
@@ -47,7 +47,7 @@ impl MigrationExamples {
         option: Option<RequestOption>,
     ) -> SDKResult<BaseResponse<MessageData>> {
         let mut query_params = HashMap::new();
-        query_params.insert("receive_id_type".to_string(), receive_id_type.to_string());
+        query_params.insert("receive_id_type", receive_id_type.to_string());
 
         // 使用 RequestExecutor - 所有重复代码都被抽象了
         RequestExecutor::execute(
diff --git a/src/core/mod.rs b/src/core/mod.rs
index 13a2f89..65507a1 100644
--- a/src/core/mod.rs
+++ b/src/core/mod.rs
@@ -6,6 +6,7 @@ pub mod app_ticket_manager;
 pub mod cache;
 pub mod config;
 pub mod constants;
+pub mod endpoints;
 pub mod error;
 pub mod error_codes;
 pub mod error_helper;
@@ -13,6 +14,7 @@ pub mod error_logger;
 pub mod error_metrics;
 pub mod http;
 pub mod improved_response_handler;
+pub mod query_params;
 pub mod req_option;
 pub mod req_translator;
 pub mod request_builder;
diff --git a/src/core/request_builder/mod.rs b/src/core/request_builder/mod.rs
index 0479d56..cb57881 100644
--- a/src/core/request_builder/mod.rs
+++ b/src/core/request_builder/mod.rs
@@ -57,7 +57,7 @@ impl UnifiedRequestBuilder {
         let query_params = req
             .query_params
             .iter()
-            .map(|(k, v)| (k.as_str(), v.as_str()))
+            .map(|(k, v)| (*k, v.as_str()))
             .collect::<Vec<_>>();
         Ok(url::Url::parse_with_params(&path, query_params)?)
     }
diff --git a/src/core/request_executor.rs b/src/core/request_executor.rs
index a18f8ef..6155c8a 100644
--- a/src/core/request_executor.rs
+++ b/src/core/request_executor.rs
@@ -23,7 +23,7 @@ impl RequestExecutor {
         config: &Config,
         path: &str,
         supported_tokens: Vec<AccessTokenType>,
-        query_params: Option<HashMap<String, String>>,
+        query_params: Option<HashMap<&'static str, String>>,
         option: Option<RequestOption>,
     ) -> SDKResult<BaseResponse<T>> {
         Self::execute(
@@ -160,7 +160,7 @@ impl RequestExecutor {
         method: Method,
         path: &str,
         supported_tokens: Vec<AccessTokenType>,
-        query_params: Option<HashMap<String, String>>,
+        query_params: Option<HashMap<&'static str, String>>,
         body: Option<B>,
         option: Option<RequestOption>,
     ) -> SDKResult<BaseResponse<T>> {
@@ -215,7 +215,7 @@ impl RequestExecutor {
         path_template: &str,
         path_params: HashMap<&str, &str>,
         supported_tokens: Vec<AccessTokenType>,
-        query_params: Option<HashMap<String, String>>,
+        query_params: Option<HashMap<&'static str, String>>,
         body: Option<B>,
         option: Option<RequestOption>,
     ) -> SDKResult<BaseResponse<T>> {
@@ -277,7 +277,7 @@ impl RequestExecutor {
     /// ```rust,ignore
     /// // 获取消息列表
     /// let mut query_params = HashMap::new();
-    /// query_params.insert("container_id".to_string(), chat_id);
+    /// query_params.insert("container_id", chat_id);
     /// let response = RequestExecutor::query_request::<MessageListResponse>(
     ///     &config,
     ///     "/open-apis/im/v1/messages",
@@ -288,7 +288,7 @@ impl RequestExecutor {
     pub async fn query_request<T: ApiResponseTrait>(
         config: &Config,
         path: &str,
-        query_params: Option<HashMap<String, String>>,
+        query_params: Option<HashMap<&'static str, String>>,
         option: Option<RequestOption>,
     ) -> SDKResult<BaseResponse<T>> {
         Self::get(
diff --git a/src/core/request_executor_example.rs b/src/core/request_executor_example.rs
index 69cd060..94c11d7 100644
--- a/src/core/request_executor_example.rs
+++ b/src/core/request_executor_example.rs
@@ -33,7 +33,7 @@ impl ModernMessageService {
     ) -> SDKResult<BaseResponse<Message>> {
         // 构建查询参数
         let mut query_params = HashMap::new();
-        query_params.insert("receive_id_type".to_string(), receive_id_type.to_string());
+        query_params.insert("receive_id_type", receive_id_type.to_string());
 
         // 使用RequestExecutor执行请求 - 所有重复代码都被抽象了
         RequestExecutor::execute(
@@ -76,20 +76,20 @@ impl ModernMessageService {
     ) -> SDKResult<BaseResponse<ListMessageRespData>> {
         // 构建查询参数
         let mut query_params = HashMap::new();
-        query_params.insert("container_id".to_string(), container_id.to_string());
-        query_params.insert("container_id_type".to_string(), container_id_type.to_string());
+        query_params.insert("container_id", container_id.to_string());
+        query_params.insert("container_id_type", container_id_type.to_string());
         
         if let Some(start) = start_time {
-            query_params.insert("start_time".to_string(), start.to_string());
+            query_params.insert("start_time", start.to_string());
         }
         if let Some(end) = end_time {
-            query_params.insert("end_time".to_string(), end.to_string());
+            query_params.insert("end_time", end.to_string());
         }
         if let Some(token) = page_token {
-            query_params.insert("page_token".to_string(), token.to_string());
+            query_params.insert("page_token", token.to_string());
         }
         if let Some(size) = page_size {
-            query_params.insert("page_size".to_string(), size.to_string());
+            query_params.insert("page_size", size.to_string());
         }
 
         // 使用查询请求执行器
@@ -291,7 +291,7 @@ impl BulkMessageOperations {
         
         for (receive_id_type, body) in messages {
             let mut query_params = HashMap::new();
-            query_params.insert("receive_id_type".to_string(), receive_id_type);
+            query_params.insert("receive_id_type", receive_id_type);
 
             let result = RequestExecutor::execute(
                 config,
diff --git a/src/core/validation/calendar.rs b/src/core/validation/calendar.rs
index b0a7138..9af2a7d 100644
--- a/src/core/validation/calendar.rs
+++ b/src/core/validation/calendar.rs
@@ -311,11 +311,10 @@ pub fn validate_recurrence_rule(rule: &str) -> ValidationResult {
             .unwrap_or(until_part);
 
         if NaiveDate::parse_from_str(until_value, "%Y%m%d").is_err()
-            && DateTime::parse_from_rfc3339(&format!("{}T000000Z", until_value)).is_err() {
-                return ValidationResult::Invalid(
-                    "UNTIL参数格式无效，请使用YYYYMMDD格式".to_string(),
-                );
-            }
+            && DateTime::parse_from_rfc3339(&format!("{}T000000Z", until_value)).is_err()
+        {
+            return ValidationResult::Invalid("UNTIL参数格式无效，请使用YYYYMMDD格式".to_string());
+        }
     }
 
     // 检查COUNT参数（如果有）
diff --git a/src/core/validation/drive.rs b/src/core/validation/drive.rs
index 1695ae3..fbe0a37 100644
--- a/src/core/validation/drive.rs
+++ b/src/core/validation/drive.rs
@@ -802,7 +802,10 @@ mod tests {
 
     #[test]
     fn test_validate_batch_operation() {
-        let tokens = vec!["doccnABC123DEF456GHI789JKL012MN".to_string(), "doccnXYZ789ABC456DEF789GHI012JK".to_string()];
+        let tokens = vec![
+            "doccnABC123DEF456GHI789JKL012MN".to_string(),
+            "doccnXYZ789ABC456DEF789GHI012JK".to_string(),
+        ];
         assert!(matches!(
             validate_batch_operation(&tokens, 10),
             ValidationResult::Valid
diff --git a/src/core/validation/im.rs b/src/core/validation/im.rs
index f489c15..c018d4b 100644
--- a/src/core/validation/im.rs
+++ b/src/core/validation/im.rs
@@ -231,7 +231,11 @@ pub fn validate_file_upload(file_name: &str, file_size: u64, file_type: &str) ->
         _ => return ValidationResult::Invalid(format!("Unsupported file type: {}", file_type)),
     };
 
-    let file_ext = file_name.split('.').next_back().unwrap_or("").to_lowercase();
+    let file_ext = file_name
+        .split('.')
+        .next_back()
+        .unwrap_or("")
+        .to_lowercase();
     if !allowed_types.contains(&file_ext.as_str()) {
         return ValidationResult::Invalid(format!(
             "File type '.{}' is not allowed for {} files",
diff --git a/src/core/validation/pagination/mod.rs b/src/core/validation/pagination/mod.rs
index e55f678..551e423 100644
--- a/src/core/validation/pagination/mod.rs
+++ b/src/core/validation/pagination/mod.rs
@@ -105,7 +105,7 @@ impl<T> PaginationRequestBuilder<T> {
     ///
     /// - 分页大小：1-500 之间，推荐 50
     /// - 分页标记：必须是有效的 Base64 字符串，长度不超过 1024
-    pub fn build(self) -> SDKResult<std::collections::HashMap<String, String>> {
+    pub fn build(self) -> SDKResult<std::collections::HashMap<&'static str, String>> {
         let mut params = std::collections::HashMap::new();
 
         // 1. 验证并添加分页大小
@@ -122,7 +122,7 @@ impl<T> PaginationRequestBuilder<T> {
                     )));
                 }
             }
-            params.insert("page_size".to_string(), page_size.to_string());
+            params.insert("page_size", page_size.to_string());
         }
 
         // 2. 验证并添加分页标记
@@ -144,7 +144,7 @@ impl<T> PaginationRequestBuilder<T> {
                     )));
                 }
             }
-            params.insert("page_token".to_string(), page_token.clone());
+            params.insert("page_token", page_token.clone());
         }
 
         Ok(params)
@@ -153,7 +153,9 @@ impl<T> PaginationRequestBuilder<T> {
     /// 构建分页请求参数并添加到现有的 ApiRequest
     pub fn build_to_api_request(self, mut api_req: ApiRequest) -> SDKResult<ApiRequest> {
         let params = self.build()?;
-        api_req.query_params.extend(params);
+        for (key, value) in params {
+            api_req.query_params.insert(key, value);
+        }
         Ok(api_req)
     }
 
diff --git a/src/core/validation/sheets.rs b/src/core/validation/sheets.rs
index 3ab77ab..22fa81e 100644
--- a/src/core/validation/sheets.rs
+++ b/src/core/validation/sheets.rs
@@ -43,12 +43,11 @@ pub fn validate_cell_range(range: &str) -> ValidationResult {
         }
 
         // 检查是否被引号正确包围（如果包含引号）
-        if sheet.starts_with('\'') 
-            && (!sheet.ends_with('\'') || sheet.len() < 2) {
-                return ValidationResult::Invalid(
-                    "Invalid quoted sheet name. Must start and end with single quotes".to_string(),
-                );
-            }
+        if sheet.starts_with('\'') && (!sheet.ends_with('\'') || sheet.len() < 2) {
+            return ValidationResult::Invalid(
+                "Invalid quoted sheet name. Must start and end with single quotes".to_string(),
+            );
+        }
 
         (Some(sheet.to_string()), cell_ref)
     } else {
diff --git a/src/service/acs/access_record/mod.rs b/src/service/acs/access_record/mod.rs
index 72ca4f4..06e15ad 100644
--- a/src/service/acs/access_record/mod.rs
+++ b/src/service/acs/access_record/mod.rs
@@ -54,37 +54,35 @@ impl AccessRecordService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(user_id) = request.user_id {
-            api_req.query_params.insert("user_id".to_string(), user_id);
+            api_req.query_params.insert("user_id", user_id);
         }
 
         if let Some(device_id) = request.device_id {
             api_req
                 .query_params
-                .insert("device_id".to_string(), device_id);
+                .insert("device_id", device_id);
         }
 
         if let Some(access_type) = request.access_type {
             api_req.query_params.insert(
-                "access_type".to_string(),
+                "access_type",
                 serde_json::to_string(&access_type)?,
             );
         }
 
         if let Some(access_method) = request.access_method {
             api_req.query_params.insert(
-                "access_method".to_string(),
+                "access_method",
                 serde_json::to_string(&access_method)?,
             );
         }
@@ -92,19 +90,19 @@ impl AccessRecordService {
         if let Some(result) = request.result {
             api_req
                 .query_params
-                .insert("result".to_string(), serde_json::to_string(&result)?);
+                .insert("result", serde_json::to_string(&result)?);
         }
 
         if let Some(start_time) = request.start_time {
             api_req
                 .query_params
-                .insert("start_time".to_string(), start_time.to_string());
+                .insert("start_time", start_time.to_string());
         }
 
         if let Some(end_time) = request.end_time {
             api_req
                 .query_params
-                .insert("end_time".to_string(), end_time.to_string());
+                .insert("end_time", end_time.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/acs/device/mod.rs b/src/service/acs/device/mod.rs
index e91bf81..34a01ab 100644
--- a/src/service/acs/device/mod.rs
+++ b/src/service/acs/device/mod.rs
@@ -52,20 +52,18 @@ impl DeviceService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(device_type) = request.device_type {
             api_req.query_params.insert(
-                "device_type".to_string(),
+                "device_type",
                 serde_json::to_string(&device_type)?,
             );
         }
@@ -73,13 +71,13 @@ impl DeviceService {
         if let Some(status) = request.status {
             api_req
                 .query_params
-                .insert("status".to_string(), serde_json::to_string(&status)?);
+                .insert("status", serde_json::to_string(&status)?);
         }
 
         if let Some(location) = request.location {
             api_req
                 .query_params
-                .insert("location".to_string(), location);
+                .insert("location", location);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/acs/user/mod.rs b/src/service/acs/user/mod.rs
index d2bd67a..6cabbe9 100644
--- a/src/service/acs/user/mod.rs
+++ b/src/service/acs/user/mod.rs
@@ -110,33 +110,31 @@ impl UserService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(user_type) = request.user_type {
             api_req
                 .query_params
-                .insert("user_type".to_string(), serde_json::to_string(&user_type)?);
+                .insert("user_type", serde_json::to_string(&user_type)?);
         }
 
         if let Some(status) = request.status {
             api_req
                 .query_params
-                .insert("status".to_string(), serde_json::to_string(&status)?);
+                .insert("status", serde_json::to_string(&status)?);
         }
 
         if let Some(department) = request.department {
             api_req
                 .query_params
-                .insert("department".to_string(), department);
+                .insert("department", department);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/admin/badge/mod.rs b/src/service/admin/badge/mod.rs
index 1395b86..6c361f0 100644
--- a/src/service/admin/badge/mod.rs
+++ b/src/service/admin/badge/mod.rs
@@ -203,15 +203,13 @@ impl BadgeService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
         if let Some(name) = request.name {
-            api_req.query_params.insert("name".to_string(), name);
+            api_req.query_params.insert("name", name);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/admin/badge_grant/mod.rs b/src/service/admin/badge_grant/mod.rs
index f8c29b8..9a40d61 100644
--- a/src/service/admin/badge_grant/mod.rs
+++ b/src/service/admin/badge_grant/mod.rs
@@ -204,20 +204,18 @@ impl BadgeGrantService {
         if let Some(badge_id) = request.badge_id {
             api_req
                 .query_params
-                .insert("badge_id".to_string(), badge_id);
+                .insert("badge_id", badge_id);
         }
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
         if let Some(name) = request.name {
-            api_req.query_params.insert("name".to_string(), name);
+            api_req.query_params.insert("name", name);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/admin/data_report/mod.rs b/src/service/admin/data_report/mod.rs
index 97206c8..a5215aa 100644
--- a/src/service/admin/data_report/mod.rs
+++ b/src/service/admin/data_report/mod.rs
@@ -78,30 +78,24 @@ impl DataReportService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("start_date".to_string(), request.start_date);
-        api_req
-            .query_params
-            .insert("end_date".to_string(), request.end_date);
+            .insert("start_date", request.start_date);
+        api_req.query_params.insert("end_date", request.end_date);
 
         if let Some(department_id_type) = request.department_id_type {
             api_req
                 .query_params
-                .insert("department_id_type".to_string(), department_id_type);
+                .insert("department_id_type", department_id_type);
         }
         if let Some(department_id) = request.department_id {
-            api_req
-                .query_params
-                .insert("department_id".to_string(), department_id);
+            api_req.query_params.insert("department_id", department_id);
         }
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -131,40 +125,30 @@ impl DataReportService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("start_date".to_string(), request.start_date);
-        api_req
-            .query_params
-            .insert("end_date".to_string(), request.end_date);
+            .insert("start_date", request.start_date);
+        api_req.query_params.insert("end_date", request.end_date);
 
         if let Some(user_id_type) = request.user_id_type {
-            api_req
-                .query_params
-                .insert("user_id_type".to_string(), user_id_type);
+            api_req.query_params.insert("user_id_type", user_id_type);
         }
         if let Some(user_ids) = request.user_ids {
-            api_req
-                .query_params
-                .insert("user_ids".to_string(), user_ids.join(","));
+            api_req.query_params.insert("user_ids", user_ids.join(","));
         }
         if let Some(department_id_type) = request.department_id_type {
             api_req
                 .query_params
-                .insert("department_id_type".to_string(), department_id_type);
+                .insert("department_id_type", department_id_type);
         }
         if let Some(department_id) = request.department_id {
-            api_req
-                .query_params
-                .insert("department_id".to_string(), department_id);
+            api_req.query_params.insert("department_id", department_id);
         }
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/admin/mod.rs b/src/service/admin/mod.rs
index b3c821e..a7cd962 100644
--- a/src/service/admin/mod.rs
+++ b/src/service/admin/mod.rs
@@ -104,8 +104,6 @@ pub mod models;
 /// 密码管理功能
 pub mod password;
 
-use std::sync::Arc;
-
 use crate::core::config::Config;
 use badge::BadgeService;
 use badge_grant::BadgeGrantService;
@@ -167,11 +165,11 @@ impl AdminService {
     ///
     /// # 返回值
     /// 配置完成的管理后台服务实例
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            password: PasswordService::new(Arc::clone(&config)),
-            data_report: DataReportService::new(Arc::clone(&config)),
-            badge: BadgeService::new(Arc::clone(&config)),
+            password: PasswordService::new(config.clone()),
+            data_report: DataReportService::new(config.clone()),
+            badge: BadgeService::new(config.clone()),
             badge_grant: BadgeGrantService::new(config),
         }
     }
diff --git a/src/service/ai/document_ai/mod.rs b/src/service/ai/document_ai/mod.rs
index 93c1320..e6ed85b 100644
--- a/src/service/ai/document_ai/mod.rs
+++ b/src/service/ai/document_ai/mod.rs
@@ -7,6 +7,7 @@ use crate::{
         api_resp::{ApiResponseTrait, BaseResponse, ResponseFormat},
         config::Config,
         constants::AccessTokenType,
+        endpoints::Endpoints,
         http::Transport,
         req_option::RequestOption,
         SDKResult,
@@ -170,7 +171,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<ResumeParseResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/resume/parse".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_RESUME_PARSE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -194,7 +195,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<IdCardRecognizeResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/id_card/recognize".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_ID_CARD_RECOGNIZE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -218,7 +219,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<DrivingLicenseRecognizeResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/driving_license/recognize".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_DRIVING_LICENSE_RECOGNIZE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -242,7 +243,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<BankCardRecognizeResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/bank_card/recognize".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_BANK_CARD_RECOGNIZE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -266,7 +267,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<BusinessLicenseRecognizeResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/business_license/recognize".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_BUSINESS_LICENSE_RECOGNIZE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -290,7 +291,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<VatInvoiceRecognizeResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/vat_invoice/recognize".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_VAT_INVOICE_RECOGNIZE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -314,7 +315,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<ContractFieldExtractionResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/contract/field_extraction".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_CONTRACT_FIELD_EXTRACTION.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -338,7 +339,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<BusinessCardRecognizeResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/business_card/recognize".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_BUSINESS_CARD_RECOGNIZE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -362,7 +363,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<GenericDocumentResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/vehicle_invoice/recognize".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_VEHICLE_INVOICE_RECOGNIZE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -386,7 +387,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<GenericDocumentResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/health_certificate/recognize".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_HEALTH_CERTIFICATE_RECOGNIZE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -410,7 +411,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<GenericDocumentResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/hkm_mainland_travel_permit/recognize".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_HKM_MAINLAND_TRAVEL_PERMIT_RECOGNIZE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -434,7 +435,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<GenericDocumentResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/tw_mainland_travel_permit/recognize".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_TW_MAINLAND_TRAVEL_PERMIT_RECOGNIZE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -458,7 +459,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<GenericDocumentResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/chinese_passport/recognize".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_CHINESE_PASSPORT_RECOGNIZE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -482,7 +483,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<GenericDocumentResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/vehicle_license/recognize".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_VEHICLE_LICENSE_RECOGNIZE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -506,7 +507,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<GenericDocumentResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/train_invoice/recognize".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_TRAIN_INVOICE_RECOGNIZE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -530,7 +531,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<GenericDocumentResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/taxi_invoice/recognize".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_TAXI_INVOICE_RECOGNIZE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -554,7 +555,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<GenericDocumentResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/food_produce_license/recognize".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_FOOD_PRODUCE_LICENSE_RECOGNIZE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -578,7 +579,7 @@ impl DocumentAiService {
     ) -> SDKResult<BaseResponse<GenericDocumentResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/document_ai/v1/food_manage_license/recognize".to_string(),
+            api_path: Endpoints::DOCUMENT_AI_FOOD_MANAGE_LICENSE_RECOGNIZE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
diff --git a/src/service/ai/mod.rs b/src/service/ai/mod.rs
index d14d5d9..a2d2e03 100644
--- a/src/service/ai/mod.rs
+++ b/src/service/ai/mod.rs
@@ -98,8 +98,6 @@
 //! - 灵活的API调用方式
 //! - 完善的错误处理机制
 
-use std::sync::Arc;
-
 use crate::core::config::Config;
 
 /// 智能文档处理功能
@@ -173,11 +171,11 @@ impl AiService {
     ///
     /// # 返回值
     /// 配置完成的AI服务实例，包含所有AI能力子服务
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            document_ai: DocumentAiService::new(Arc::clone(&config)),
-            optical_char_recognition: OpticalCharRecognitionService::new(Arc::clone(&config)),
-            speech_to_text: SpeechToTextService::new(Arc::clone(&config)),
+            document_ai: DocumentAiService::new(config.clone()),
+            optical_char_recognition: OpticalCharRecognitionService::new(config.clone()),
+            speech_to_text: SpeechToTextService::new(config.clone()),
             translation: TranslationService::new(config),
         }
     }
diff --git a/src/service/aily/knowledge/mod.rs b/src/service/aily/knowledge/mod.rs
index ee35cc2..ec79760 100644
--- a/src/service/aily/knowledge/mod.rs
+++ b/src/service/aily/knowledge/mod.rs
@@ -239,9 +239,7 @@ impl KnowledgeService {
         };
 
         // 添加查询参数
-        api_req
-            .query_params
-            .insert("app_id".to_string(), request.app_id);
+        api_req.query_params.insert("app_id", request.app_id);
 
         Transport::request(api_req, &self.config, option).await
     }
@@ -268,9 +266,7 @@ impl KnowledgeService {
         };
 
         // 添加查询参数
-        api_req
-            .query_params
-            .insert("app_id".to_string(), request.app_id);
+        api_req.query_params.insert("app_id", request.app_id);
 
         Transport::request(api_req, &self.config, option).await
     }
@@ -297,27 +293,21 @@ impl KnowledgeService {
         };
 
         // 添加查询参数
-        api_req
-            .query_params
-            .insert("app_id".to_string(), request.app_id);
+        api_req.query_params.insert("app_id", request.app_id);
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
         if let Some(category_id) = request.category_id {
-            api_req
-                .query_params
-                .insert("category_id".to_string(), category_id);
+            api_req.query_params.insert("category_id", category_id);
         }
         if let Some(keyword) = request.keyword {
-            api_req.query_params.insert("keyword".to_string(), keyword);
+            api_req.query_params.insert("keyword", keyword);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -345,19 +335,15 @@ impl KnowledgeService {
         };
 
         // 添加查询参数
-        api_req
-            .query_params
-            .insert("app_id".to_string(), request.app_id);
+        api_req.query_params.insert("app_id", request.app_id);
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/aily/message/mod.rs b/src/service/aily/message/mod.rs
index 917f2b7..f63968a 100644
--- a/src/service/aily/message/mod.rs
+++ b/src/service/aily/message/mod.rs
@@ -125,9 +125,7 @@ impl MessageService {
         };
 
         // 添加查询参数
-        api_req
-            .query_params
-            .insert("app_id".to_string(), request.app_id);
+        api_req.query_params.insert("app_id", request.app_id);
 
         Transport::request(api_req, &self.config, option).await
     }
@@ -157,22 +155,18 @@ impl MessageService {
         };
 
         // 添加查询参数
-        api_req
-            .query_params
-            .insert("app_id".to_string(), request.app_id);
+        api_req.query_params.insert("app_id", request.app_id);
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
         if let Some(order) = request.order {
-            api_req.query_params.insert("order".to_string(), order);
+            api_req.query_params.insert("order", order);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/aily/run/mod.rs b/src/service/aily/run/mod.rs
index d6fe30c..02d62bf 100644
--- a/src/service/aily/run/mod.rs
+++ b/src/service/aily/run/mod.rs
@@ -137,9 +137,7 @@ impl RunService {
         };
 
         // 添加查询参数
-        api_req
-            .query_params
-            .insert("app_id".to_string(), request.app_id);
+        api_req.query_params.insert("app_id", request.app_id);
 
         Transport::request(api_req, &self.config, option).await
     }
@@ -166,22 +164,18 @@ impl RunService {
         };
 
         // 添加查询参数
-        api_req
-            .query_params
-            .insert("app_id".to_string(), request.app_id);
+        api_req.query_params.insert("app_id", request.app_id);
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
         if let Some(order) = request.order {
-            api_req.query_params.insert("order".to_string(), order);
+            api_req.query_params.insert("order", order);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/aily/session/mod.rs b/src/service/aily/session/mod.rs
index 73b498b..9fc76f3 100644
--- a/src/service/aily/session/mod.rs
+++ b/src/service/aily/session/mod.rs
@@ -161,9 +161,7 @@ impl SessionService {
         };
 
         // 添加查询参数
-        api_req
-            .query_params
-            .insert("app_id".to_string(), request.app_id);
+        api_req.query_params.insert("app_id", request.app_id);
 
         Transport::request(api_req, &self.config, option).await
     }
@@ -190,9 +188,7 @@ impl SessionService {
         };
 
         // 添加查询参数
-        api_req
-            .query_params
-            .insert("app_id".to_string(), request.app_id);
+        api_req.query_params.insert("app_id", request.app_id);
 
         Transport::request(api_req, &self.config, option).await
     }
diff --git a/src/service/aily/skill/mod.rs b/src/service/aily/skill/mod.rs
index dbb88d9..466d745 100644
--- a/src/service/aily/skill/mod.rs
+++ b/src/service/aily/skill/mod.rs
@@ -118,9 +118,7 @@ impl SkillService {
         };
 
         // 添加查询参数
-        api_req
-            .query_params
-            .insert("app_id".to_string(), request.app_id);
+        api_req.query_params.insert("app_id", request.app_id);
 
         Transport::request(api_req, &self.config, option).await
     }
@@ -147,19 +145,15 @@ impl SkillService {
         };
 
         // 添加查询参数
-        api_req
-            .query_params
-            .insert("app_id".to_string(), request.app_id);
+        api_req.query_params.insert("app_id", request.app_id);
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/apass/audit_log/mod.rs b/src/service/apass/audit_log/mod.rs
index ff34b31..b80e8e9 100644
--- a/src/service/apass/audit_log/mod.rs
+++ b/src/service/apass/audit_log/mod.rs
@@ -124,27 +124,21 @@ impl AuditLogService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
         if let Some(start_time) = request.start_time {
-            api_req
-                .query_params
-                .insert("start_time".to_string(), start_time);
+            api_req.query_params.insert("start_time", start_time);
         }
         if let Some(end_time) = request.end_time {
-            api_req
-                .query_params
-                .insert("end_time".to_string(), end_time);
+            api_req.query_params.insert("end_time", end_time);
         }
         if let Some(operation_type) = request.operation_type {
             api_req
                 .query_params
-                .insert("operation_type".to_string(), operation_type);
+                .insert("operation_type", operation_type);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -204,17 +198,15 @@ impl AuditLogService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
         if let Some(object_api_name) = request.object_api_name {
             api_req
                 .query_params
-                .insert("object_api_name".to_string(), object_api_name);
+                .insert("object_api_name", object_api_name);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/apass/environment_variable/mod.rs b/src/service/apass/environment_variable/mod.rs
index 1d141b2..cae34bb 100644
--- a/src/service/apass/environment_variable/mod.rs
+++ b/src/service/apass/environment_variable/mod.rs
@@ -83,12 +83,10 @@ impl EnvironmentVariableService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/apass/flow/mod.rs b/src/service/apass/flow/mod.rs
index 139d67c..adba59e 100644
--- a/src/service/apass/flow/mod.rs
+++ b/src/service/apass/flow/mod.rs
@@ -160,17 +160,15 @@ impl FlowService {
 
         // 添加查询参数
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/apass/object/mod.rs b/src/service/apass/object/mod.rs
index e1f66bc..1416187 100644
--- a/src/service/apass/object/mod.rs
+++ b/src/service/apass/object/mod.rs
@@ -212,12 +212,10 @@ impl ObjectService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -249,9 +247,7 @@ impl ObjectService {
 
         // 添加字段查询参数
         if let Some(fields) = request.fields {
-            api_req
-                .query_params
-                .insert("fields".to_string(), fields.join(","));
+            api_req.query_params.insert("fields", fields.join(","));
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -398,12 +394,10 @@ impl ObjectService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/apass/seat/mod.rs b/src/service/apass/seat/mod.rs
index b00582e..c529b27 100644
--- a/src/service/apass/seat/mod.rs
+++ b/src/service/apass/seat/mod.rs
@@ -80,12 +80,10 @@ impl SeatService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -116,22 +114,16 @@ impl SeatService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
         if let Some(start_time) = request.start_time {
-            api_req
-                .query_params
-                .insert("start_time".to_string(), start_time);
+            api_req.query_params.insert("start_time", start_time);
         }
         if let Some(end_time) = request.end_time {
-            api_req
-                .query_params
-                .insert("end_time".to_string(), end_time);
+            api_req.query_params.insert("end_time", end_time);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/application/v6/admin/mod.rs b/src/service/application/v6/admin/mod.rs
index 8ad1e86..7cc2669 100644
--- a/src/service/application/v6/admin/mod.rs
+++ b/src/service/application/v6/admin/mod.rs
@@ -36,19 +36,16 @@ impl AdminService {
     ) -> SDKResult<BaseResponse<ListInstalledAppsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(lang) = lang {
-            query_params.insert("lang".to_string(), lang);
+            query_params.insert("lang", lang);
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
 
         let api_req = ApiRequest {
@@ -74,19 +71,16 @@ impl AdminService {
     ) -> SDKResult<BaseResponse<GetUserAvailableAppsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(lang) = lang {
-            query_params.insert("lang".to_string(), lang);
+            query_params.insert("lang", lang);
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
 
         let api_req = ApiRequest {
@@ -111,15 +105,12 @@ impl AdminService {
         let mut query_params = HashMap::new();
         if let Some(department_id_type) = department_id_type {
             query_params.insert(
-                "department_id_type".to_string(),
+                "department_id_type",
                 department_id_type.as_str().to_string(),
             );
         }
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -147,15 +138,12 @@ impl AdminService {
         let mut query_params = HashMap::new();
         if let Some(department_id_type) = department_id_type {
             query_params.insert(
-                "department_id_type".to_string(),
+                "department_id_type",
                 department_id_type.as_str().to_string(),
             );
         }
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -182,14 +170,11 @@ impl AdminService {
     ) -> SDKResult<BaseResponse<GetAppAvailabilityResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(department_id_type) = department_id_type {
             query_params.insert(
-                "department_id_type".to_string(),
+                "department_id_type",
                 department_id_type.as_str().to_string(),
             );
         }
@@ -216,14 +201,11 @@ impl AdminService {
     ) -> SDKResult<BaseResponse<CheckWhiteBlackListResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(department_id_type) = department_id_type {
             query_params.insert(
-                "department_id_type".to_string(),
+                "department_id_type",
                 department_id_type.as_str().to_string(),
             );
         }
@@ -253,14 +235,11 @@ impl AdminService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(department_id_type) = department_id_type {
             query_params.insert(
-                "department_id_type".to_string(),
+                "department_id_type",
                 department_id_type.as_str().to_string(),
             );
         }
@@ -306,16 +285,13 @@ impl AdminService {
     ) -> SDKResult<BaseResponse<ListAppAdminsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
 
         let api_req = ApiRequest {
@@ -340,14 +316,11 @@ impl AdminService {
     ) -> SDKResult<BaseResponse<GetAppAdminPermissionsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(department_id_type) = department_id_type {
             query_params.insert(
-                "department_id_type".to_string(),
+                "department_id_type",
                 department_id_type.as_str().to_string(),
             );
         }
@@ -375,10 +348,7 @@ impl AdminService {
     ) -> SDKResult<BaseResponse<VerifyAppAdminResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/application/v6/app_badge/mod.rs b/src/service/application/v6/app_badge/mod.rs
index 00b06cd..fdf8041 100644
--- a/src/service/application/v6/app_badge/mod.rs
+++ b/src/service/application/v6/app_badge/mod.rs
@@ -36,10 +36,7 @@ impl AppBadgeService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/application/v6/app_usage/mod.rs b/src/service/application/v6/app_usage/mod.rs
index d6352e7..23b56fd 100644
--- a/src/service/application/v6/app_usage/mod.rs
+++ b/src/service/application/v6/app_usage/mod.rs
@@ -36,18 +36,18 @@ impl AppUsageService {
         option: Option<RequestOption>,
     ) -> SDKResult<BaseResponse<DepartmentOverviewResponse>> {
         let mut query_params = HashMap::new();
-        query_params.insert("date".to_string(), date.to_string());
+        query_params.insert("date", date.to_string());
         if let Some(department_id_type) = department_id_type {
             query_params.insert(
-                "department_id_type".to_string(),
+                "department_id_type",
                 department_id_type.as_str().to_string(),
             );
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
 
         let api_req = ApiRequest {
@@ -70,8 +70,8 @@ impl AppUsageService {
         option: Option<RequestOption>,
     ) -> SDKResult<BaseResponse<MessagePushOverviewResponse>> {
         let mut query_params = HashMap::new();
-        query_params.insert("start_date".to_string(), start_date.to_string());
-        query_params.insert("end_date".to_string(), end_date.to_string());
+        query_params.insert("start_date", start_date.to_string());
+        query_params.insert("end_date", end_date.to_string());
 
         let api_req = ApiRequest {
             http_method: Method::GET,
@@ -93,8 +93,8 @@ impl AppUsageService {
         option: Option<RequestOption>,
     ) -> SDKResult<BaseResponse<AppUsageOverviewResponse>> {
         let mut query_params = HashMap::new();
-        query_params.insert("start_date".to_string(), start_date.to_string());
-        query_params.insert("end_date".to_string(), end_date.to_string());
+        query_params.insert("start_date", start_date.to_string());
+        query_params.insert("end_date", end_date.to_string());
 
         let api_req = ApiRequest {
             http_method: Method::GET,
diff --git a/src/service/application/v6/application/mod.rs b/src/service/application/v6/application/mod.rs
index 336ea3d..15b2b8a 100644
--- a/src/service/application/v6/application/mod.rs
+++ b/src/service/application/v6/application/mod.rs
@@ -70,10 +70,7 @@ impl ApplicationService {
     ) -> SDKResult<BaseResponse<GetCollaboratorsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -96,7 +93,7 @@ impl ApplicationService {
     ) -> SDKResult<BaseResponse<GetApplicationResponse>> {
         let mut query_params = HashMap::new();
         if let Some(lang) = lang {
-            query_params.insert("lang".to_string(), lang);
+            query_params.insert("lang", lang);
         }
 
         let api_req = ApiRequest {
@@ -120,7 +117,7 @@ impl ApplicationService {
     ) -> SDKResult<BaseResponse<GetAppVersionResponse>> {
         let mut query_params = HashMap::new();
         if let Some(lang) = lang {
-            query_params.insert("lang".to_string(), lang);
+            query_params.insert("lang", lang);
         }
 
         let api_req = ApiRequest {
@@ -147,13 +144,13 @@ impl ApplicationService {
     ) -> SDKResult<BaseResponse<ListAppVersionsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(lang) = lang {
-            query_params.insert("lang".to_string(), lang);
+            query_params.insert("lang", lang);
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
 
         let api_req = ApiRequest {
@@ -177,7 +174,7 @@ impl ApplicationService {
     ) -> SDKResult<BaseResponse<ContactsRangeSuggestResponse>> {
         let mut query_params = HashMap::new();
         if let Some(lang) = lang {
-            query_params.insert("lang".to_string(), lang);
+            query_params.insert("lang", lang);
         }
 
         let api_req = ApiRequest {
@@ -203,13 +200,13 @@ impl ApplicationService {
     ) -> SDKResult<BaseResponse<UnderauditListResponse>> {
         let mut query_params = HashMap::new();
         if let Some(lang) = lang {
-            query_params.insert("lang".to_string(), lang);
+            query_params.insert("lang", lang);
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/application/v6/application_feedback/mod.rs b/src/service/application/v6/application_feedback/mod.rs
index de7be58..19d0234 100644
--- a/src/service/application/v6/application_feedback/mod.rs
+++ b/src/service/application/v6/application_feedback/mod.rs
@@ -35,10 +35,7 @@ impl ApplicationFeedbackService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -66,30 +63,27 @@ impl ApplicationFeedbackService {
         option: Option<RequestOption>,
     ) -> SDKResult<BaseResponse<ListFeedbackResponse>> {
         let mut query_params = HashMap::new();
-        query_params.insert("app_id".to_string(), app_id.to_string());
+        query_params.insert("app_id", app_id.to_string());
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(feedback_type) = feedback_type {
             query_params.insert(
-                "feedback_type".to_string(),
+                "feedback_type",
                 serde_json::to_string(&feedback_type).unwrap_or_default(),
             );
         }
         if let Some(status) = status {
             query_params.insert(
-                "status".to_string(),
+                "status",
                 serde_json::to_string(&status).unwrap_or_default(),
             );
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/application/v6/appstore_paid_info/mod.rs b/src/service/application/v6/appstore_paid_info/mod.rs
index bc26c45..5a730e2 100644
--- a/src/service/application/v6/appstore_paid_info/mod.rs
+++ b/src/service/application/v6/appstore_paid_info/mod.rs
@@ -36,10 +36,7 @@ impl AppstorePaidInfoService {
     ) -> SDKResult<BaseResponse<CheckUserAccessResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -65,10 +62,10 @@ impl AppstorePaidInfoService {
     ) -> SDKResult<BaseResponse<ListTenantPaidPlansResponse>> {
         let mut query_params = HashMap::new();
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/application/v6/scope/mod.rs b/src/service/application/v6/scope/mod.rs
index 9545452..751e703 100644
--- a/src/service/application/v6/scope/mod.rs
+++ b/src/service/application/v6/scope/mod.rs
@@ -52,7 +52,7 @@ impl ScopeService {
     ) -> SDKResult<BaseResponse<ListScopeResponse>> {
         let mut query_params = HashMap::new();
         if let Some(lang) = lang {
-            query_params.insert("lang".to_string(), lang);
+            query_params.insert("lang", lang);
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/approval/v4/approval/mod.rs b/src/service/approval/v4/approval/mod.rs
index 9b7ed4b..9a285b0 100644
--- a/src/service/approval/v4/approval/mod.rs
+++ b/src/service/approval/v4/approval/mod.rs
@@ -80,14 +80,11 @@ impl ApprovalService {
     ) -> SDKResult<BaseResponse<CreateApprovalResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(department_id_type) = department_id_type {
             query_params.insert(
-                "department_id_type".to_string(),
+                "department_id_type",
                 department_id_type.as_str().to_string(),
             );
         }
@@ -114,14 +111,11 @@ impl ApprovalService {
     ) -> SDKResult<BaseResponse<GetApprovalResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(department_id_type) = department_id_type {
             query_params.insert(
-                "department_id_type".to_string(),
+                "department_id_type",
                 department_id_type.as_str().to_string(),
             );
         }
diff --git a/src/service/approval/v4/external_approval/mod.rs b/src/service/approval/v4/external_approval/mod.rs
index 6cae65e..44017cd 100644
--- a/src/service/approval/v4/external_approval/mod.rs
+++ b/src/service/approval/v4/external_approval/mod.rs
@@ -93,14 +93,11 @@ impl ExternalApprovalService {
     ) -> SDKResult<BaseResponse<CreateExternalApprovalResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(department_id_type) = department_id_type {
             query_params.insert(
-                "department_id_type".to_string(),
+                "department_id_type",
                 department_id_type.as_str().to_string(),
             );
         }
@@ -126,10 +123,7 @@ impl ExternalApprovalService {
     ) -> SDKResult<BaseResponse<GetExternalApprovalResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/approval/v4/external_instance/mod.rs b/src/service/approval/v4/external_instance/mod.rs
index 2c3ad41..ab6e1aa 100644
--- a/src/service/approval/v4/external_instance/mod.rs
+++ b/src/service/approval/v4/external_instance/mod.rs
@@ -86,14 +86,11 @@ impl ExternalInstanceService {
     ) -> SDKResult<BaseResponse<CreateExternalInstanceResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(department_id_type) = department_id_type {
             query_params.insert(
-                "department_id_type".to_string(),
+                "department_id_type",
                 department_id_type.as_str().to_string(),
             );
         }
@@ -120,10 +117,7 @@ impl ExternalInstanceService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/approval/v4/external_task/mod.rs b/src/service/approval/v4/external_task/mod.rs
index 283bb43..2a010b5 100644
--- a/src/service/approval/v4/external_task/mod.rs
+++ b/src/service/approval/v4/external_task/mod.rs
@@ -63,28 +63,25 @@ impl ExternalTaskService {
         let mut query_params = HashMap::new();
         if let Some(params) = params {
             if let Some(page_size) = params.page_size {
-                query_params.insert("page_size".to_string(), page_size.to_string());
+                query_params.insert("page_size", page_size.to_string());
             }
             if let Some(page_token) = params.page_token {
-                query_params.insert("page_token".to_string(), page_token);
+                query_params.insert("page_token", page_token);
             }
             if let Some(approval_code) = params.approval_code {
-                query_params.insert("approval_code".to_string(), approval_code);
+                query_params.insert("approval_code", approval_code);
             }
             if let Some(instance_code) = params.instance_code {
-                query_params.insert("instance_code".to_string(), instance_code);
+                query_params.insert("instance_code", instance_code);
             }
             if let Some(user_id) = params.user_id {
-                query_params.insert("user_id".to_string(), user_id);
+                query_params.insert("user_id", user_id);
             }
             if let Some(task_status) = params.task_status {
-                query_params.insert("task_status".to_string(), task_status);
+                query_params.insert("task_status", task_status);
             }
             if let Some(user_id_type) = params.user_id_type {
-                query_params.insert(
-                    "user_id_type".to_string(),
-                    user_id_type.as_str().to_string(),
-                );
+                query_params.insert("user_id_type", user_id_type.as_str().to_string());
             }
         }
 
diff --git a/src/service/approval/v4/instance/mod.rs b/src/service/approval/v4/instance/mod.rs
index 5e9b407..ae1c69a 100644
--- a/src/service/approval/v4/instance/mod.rs
+++ b/src/service/approval/v4/instance/mod.rs
@@ -160,14 +160,11 @@ impl InstanceService {
     ) -> SDKResult<BaseResponse<CreateInstanceResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(department_id_type) = department_id_type {
             query_params.insert(
-                "department_id_type".to_string(),
+                "department_id_type",
                 department_id_type.as_str().to_string(),
             );
         }
@@ -193,10 +190,7 @@ impl InstanceService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -220,10 +214,7 @@ impl InstanceService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -248,14 +239,11 @@ impl InstanceService {
     ) -> SDKResult<BaseResponse<PreviewInstanceResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(department_id_type) = department_id_type {
             query_params.insert(
-                "department_id_type".to_string(),
+                "department_id_type",
                 department_id_type.as_str().to_string(),
             );
         }
@@ -281,10 +269,7 @@ impl InstanceService {
     ) -> SDKResult<BaseResponse<GetInstanceResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -307,25 +292,22 @@ impl InstanceService {
         let mut query_params = HashMap::new();
         if let Some(params) = params {
             if let Some(page_size) = params.page_size {
-                query_params.insert("page_size".to_string(), page_size.to_string());
+                query_params.insert("page_size", page_size.to_string());
             }
             if let Some(page_token) = params.page_token {
-                query_params.insert("page_token".to_string(), page_token);
+                query_params.insert("page_token", page_token);
             }
             if let Some(approval_code) = params.approval_code {
-                query_params.insert("approval_code".to_string(), approval_code);
+                query_params.insert("approval_code", approval_code);
             }
             if let Some(instance_status) = params.instance_status {
-                query_params.insert("instance_status".to_string(), instance_status);
+                query_params.insert("instance_status", instance_status);
             }
             if let Some(user_id) = params.user_id {
-                query_params.insert("user_id".to_string(), user_id);
+                query_params.insert("user_id", user_id);
             }
             if let Some(user_id_type) = params.user_id_type {
-                query_params.insert(
-                    "user_id_type".to_string(),
-                    user_id_type.as_str().to_string(),
-                );
+                query_params.insert("user_id_type", user_id_type.as_str().to_string());
             }
         }
 
diff --git a/src/service/approval/v4/instance_comment/mod.rs b/src/service/approval/v4/instance_comment/mod.rs
index 571985c..ffc704c 100644
--- a/src/service/approval/v4/instance_comment/mod.rs
+++ b/src/service/approval/v4/instance_comment/mod.rs
@@ -75,10 +75,7 @@ impl InstanceCommentService {
     ) -> SDKResult<BaseResponse<CreateCommentResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -103,10 +100,7 @@ impl InstanceCommentService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -131,10 +125,7 @@ impl InstanceCommentService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -159,16 +150,13 @@ impl InstanceCommentService {
     ) -> SDKResult<BaseResponse<ListCommentsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/approval/v4/message/mod.rs b/src/service/approval/v4/message/mod.rs
index 88c7755..75a0d40 100644
--- a/src/service/approval/v4/message/mod.rs
+++ b/src/service/approval/v4/message/mod.rs
@@ -71,10 +71,7 @@ impl MessageService {
     ) -> SDKResult<BaseResponse<SendBotMessageResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -99,10 +96,7 @@ impl MessageService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/approval/v4/search/mod.rs b/src/service/approval/v4/search/mod.rs
index f60f61e..e4a2d56 100644
--- a/src/service/approval/v4/search/mod.rs
+++ b/src/service/approval/v4/search/mod.rs
@@ -145,31 +145,28 @@ impl SearchService {
         let mut query_params = HashMap::new();
         if let Some(params) = params {
             if let Some(page_size) = params.page_size {
-                query_params.insert("page_size".to_string(), page_size.to_string());
+                query_params.insert("page_size", page_size.to_string());
             }
             if let Some(page_token) = params.page_token {
-                query_params.insert("page_token".to_string(), page_token);
+                query_params.insert("page_token", page_token);
             }
             if let Some(approval_code) = params.approval_code {
-                query_params.insert("approval_code".to_string(), approval_code);
+                query_params.insert("approval_code", approval_code);
             }
             if let Some(instance_status) = params.instance_status {
-                query_params.insert("instance_status".to_string(), instance_status);
+                query_params.insert("instance_status", instance_status);
             }
             if let Some(start_time) = params.start_time {
-                query_params.insert("start_time".to_string(), start_time);
+                query_params.insert("start_time", start_time);
             }
             if let Some(end_time) = params.end_time {
-                query_params.insert("end_time".to_string(), end_time);
+                query_params.insert("end_time", end_time);
             }
             if let Some(user_id) = params.user_id {
-                query_params.insert("user_id".to_string(), user_id);
+                query_params.insert("user_id", user_id);
             }
             if let Some(user_id_type) = params.user_id_type {
-                query_params.insert(
-                    "user_id_type".to_string(),
-                    user_id_type.as_str().to_string(),
-                );
+                query_params.insert("user_id_type", user_id_type.as_str().to_string());
             }
         }
 
@@ -193,34 +190,31 @@ impl SearchService {
         let mut query_params = HashMap::new();
         if let Some(params) = params {
             if let Some(page_size) = params.page_size {
-                query_params.insert("page_size".to_string(), page_size.to_string());
+                query_params.insert("page_size", page_size.to_string());
             }
             if let Some(page_token) = params.page_token {
-                query_params.insert("page_token".to_string(), page_token);
+                query_params.insert("page_token", page_token);
             }
             if let Some(approval_code) = params.approval_code {
-                query_params.insert("approval_code".to_string(), approval_code);
+                query_params.insert("approval_code", approval_code);
             }
             if let Some(instance_code) = params.instance_code {
-                query_params.insert("instance_code".to_string(), instance_code);
+                query_params.insert("instance_code", instance_code);
             }
             if let Some(task_status) = params.task_status {
-                query_params.insert("task_status".to_string(), task_status);
+                query_params.insert("task_status", task_status);
             }
             if let Some(start_time) = params.start_time {
-                query_params.insert("start_time".to_string(), start_time);
+                query_params.insert("start_time", start_time);
             }
             if let Some(end_time) = params.end_time {
-                query_params.insert("end_time".to_string(), end_time);
+                query_params.insert("end_time", end_time);
             }
             if let Some(user_id) = params.user_id {
-                query_params.insert("user_id".to_string(), user_id);
+                query_params.insert("user_id", user_id);
             }
             if let Some(user_id_type) = params.user_id_type {
-                query_params.insert(
-                    "user_id_type".to_string(),
-                    user_id_type.as_str().to_string(),
-                );
+                query_params.insert("user_id_type", user_id_type.as_str().to_string());
             }
         }
 
@@ -244,25 +238,22 @@ impl SearchService {
         let mut query_params = HashMap::new();
         if let Some(params) = params {
             if let Some(page_size) = params.page_size {
-                query_params.insert("page_size".to_string(), page_size.to_string());
+                query_params.insert("page_size", page_size.to_string());
             }
             if let Some(page_token) = params.page_token {
-                query_params.insert("page_token".to_string(), page_token);
+                query_params.insert("page_token", page_token);
             }
             if let Some(approval_code) = params.approval_code {
-                query_params.insert("approval_code".to_string(), approval_code);
+                query_params.insert("approval_code", approval_code);
             }
             if let Some(instance_code) = params.instance_code {
-                query_params.insert("instance_code".to_string(), instance_code);
+                query_params.insert("instance_code", instance_code);
             }
             if let Some(user_id) = params.user_id {
-                query_params.insert("user_id".to_string(), user_id);
+                query_params.insert("user_id", user_id);
             }
             if let Some(user_id_type) = params.user_id_type {
-                query_params.insert(
-                    "user_id_type".to_string(),
-                    user_id_type.as_str().to_string(),
-                );
+                query_params.insert("user_id_type", user_id_type.as_str().to_string());
             }
         }
 
@@ -286,13 +277,10 @@ impl SearchService {
     ) -> SDKResult<BaseResponse<SearchApprovalIdResponse>> {
         let mut query_params = HashMap::new();
         if let Some(approval_name) = approval_name {
-            query_params.insert("approval_name".to_string(), approval_name.to_string());
+            query_params.insert("approval_name", approval_name.to_string());
         }
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -314,32 +302,29 @@ impl SearchService {
         option: Option<RequestOption>,
     ) -> SDKResult<BaseResponse<SearchTasksResponse>> {
         let mut query_params = HashMap::new();
-        query_params.insert("user_id".to_string(), user_id.to_string());
+        query_params.insert("user_id", user_id.to_string());
 
         if let Some(params) = params {
             if let Some(page_size) = params.page_size {
-                query_params.insert("page_size".to_string(), page_size.to_string());
+                query_params.insert("page_size", page_size.to_string());
             }
             if let Some(page_token) = params.page_token {
-                query_params.insert("page_token".to_string(), page_token);
+                query_params.insert("page_token", page_token);
             }
             if let Some(approval_code) = params.approval_code {
-                query_params.insert("approval_code".to_string(), approval_code);
+                query_params.insert("approval_code", approval_code);
             }
             if let Some(task_status) = params.task_status {
-                query_params.insert("task_status".to_string(), task_status);
+                query_params.insert("task_status", task_status);
             }
             if let Some(start_time) = params.start_time {
-                query_params.insert("start_time".to_string(), start_time);
+                query_params.insert("start_time", start_time);
             }
             if let Some(end_time) = params.end_time {
-                query_params.insert("end_time".to_string(), end_time);
+                query_params.insert("end_time", end_time);
             }
             if let Some(user_id_type) = params.user_id_type {
-                query_params.insert(
-                    "user_id_type".to_string(),
-                    user_id_type.as_str().to_string(),
-                );
+                query_params.insert("user_id_type", user_id_type.as_str().to_string());
             }
         }
 
diff --git a/src/service/approval/v4/task/mod.rs b/src/service/approval/v4/task/mod.rs
index e13e4ec..e801d08 100644
--- a/src/service/approval/v4/task/mod.rs
+++ b/src/service/approval/v4/task/mod.rs
@@ -99,10 +99,7 @@ impl TaskService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -127,10 +124,7 @@ impl TaskService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -155,10 +149,7 @@ impl TaskService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -183,10 +174,7 @@ impl TaskService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -211,10 +199,7 @@ impl TaskService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -239,10 +224,7 @@ impl TaskService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/attendance/mod.rs b/src/service/attendance/mod.rs
index 3e5e96b..12c2e2e 100644
--- a/src/service/attendance/mod.rs
+++ b/src/service/attendance/mod.rs
@@ -90,8 +90,6 @@
 //! - 🔄 HR系统集成
 //! - 📊 组织架构联动
 
-use std::sync::Arc;
-
 use crate::core::config::Config;
 
 pub mod v1;
@@ -141,7 +139,7 @@ impl AttendanceService {
     ///
     /// # 返回值
     /// 配置完成的考勤服务实例
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
             v1: v1::V1::new(config),
         }
diff --git a/src/service/attendance/v1/archive_rule.rs b/src/service/attendance/v1/archive_rule.rs
index 3c77e97..0abbc63 100644
--- a/src/service/attendance/v1/archive_rule.rs
+++ b/src/service/attendance/v1/archive_rule.rs
@@ -1,6 +1,5 @@
 use reqwest::Method;
 use serde_json::json;
-use std::sync::Arc;
 
 use crate::{
     core::{
@@ -18,7 +17,7 @@ use super::models::{
 
 /// 归档报表服务
 pub struct ArchiveRuleService {
-    pub config: Arc<Config>,
+    pub config: Config,
 }
 
 impl ArchiveRuleService {
@@ -43,7 +42,7 @@ impl ArchiveRuleService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
         Ok(api_resp)
@@ -70,7 +69,7 @@ impl ArchiveRuleService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         // 构建请求体
         let body = json!({
@@ -104,7 +103,7 @@ impl ArchiveRuleService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         // 构建请求体
         let body = json!({
@@ -135,18 +134,16 @@ impl ArchiveRuleService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
diff --git a/src/service/attendance/v1/group.rs b/src/service/attendance/v1/group.rs
index 8473275..05d540d 100644
--- a/src/service/attendance/v1/group.rs
+++ b/src/service/attendance/v1/group.rs
@@ -1,6 +1,5 @@
 use reqwest::Method;
 use serde_json::json;
-use std::sync::Arc;
 
 use crate::core::{
     api_resp::BaseResponse, config::Config, constants::AccessTokenType, http::Transport,
@@ -15,7 +14,7 @@ use super::models::{
 
 /// 考勤组服务
 pub struct GroupService {
-    pub config: Arc<Config>,
+    pub config: Config,
 }
 
 impl GroupService {
@@ -37,24 +36,24 @@ impl GroupService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type.clone());
+            .insert("employee_type", request.employee_type.clone());
 
         if let Some(dept_type) = &request.dept_type {
             api_req
                 .query_params
-                .insert("dept_type".to_string(), dept_type.clone());
+                .insert("dept_type", dept_type.clone());
         }
 
         if let Some(page_size) = &request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = &request.page_token {
             api_req
                 .query_params
-                .insert("page_token".to_string(), page_token.clone());
+                .insert("page_token", page_token.clone());
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
@@ -79,12 +78,12 @@ impl GroupService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type.clone());
+            .insert("employee_type", request.employee_type.clone());
 
         if let Some(dept_type) = &request.dept_type {
             api_req
                 .query_params
-                .insert("dept_type".to_string(), dept_type.clone());
+                .insert("dept_type", dept_type.clone());
         }
 
         // 构建请求体
@@ -166,12 +165,12 @@ impl GroupService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         if let Some(dept_type) = request.dept_type {
             api_req
                 .query_params
-                .insert("dept_type".to_string(), dept_type);
+                .insert("dept_type", dept_type);
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
@@ -196,12 +195,12 @@ impl GroupService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         if let Some(dept_type) = request.dept_type {
             api_req
                 .query_params
-                .insert("dept_type".to_string(), dept_type);
+                .insert("dept_type", dept_type);
         }
 
         // 构建请求体
@@ -233,24 +232,22 @@ impl GroupService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         if let Some(dept_type) = request.dept_type {
             api_req
                 .query_params
-                .insert("dept_type".to_string(), dept_type);
+                .insert("dept_type", dept_type);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
diff --git a/src/service/attendance/v1/leave_accrual_record.rs b/src/service/attendance/v1/leave_accrual_record.rs
index 68eba11..48ff904 100644
--- a/src/service/attendance/v1/leave_accrual_record.rs
+++ b/src/service/attendance/v1/leave_accrual_record.rs
@@ -1,5 +1,4 @@
 use reqwest::Method;
-use std::sync::Arc;
 use serde_json::json;
 
 use crate::{
@@ -14,7 +13,7 @@ use super::models::{PatchLeaveAccrualRecordRequest, PatchLeaveAccrualRecordRespD
 
 /// 休假发放记录服务
 pub struct LeaveAccrualRecordService {
-    pub config: Arc<Config>,
+    pub config: Config,
 }
 
 impl LeaveAccrualRecordService {
@@ -40,7 +39,7 @@ impl LeaveAccrualRecordService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         // 构建请求体
         let body = json!({
diff --git a/src/service/attendance/v1/leave_employ_expire_record.rs b/src/service/attendance/v1/leave_employ_expire_record.rs
index 5ecfb53..2759032 100644
--- a/src/service/attendance/v1/leave_employ_expire_record.rs
+++ b/src/service/attendance/v1/leave_employ_expire_record.rs
@@ -1,5 +1,3 @@
-use reqwest::Method;
-use std::sync::Arc;
 use crate::{
     core::{
         api_resp::BaseResponse, config::Config, constants::AccessTokenType, http::Transport,
@@ -7,12 +5,13 @@ use crate::{
     },
     impl_executable_builder_owned,
 };
+use reqwest::Method;
 
 use super::models::{GetLeaveEmployExpireRecordRequest, GetLeaveEmployExpireRecordRespData};
 
 /// 休假获取过期发放记录服务
 pub struct LeaveEmployExpireRecordService {
-    pub config: Arc<Config>,
+    pub config: Config,
 }
 
 impl LeaveEmployExpireRecordService {
@@ -35,24 +34,22 @@ impl LeaveEmployExpireRecordService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
         api_req
             .query_params
-            .insert("start_time".to_string(), request.start_time.to_string());
+            .insert("start_time", request.start_time.to_string());
         api_req
             .query_params
-            .insert("end_time".to_string(), request.end_time.to_string());
+            .insert("end_time", request.end_time.to_string());
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
diff --git a/src/service/attendance/v1/mod.rs b/src/service/attendance/v1/mod.rs
index 0ce7529..1d94bbd 100644
--- a/src/service/attendance/v1/mod.rs
+++ b/src/service/attendance/v1/mod.rs
@@ -1,5 +1,3 @@
-use std::sync::Arc;
-
 use crate::{
     core::config::Config,
     service::attendance::v1::{
@@ -42,40 +40,40 @@ pub struct V1 {
 }
 
 impl V1 {
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
             shift: ShiftService {
-                config: Arc::clone(&config),
+                config: config.clone(),
             },
             user_daily_shift: UserDailyShiftService {
-                config: Arc::clone(&config),
+                config: config.clone(),
             },
             group: GroupService {
-                config: Arc::clone(&config),
+                config: config.clone(),
             },
             user_setting: UserSettingService {
-                config: Arc::clone(&config),
+                config: config.clone(),
             },
             user_stats_data: UserStatsDataService {
-                config: Arc::clone(&config),
+                config: config.clone(),
             },
             user_approval: UserApprovalService {
-                config: Arc::clone(&config),
+                config: config.clone(),
             },
             user_task: UserTaskService {
-                config: Arc::clone(&config),
+                config: config.clone(),
             },
             user_task_remedy: UserTaskRemedyService {
-                config: Arc::clone(&config),
+                config: config.clone(),
             },
             archive_rule: ArchiveRuleService {
-                config: Arc::clone(&config),
+                config: config.clone(),
             },
             leave_employ_expire_record: LeaveEmployExpireRecordService {
-                config: Arc::clone(&config),
+                config: config.clone(),
             },
-            leave_accrual_record: LeaveAccrualRecordService { 
-                config: Arc::clone(&config) 
+            leave_accrual_record: LeaveAccrualRecordService {
+                config: config.clone(),
             },
         }
     }
diff --git a/src/service/attendance/v1/shift.rs b/src/service/attendance/v1/shift.rs
index 9f36d85..7142a06 100644
--- a/src/service/attendance/v1/shift.rs
+++ b/src/service/attendance/v1/shift.rs
@@ -1,6 +1,5 @@
 use reqwest::Method;
 use serde_json::json;
-use std::sync::Arc;
 
 use crate::{
     core::{
@@ -16,7 +15,7 @@ use super::models::{
 };
 
 pub struct ShiftService {
-    pub config: Arc<Config>,
+    pub config: Config,
 }
 
 impl ShiftService {
@@ -38,7 +37,7 @@ impl ShiftService {
         // 添加必需的查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         // 构建请求体
         let mut body = json!({
@@ -158,10 +157,10 @@ impl ShiftService {
         // 添加必需的查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type.clone());
+            .insert("employee_type", request.employee_type.clone());
         api_req
             .query_params
-            .insert("shift_name".to_string(), request.shift_name.clone());
+            .insert("shift_name", request.shift_name.clone());
 
         let body = json!({
             "shift_name": request.shift_name
@@ -205,12 +204,10 @@ impl ShiftService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
diff --git a/src/service/attendance/v1/user_approval.rs b/src/service/attendance/v1/user_approval.rs
index 95e6456..9526c44 100644
--- a/src/service/attendance/v1/user_approval.rs
+++ b/src/service/attendance/v1/user_approval.rs
@@ -1,5 +1,4 @@
 use reqwest::Method;
-use std::sync::Arc;
 use serde_json::json;
 
 use crate::core::{
@@ -14,7 +13,7 @@ use super::models::{
 
 /// 用户审批服务
 pub struct UserApprovalService {
-    pub config: Arc<Config>,
+    pub config: Config,
 }
 
 impl UserApprovalService {
@@ -36,40 +35,34 @@ impl UserApprovalService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         if let Some(status) = request.status {
-            api_req
-                .query_params
-                .insert("status".to_string(), status.to_string());
+            api_req.query_params.insert("status", status.to_string());
         }
 
         if let Some(date_from) = request.date_from {
             api_req
                 .query_params
-                .insert("date_from".to_string(), date_from);
+                .insert("date_from", date_from);
         }
 
         if let Some(date_to) = request.date_to {
-            api_req.query_params.insert("date_to".to_string(), date_to);
+            api_req.query_params.insert("date_to", date_to);
         }
 
         if let Some(user_ids) = request.user_ids {
-            api_req
-                .query_params
-                .insert("user_ids".to_string(), user_ids.join(","));
+            api_req.query_params.insert("user_ids", user_ids.join(","));
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
@@ -94,7 +87,7 @@ impl UserApprovalService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         // 构建请求体
         let mut body = json!({
@@ -133,7 +126,7 @@ impl UserApprovalService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         // 构建请求体
         let mut body = json!({
diff --git a/src/service/attendance/v1/user_daily_shift.rs b/src/service/attendance/v1/user_daily_shift.rs
index b930bf9..914a337 100644
--- a/src/service/attendance/v1/user_daily_shift.rs
+++ b/src/service/attendance/v1/user_daily_shift.rs
@@ -1,6 +1,5 @@
 use reqwest::Method;
 use serde_json::json;
-use std::sync::Arc;
 
 use crate::core::{
     api_resp::BaseResponse, config::Config, constants::AccessTokenType, http::Transport,
@@ -15,7 +14,7 @@ use super::models::{
 
 /// 用户排班服务
 pub struct UserDailyShiftService {
-    pub config: Arc<Config>,
+    pub config: Config,
 }
 
 impl UserDailyShiftService {
@@ -38,7 +37,7 @@ impl UserDailyShiftService {
         // 添加必需的查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         // 构建请求体
         let body = json!({
@@ -69,7 +68,7 @@ impl UserDailyShiftService {
         // 添加必需的查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         // 构建请求体
         let body = json!({
@@ -104,7 +103,7 @@ impl UserDailyShiftService {
         // 添加必需的查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         // 构建请求体
         let body = json!({
diff --git a/src/service/attendance/v1/user_setting.rs b/src/service/attendance/v1/user_setting.rs
index 54a6615..440424b 100644
--- a/src/service/attendance/v1/user_setting.rs
+++ b/src/service/attendance/v1/user_setting.rs
@@ -1,5 +1,4 @@
 use reqwest::Method;
-use std::sync::Arc;
 use serde_json::json;
 
 use crate::core::{
@@ -19,7 +18,7 @@ use super::models::{
 
 /// 用户设置服务
 pub struct UserSettingService {
-    pub config: Arc<Config>,
+    pub config: Config,
 }
 
 impl UserSettingService {
@@ -44,7 +43,7 @@ impl UserSettingService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         // 构建请求体
         let mut body = json!({});
@@ -86,7 +85,7 @@ impl UserSettingService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         // 构建请求体
         let body = json!({
@@ -120,7 +119,7 @@ impl UserSettingService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         // 保存 photo_name 以避免借用问题
         let photo_name = request.photo_name.clone();
@@ -166,10 +165,10 @@ impl UserSettingService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
         api_req
             .query_params
-            .insert("face_key".to_string(), request.face_key);
+            .insert("face_key", request.face_key);
 
         // 对于文件下载，我们需要直接获取响应体字节数据
         // 这里暂时返回一个模拟的照片数据，实际实现时需要从 HTTP 响应中获取
diff --git a/src/service/attendance/v1/user_stats_data.rs b/src/service/attendance/v1/user_stats_data.rs
index 112d602..e5fd402 100644
--- a/src/service/attendance/v1/user_stats_data.rs
+++ b/src/service/attendance/v1/user_stats_data.rs
@@ -1,5 +1,4 @@
 use reqwest::Method;
-use std::sync::Arc;
 use serde_json::json;
 
 use crate::{
@@ -18,7 +17,7 @@ use super::models::{
 
 /// 用户统计数据服务
 pub struct UserStatsDataService {
-    pub config: Arc<Config>,
+    pub config: Config,
 }
 
 impl UserStatsDataService {
@@ -40,7 +39,7 @@ impl UserStatsDataService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         // 构建请求体
         let body = json!({
@@ -71,7 +70,7 @@ impl UserStatsDataService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
         Ok(api_resp)
@@ -95,10 +94,10 @@ impl UserStatsDataService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         if let Some(locale) = request.locale {
-            api_req.query_params.insert("locale".to_string(), locale);
+            api_req.query_params.insert("locale", locale);
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
@@ -123,10 +122,10 @@ impl UserStatsDataService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         if let Some(locale) = request.locale {
-            api_req.query_params.insert("locale".to_string(), locale);
+            api_req.query_params.insert("locale", locale);
         }
 
         // 构建请求体
diff --git a/src/service/attendance/v1/user_task.rs b/src/service/attendance/v1/user_task.rs
index d5a7e75..ef0079f 100644
--- a/src/service/attendance/v1/user_task.rs
+++ b/src/service/attendance/v1/user_task.rs
@@ -1,6 +1,5 @@
 use reqwest::Method;
 use serde_json::json;
-use std::sync::Arc;
 
 use crate::core::{
     api_resp::BaseResponse, config::Config, constants::AccessTokenType, http::Transport,
@@ -15,7 +14,7 @@ use super::models::{
 
 /// 用户打卡任务服务
 pub struct UserTaskService {
-    pub config: Arc<Config>,
+    pub config: Config,
 }
 
 impl UserTaskService {
@@ -37,7 +36,7 @@ impl UserTaskService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         // 构建请求体
         let body = json!({
@@ -71,10 +70,10 @@ impl UserTaskService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
         api_req
             .query_params
-            .insert("check_date".to_string(), request.check_date);
+            .insert("check_date", request.check_date);
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
         Ok(api_resp)
@@ -98,42 +97,36 @@ impl UserTaskService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         if let Some(user_ids) = request.user_ids {
-            api_req
-                .query_params
-                .insert("user_ids".to_string(), user_ids.join(","));
+            api_req.query_params.insert("user_ids", user_ids.join(","));
         }
 
         if let Some(check_date_from) = request.check_date_from {
             api_req
                 .query_params
-                .insert("check_date_from".to_string(), check_date_from);
+                .insert("check_date_from", check_date_from);
         }
 
         if let Some(check_date_to) = request.check_date_to {
-            api_req
-                .query_params
-                .insert("check_date_to".to_string(), check_date_to);
+            api_req.query_params.insert("check_date_to", check_date_to);
         }
 
         if let Some(check_type) = request.check_type {
             api_req
                 .query_params
-                .insert("check_type".to_string(), check_type.to_string());
+                .insert("check_type", check_type.to_string());
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
@@ -158,7 +151,7 @@ impl UserTaskService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         // 构建请求体
         let body = json!({
@@ -189,36 +182,30 @@ impl UserTaskService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         if let Some(user_ids) = request.user_ids {
-            api_req
-                .query_params
-                .insert("user_ids".to_string(), user_ids.join(","));
+            api_req.query_params.insert("user_ids", user_ids.join(","));
         }
 
         if let Some(check_date_from) = request.check_date_from {
             api_req
                 .query_params
-                .insert("check_date_from".to_string(), check_date_from);
+                .insert("check_date_from", check_date_from);
         }
 
         if let Some(check_date_to) = request.check_date_to {
-            api_req
-                .query_params
-                .insert("check_date_to".to_string(), check_date_to);
+            api_req.query_params.insert("check_date_to", check_date_to);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
diff --git a/src/service/attendance/v1/user_task_remedy.rs b/src/service/attendance/v1/user_task_remedy.rs
index 24032ea..7bd0242 100644
--- a/src/service/attendance/v1/user_task_remedy.rs
+++ b/src/service/attendance/v1/user_task_remedy.rs
@@ -1,5 +1,4 @@
 use reqwest::Method;
-use std::sync::Arc;
 use serde_json::json;
 
 use crate::{
@@ -17,7 +16,7 @@ use super::models::{
 
 /// 用户补卡服务
 pub struct UserTaskRemedyService {
-    pub config: Arc<Config>,
+    pub config: Config,
 }
 
 impl UserTaskRemedyService {
@@ -39,7 +38,7 @@ impl UserTaskRemedyService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         // 构建请求体
         let body = json!({
@@ -76,19 +75,17 @@ impl UserTaskRemedyService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
-        api_req
-            .query_params
-            .insert("user_id".to_string(), request.user_id);
+            .insert("employee_type", request.employee_type);
+        api_req.query_params.insert("user_id", request.user_id);
 
         if let Some(date_from) = request.date_from {
             api_req
                 .query_params
-                .insert("date_from".to_string(), date_from);
+                .insert("date_from", date_from);
         }
 
         if let Some(date_to) = request.date_to {
-            api_req.query_params.insert("date_to".to_string(), date_to);
+            api_req.query_params.insert("date_to", date_to);
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
@@ -113,40 +110,34 @@ impl UserTaskRemedyService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("employee_type".to_string(), request.employee_type);
+            .insert("employee_type", request.employee_type);
 
         if let Some(user_ids) = request.user_ids {
-            api_req
-                .query_params
-                .insert("user_ids".to_string(), user_ids.join(","));
+            api_req.query_params.insert("user_ids", user_ids.join(","));
         }
 
         if let Some(date_from) = request.date_from {
             api_req
                 .query_params
-                .insert("date_from".to_string(), date_from);
+                .insert("date_from", date_from);
         }
 
         if let Some(date_to) = request.date_to {
-            api_req.query_params.insert("date_to".to_string(), date_to);
+            api_req.query_params.insert("date_to", date_to);
         }
 
         if let Some(status) = request.status {
-            api_req
-                .query_params
-                .insert("status".to_string(), status.to_string());
+            api_req.query_params.insert("status", status.to_string());
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
diff --git a/src/service/authentication/mod.rs b/src/service/authentication/mod.rs
index f8e99de..3bdb0a8 100644
--- a/src/service/authentication/mod.rs
+++ b/src/service/authentication/mod.rs
@@ -79,8 +79,6 @@
 //! - 权限不足
 //! - 网络连接问题
 
-use std::sync::Arc;
-
 /// 身份认证服务 v1 版本
 pub mod v1;
 
@@ -129,9 +127,9 @@ impl AuthenService {
     ///
     /// # 返回值
     /// 配置完成的身份认证服务实例
-    pub fn new(config: Arc<crate::core::config::Config>) -> Self {
+    pub fn new(config: crate::core::config::Config) -> Self {
         Self {
-            v1: v1::V1::new((*config).clone()),
+            v1: v1::V1::new(config.clone()),
         }
     }
 }
diff --git a/src/service/calendar/v4/calendar/create.rs b/src/service/calendar/v4/calendar/create.rs
index 4dc79fb..8a8592c 100644
--- a/src/service/calendar/v4/calendar/create.rs
+++ b/src/service/calendar/v4/calendar/create.rs
@@ -84,7 +84,7 @@ impl CreateCalendarRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         // 构建请求体
diff --git a/src/service/calendar/v4/calendar/delete.rs b/src/service/calendar/v4/calendar/delete.rs
index 9dafb6d..6e2f8b3 100644
--- a/src/service/calendar/v4/calendar/delete.rs
+++ b/src/service/calendar/v4/calendar/delete.rs
@@ -1,22 +1,22 @@
 //! # 删除共享日历
 //!
 //! 删除一个共享日历的API接口。
-//! 
+//!
 //! ## 功能描述
-//! 
+//!
 //! 此功能用于删除用户创建的共享日历。删除后，日历中的所有事件也会被删除，
 //! 且该操作不可逆。
-//! 
+//!
 //! ## API 文档
-//! 
+//!
 //! 参考飞书开放平台文档: <https://open.feishu.cn/document/server-docs/calendar-v4/calendar/delete>
-//! 
+//!
 //! ## 实现状态
-//! 
+//!
 //! 🚧 **待实现** - 此功能尚未实现，敬请期待。
-//! 
+//!
 //! ## 预期接口
-//! 
+//!
 //! ```rust,ignore
 //! // 删除指定的共享日历
 //! let response = client.calendar.v4.calendar.delete(
diff --git a/src/service/calendar/v4/calendar/get.rs b/src/service/calendar/v4/calendar/get.rs
index 2c91305..7c2dcfa 100644
--- a/src/service/calendar/v4/calendar/get.rs
+++ b/src/service/calendar/v4/calendar/get.rs
@@ -57,7 +57,7 @@ impl GetCalendarRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         self.request
diff --git a/src/service/calendar/v4/calendar/list.rs b/src/service/calendar/v4/calendar/list.rs
index a9ef25c..9fa924e 100644
--- a/src/service/calendar/v4/calendar/list.rs
+++ b/src/service/calendar/v4/calendar/list.rs
@@ -75,28 +75,28 @@ impl ListCalendarRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         if let Some(page_size) = self.request.page_size {
             self.request
                 .api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(ref page_token) = self.request.page_token {
             self.request
                 .api_req
                 .query_params
-                .insert("page_token".to_string(), page_token.clone());
+                .insert("page_token", page_token.clone());
         }
 
         if let Some(sync_events) = self.request.sync_events {
             self.request
                 .api_req
                 .query_params
-                .insert("sync_events".to_string(), sync_events.to_string());
+                .insert("sync_events", sync_events.to_string());
         }
 
         self.request
diff --git a/src/service/calendar/v4/calendar/patch.rs b/src/service/calendar/v4/calendar/patch.rs
index 365d7ef..f3ef497 100644
--- a/src/service/calendar/v4/calendar/patch.rs
+++ b/src/service/calendar/v4/calendar/patch.rs
@@ -1,12 +1,12 @@
 //! # 更新日历
 //!
 //! 部分更新共享日历的信息。
-//! 
+//!
 //! ## 功能描述
-//! 
+//!
 //! 该接口用于部分更新日历的属性，如日历名称、描述、颜色等。
 //! 与 PUT 方法不同，PATCH 只会更新提供的字段。
-//! 
+//!
 //! ## 实现状态
-//! 
+//!
 //! 🚧 **待实现** - 此功能尚未实现，敬请期待。
diff --git a/src/service/calendar/v4/calendar/primary.rs b/src/service/calendar/v4/calendar/primary.rs
index 35164dd..09f0541 100644
--- a/src/service/calendar/v4/calendar/primary.rs
+++ b/src/service/calendar/v4/calendar/primary.rs
@@ -1,12 +1,12 @@
 //! # 主日历管理
 //!
 //! 获取用户的主日历信息。
-//! 
+//!
 //! ## 功能描述
-//! 
+//!
 //! 主日历是用户的默认日历，每个用户都有一个主日历。
 //! 此接口用于获取或操作用户的主日历信息。
-//! 
+//!
 //! ## 实现状态
-//! 
+//!
 //! 🚧 **待实现** - 此功能尚未实现，敬请期待。
diff --git a/src/service/calendar/v4/calendar/search.rs b/src/service/calendar/v4/calendar/search.rs
index 3c8cb2c..566fbc7 100644
--- a/src/service/calendar/v4/calendar/search.rs
+++ b/src/service/calendar/v4/calendar/search.rs
@@ -1,17 +1,17 @@
 //! # 搜索日历
 //!
 //! 搜索用户可访问的日历列表。
-//! 
+//!
 //! ## 功能描述
-//! 
+//!
 //! 此功能用于搜索用户有访问权限的日历，支持按日历名称、描述等条件进行搜索。
-//! 
+//!
 //! ## 实现状态
-//! 
+//!
 //! 🚧 **待实现** - 此功能尚未实现，敬请期待。
-//! 
+//!
 //! ## 预期接口
-//! 
+//!
 //! ```rust,ignore
 //! // 搜索日历
 //! let response = client.calendar.v4.calendar.search(
diff --git a/src/service/calendar/v4/calendar_event/create.rs b/src/service/calendar/v4/calendar_event/create.rs
index 3bbebc4..477d2b3 100644
--- a/src/service/calendar/v4/calendar_event/create.rs
+++ b/src/service/calendar/v4/calendar_event/create.rs
@@ -1,12 +1,12 @@
 //! # 创建日程事件
 //!
 //! 在指定日历中创建一个日程事件。
-//! 
+//!
 //! ## 功能描述
-//! 
+//!
 //! 此接口用于在用户日历中创建新的日程事件，支持设置事件标题、时间、地点、
 //! 参与者、描述等信息。
-//! 
+//!
 //! ## 实现状态
-//! 
+//!
 //! 🚧 **待实现** - 此功能尚未实现，敬请期待。
diff --git a/src/service/calendar/v4/calendar_event/delete.rs b/src/service/calendar/v4/calendar_event/delete.rs
index 6354f2b..b15dec5 100644
--- a/src/service/calendar/v4/calendar_event/delete.rs
+++ b/src/service/calendar/v4/calendar_event/delete.rs
@@ -1,7 +1,7 @@
 //! # 删除日程事件
 //!
 //! 删除指定的日程事件。删除后不可恢复。
-//! 
+//!
 //! ## 实现状态
-//! 
+//!
 //! 🚧 **待实现** - 此功能尚未实现，敬请期待。
diff --git a/src/service/calendar/v4/calendar_event/get.rs b/src/service/calendar/v4/calendar_event/get.rs
index e66f593..a6e10c9 100644
--- a/src/service/calendar/v4/calendar_event/get.rs
+++ b/src/service/calendar/v4/calendar_event/get.rs
@@ -1,12 +1,12 @@
 //! # 获取日程事件
 //!
 //! 获取指定日程事件的详细信息。
-//! 
+//!
 //! ## 功能描述
-//! 
+//!
 //! 此接口用于获取指定日程事件的详细信息，包括事件标题、时间、
 //! 地点、参与者、描述等所有相关信息。
-//! 
+//!
 //! ## 实现状态
-//! 
+//!
 //! 🚧 **待实现** - 此功能尚未实现，敬请期待。
diff --git a/src/service/calendar/v4/calendar_event/list.rs b/src/service/calendar/v4/calendar_event/list.rs
index 6bf4eda..81b21fe 100644
--- a/src/service/calendar/v4/calendar_event/list.rs
+++ b/src/service/calendar/v4/calendar_event/list.rs
@@ -1,7 +1,7 @@
 //! # 获取日程事件列表
 //!
 //! 分页获取指定日历中的日程事件列表。
-//! 
+//!
 //! ## 实现状态
-//! 
+//!
 //! 🚧 **待实现** - 此功能尚未实现，敬请期待。
diff --git a/src/service/calendar/v4/calendar_event/patch.rs b/src/service/calendar/v4/calendar_event/patch.rs
index d6b3e8a..6fbfe5b 100644
--- a/src/service/calendar/v4/calendar_event/patch.rs
+++ b/src/service/calendar/v4/calendar_event/patch.rs
@@ -1,7 +1,7 @@
 //! # 更新日程事件
 //!
 //! 部分更新指定日程事件的信息。
-//! 
+//!
 //! ## 实现状态
-//! 
+//!
 //! 🚧 **待实现** - 此功能尚未实现，敬请期待。
diff --git a/src/service/calendar/v4/calendar_event/reply.rs b/src/service/calendar/v4/calendar_event/reply.rs
index a730fe8..daebc98 100644
--- a/src/service/calendar/v4/calendar_event/reply.rs
+++ b/src/service/calendar/v4/calendar_event/reply.rs
@@ -1,7 +1,7 @@
 //! # 回复日程邀请
 //!
 //! 回复日程事件的邀请（接受/拒绝/暂定）。
-//! 
+//!
 //! ## 实现状态
-//! 
+//!
 //! 🚧 **待实现** - 此功能尚未实现，敬请期待。
diff --git a/src/service/calendar/v4/calendar_event/search.rs b/src/service/calendar/v4/calendar_event/search.rs
index e41217b..87f17b7 100644
--- a/src/service/calendar/v4/calendar_event/search.rs
+++ b/src/service/calendar/v4/calendar_event/search.rs
@@ -1,7 +1,7 @@
 //! # 搜索日程事件
 //!
 //! 在指定日历中搜索匹配条件的日程事件。
-//! 
+//!
 //! ## 实现状态
-//! 
+//!
 //! 🚧 **待实现** - 此功能尚未实现，敬请期待。
diff --git a/src/service/calendar/v4/mod.rs b/src/service/calendar/v4/mod.rs
index 7cbe739..8141e40 100644
--- a/src/service/calendar/v4/mod.rs
+++ b/src/service/calendar/v4/mod.rs
@@ -1,5 +1,3 @@
-use std::sync::Arc;
-
 use crate::core::config::Config;
 
 // 子模块声明
@@ -54,17 +52,17 @@ pub struct V4 {
 }
 
 impl V4 {
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            calendar: CalendarManagementService::new(Arc::clone(&config)),
-            calendar_acl: CalendarAclService::new(Arc::clone(&config)),
-            calendar_event: CalendarEventService::new(Arc::clone(&config)),
-            meeting_chat: MeetingChatService::new(Arc::clone(&config)),
-            meeting_minute: MeetingMinuteService::new(Arc::clone(&config)),
-            timeoff_event: TimeoffEventService::new(Arc::clone(&config)),
-            meeting_room_event: MeetingRoomEventService::new(Arc::clone(&config)),
-            attendee: AttendeeService::new(Arc::clone(&config)),
-            setting: SettingService::new(Arc::clone(&config)),
+            calendar: CalendarManagementService::new(config.clone()),
+            calendar_acl: CalendarAclService::new(config.clone()),
+            calendar_event: CalendarEventService::new(config.clone()),
+            meeting_chat: MeetingChatService::new(config.clone()),
+            meeting_minute: MeetingMinuteService::new(config.clone()),
+            timeoff_event: TimeoffEventService::new(config.clone()),
+            meeting_room_event: MeetingRoomEventService::new(config.clone()),
+            attendee: AttendeeService::new(config.clone()),
+            setting: SettingService::new(config.clone()),
             exchange_binding: ExchangeBindingService::new(config),
         }
     }
diff --git a/src/service/cardkit/v1/card/batch_update.rs b/src/service/cardkit/v1/card/batch_update.rs
index cba197f..a532888 100644
--- a/src/service/cardkit/v1/card/batch_update.rs
+++ b/src/service/cardkit/v1/card/batch_update.rs
@@ -72,7 +72,7 @@ impl BatchUpdateCardRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         // 构建请求体
diff --git a/src/service/cardkit/v1/card/create.rs b/src/service/cardkit/v1/card/create.rs
index 2f6f59d..c4c9017 100644
--- a/src/service/cardkit/v1/card/create.rs
+++ b/src/service/cardkit/v1/card/create.rs
@@ -76,7 +76,7 @@ impl CreateCardRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         // 构建请求体
diff --git a/src/service/cardkit/v1/card/settings.rs b/src/service/cardkit/v1/card/settings.rs
index e0fd1f5..615484d 100644
--- a/src/service/cardkit/v1/card/settings.rs
+++ b/src/service/cardkit/v1/card/settings.rs
@@ -82,7 +82,7 @@ impl UpdateCardSettingsRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         // 构建请求体
diff --git a/src/service/cardkit/v1/card/update.rs b/src/service/cardkit/v1/card/update.rs
index d1d16d7..a04c867 100644
--- a/src/service/cardkit/v1/card/update.rs
+++ b/src/service/cardkit/v1/card/update.rs
@@ -82,7 +82,7 @@ impl UpdateCardRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         // 构建请求体
diff --git a/src/service/cardkit/v1/card_element/content.rs b/src/service/cardkit/v1/card_element/content.rs
index 9db9f93..dc8e54c 100644
--- a/src/service/cardkit/v1/card_element/content.rs
+++ b/src/service/cardkit/v1/card_element/content.rs
@@ -1,8 +1,8 @@
 //! # 流式更新卡片文本
 //!
 //! 为卡片组件提供流式文本更新功能。
-//! 
+//!
 //! ## 实现状态
-//! 
+//!
 //! 🚧 **待实现** - 此功能尚未实现，敬请期待。
 // 参考: https://open.feishu.cn/document/cardkit-v1/card-element/content
diff --git a/src/service/cardkit/v1/card_element/create.rs b/src/service/cardkit/v1/card_element/create.rs
index 4c81695..876ddaa 100644
--- a/src/service/cardkit/v1/card_element/create.rs
+++ b/src/service/cardkit/v1/card_element/create.rs
@@ -90,7 +90,7 @@ impl CreateElementRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         // 构建请求体
diff --git a/src/service/cardkit/v1/card_element/delete.rs b/src/service/cardkit/v1/card_element/delete.rs
index ecaf5c3..536aac0 100644
--- a/src/service/cardkit/v1/card_element/delete.rs
+++ b/src/service/cardkit/v1/card_element/delete.rs
@@ -1,8 +1,8 @@
 //! # 删除卡片组件
 //!
 //! 删除卡片中的指定组件。
-//! 
+//!
 //! ## 实现状态
-//! 
+//!
 //! 🚧 **待实现** - 此功能尚未实现，敬请期待。
 // 参考: https://open.feishu.cn/document/cardkit-v1/card-element/delete
diff --git a/src/service/cardkit/v1/card_element/patch.rs b/src/service/cardkit/v1/card_element/patch.rs
index 165ead2..44e7f18 100644
--- a/src/service/cardkit/v1/card_element/patch.rs
+++ b/src/service/cardkit/v1/card_element/patch.rs
@@ -1,8 +1,8 @@
 //! # 更新组件属性
 //!
 //! 部分更新卡片组件的属性信息。
-//! 
+//!
 //! ## 实现状态
-//! 
+//!
 //! 🚧 **待实现** - 此功能尚未实现，敬请期待。
 // 参考: https://open.feishu.cn/document/cardkit-v1/card-element/patch
diff --git a/src/service/cardkit/v1/card_element/update.rs b/src/service/cardkit/v1/card_element/update.rs
index cc49066..da693c4 100644
--- a/src/service/cardkit/v1/card_element/update.rs
+++ b/src/service/cardkit/v1/card_element/update.rs
@@ -1,8 +1,8 @@
 //! # 更新卡片组件
 //!
 //! 更新卡片中的指定组件内容。
-//! 
+//!
 //! ## 实现状态
-//! 
+//!
 //! 🚧 **待实现** - 此功能尚未实现，敬请期待。
 // 参考: https://open.feishu.cn/document/cardkit-v1/card-element/update
diff --git a/src/service/cloud_docs/assistant/mod.rs b/src/service/cloud_docs/assistant/mod.rs
index 55b343a..6547af4 100644
--- a/src/service/cloud_docs/assistant/mod.rs
+++ b/src/service/cloud_docs/assistant/mod.rs
@@ -1,5 +1,3 @@
-use std::sync::Arc;
-
 use crate::core::config::Config;
 
 pub use v1::V1;
@@ -13,9 +11,9 @@ pub struct AssistantService {
 }
 
 impl AssistantService {
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            v1: V1::new((*config).clone()),
+            v1: V1::new(config.clone()),
         }
     }
 }
diff --git a/src/service/cloud_docs/bitable/mod.rs b/src/service/cloud_docs/bitable/mod.rs
index 91aa784..78038ea 100644
--- a/src/service/cloud_docs/bitable/mod.rs
+++ b/src/service/cloud_docs/bitable/mod.rs
@@ -1,5 +1,3 @@
-use std::sync::Arc;
-
 pub mod v1;
 
 pub struct BitableService {
@@ -7,9 +5,9 @@ pub struct BitableService {
 }
 
 impl BitableService {
-    pub fn new(config: Arc<crate::core::config::Config>) -> Self {
+    pub fn new(config: crate::core::config::Config) -> Self {
         Self {
-            v1: v1::V1::new((*config).clone()),
+            v1: v1::V1::new(config),
         }
     }
 }
diff --git a/src/service/cloud_docs/bitable/v1/app_dashboard/list.rs b/src/service/cloud_docs/bitable/v1/app_dashboard/list.rs
index 75f368c..17585ec 100644
--- a/src/service/cloud_docs/bitable/v1/app_dashboard/list.rs
+++ b/src/service/cloud_docs/bitable/v1/app_dashboard/list.rs
@@ -72,13 +72,13 @@ impl ListDashboardRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("page_token".to_string(), page_token.clone());
+                .insert("page_token", page_token.clone());
         }
         if let Some(page_size) = &self.request.page_size {
             self.request
                 .api_request
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         self.request
     }
@@ -144,10 +144,10 @@ impl DashboardService {
 /// 列出仪表盘 (向后兼容的函数)
 pub async fn list_dashboard(
     request: ListDashboardRequest,
-    config: &Config,
+    config: Config,
     option: Option<RequestOption>,
 ) -> SDKResult<BaseResponse<ListDashboardResponse>> {
-    let service = DashboardService::new(config.clone());
+    let service = DashboardService::new(config);
     service.list(request, option).await
 }
 
diff --git a/src/service/cloud_docs/bitable/v1/app_dashboard/mod.rs b/src/service/cloud_docs/bitable/v1/app_dashboard/mod.rs
index bfdbe05..d1a109c 100644
--- a/src/service/cloud_docs/bitable/v1/app_dashboard/mod.rs
+++ b/src/service/cloud_docs/bitable/v1/app_dashboard/mod.rs
@@ -31,6 +31,6 @@ impl AppDashboardService {
         request: ListDashboardRequest,
         option: Option<crate::core::req_option::RequestOption>,
     ) -> crate::core::SDKResult<crate::core::api_resp::BaseResponse<ListDashboardResponse>> {
-        list::list_dashboard(request, &self.config, option).await
+        list::list_dashboard(request, self.config.clone(), option).await
     }
 }
diff --git a/src/service/cloud_docs/bitable/v1/app_role/list.rs b/src/service/cloud_docs/bitable/v1/app_role/list.rs
index bc4667a..6e794f2 100644
--- a/src/service/cloud_docs/bitable/v1/app_role/list.rs
+++ b/src/service/cloud_docs/bitable/v1/app_role/list.rs
@@ -72,13 +72,13 @@ impl ListAppRoleRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("page_token".to_string(), page_token.clone());
+                .insert("page_token", page_token.clone());
         }
         if let Some(page_size) = &self.request.page_size {
             self.request
                 .api_request
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         self.request
     }
diff --git a/src/service/cloud_docs/bitable/v1/app_role_member/batch_create.rs b/src/service/cloud_docs/bitable/v1/app_role_member/batch_create.rs
index 02cde38..2172430 100644
--- a/src/service/cloud_docs/bitable/v1/app_role_member/batch_create.rs
+++ b/src/service/cloud_docs/bitable/v1/app_role_member/batch_create.rs
@@ -102,7 +102,7 @@ impl BatchCreateRoleMemberRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.clone());
+                .insert("user_id_type", user_id_type.clone());
         }
         self.request.api_request.body = serde_json::to_vec(&self.request).unwrap();
         self.request
diff --git a/src/service/cloud_docs/bitable/v1/app_role_member/batch_delete.rs b/src/service/cloud_docs/bitable/v1/app_role_member/batch_delete.rs
index 7f2a385..c41f620 100644
--- a/src/service/cloud_docs/bitable/v1/app_role_member/batch_delete.rs
+++ b/src/service/cloud_docs/bitable/v1/app_role_member/batch_delete.rs
@@ -89,7 +89,7 @@ impl BatchDeleteRoleMemberRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.clone());
+                .insert("user_id_type", user_id_type.clone());
         }
         self.request.api_request.body = serde_json::to_vec(&self.request).unwrap();
         self.request
diff --git a/src/service/cloud_docs/bitable/v1/app_role_member/create.rs b/src/service/cloud_docs/bitable/v1/app_role_member/create.rs
index 886d561..2f006f1 100644
--- a/src/service/cloud_docs/bitable/v1/app_role_member/create.rs
+++ b/src/service/cloud_docs/bitable/v1/app_role_member/create.rs
@@ -118,7 +118,7 @@ impl CreateRoleMemberRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.clone());
+                .insert("user_id_type", user_id_type.clone());
         }
         self.request.api_request.body = serde_json::to_vec(&self.request).unwrap();
         self.request
diff --git a/src/service/cloud_docs/bitable/v1/app_role_member/delete.rs b/src/service/cloud_docs/bitable/v1/app_role_member/delete.rs
index 7132b5b..f586580 100644
--- a/src/service/cloud_docs/bitable/v1/app_role_member/delete.rs
+++ b/src/service/cloud_docs/bitable/v1/app_role_member/delete.rs
@@ -84,7 +84,7 @@ impl DeleteRoleMemberRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.clone());
+                .insert("user_id_type", user_id_type.clone());
         }
         self.request
     }
diff --git a/src/service/cloud_docs/bitable/v1/app_role_member/list.rs b/src/service/cloud_docs/bitable/v1/app_role_member/list.rs
index 4014c96..2467bf3 100644
--- a/src/service/cloud_docs/bitable/v1/app_role_member/list.rs
+++ b/src/service/cloud_docs/bitable/v1/app_role_member/list.rs
@@ -113,19 +113,19 @@ impl ListRoleMemberRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.clone());
+                .insert("user_id_type", user_id_type.clone());
         }
         if let Some(page_token) = &self.request.page_token {
             self.request
                 .api_request
                 .query_params
-                .insert("page_token".to_string(), page_token.clone());
+                .insert("page_token", page_token.clone());
         }
         if let Some(page_size) = &self.request.page_size {
             self.request
                 .api_request
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         self.request
     }
diff --git a/src/service/cloud_docs/bitable/v1/app_table/list.rs b/src/service/cloud_docs/bitable/v1/app_table/list.rs
index 53dc949..3b13025 100644
--- a/src/service/cloud_docs/bitable/v1/app_table/list.rs
+++ b/src/service/cloud_docs/bitable/v1/app_table/list.rs
@@ -26,14 +26,12 @@ impl AppTableService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
diff --git a/src/service/cloud_docs/bitable/v1/app_table_field/create.rs b/src/service/cloud_docs/bitable/v1/app_table_field/create.rs
index 13e0f2e..bb106e4 100644
--- a/src/service/cloud_docs/bitable/v1/app_table_field/create.rs
+++ b/src/service/cloud_docs/bitable/v1/app_table_field/create.rs
@@ -136,13 +136,13 @@ impl CreateFieldRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.clone());
+                .insert("user_id_type", user_id_type.clone());
         }
         if let Some(client_token) = &self.request.client_token {
             self.request
                 .api_request
                 .query_params
-                .insert("client_token".to_string(), client_token.clone());
+                .insert("client_token", client_token.clone());
         }
         self.request.api_request.body = serde_json::to_vec(&self.request).unwrap();
         self.request
diff --git a/src/service/cloud_docs/bitable/v1/app_table_field/list.rs b/src/service/cloud_docs/bitable/v1/app_table_field/list.rs
index 06f9802..fef6b08 100644
--- a/src/service/cloud_docs/bitable/v1/app_table_field/list.rs
+++ b/src/service/cloud_docs/bitable/v1/app_table_field/list.rs
@@ -100,25 +100,25 @@ impl ListFieldRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("view_id".to_string(), view_id.clone());
+                .insert("view_id", view_id.clone());
         }
         if let Some(text_field_as_array) = &self.request.text_field_as_array {
-            self.request.api_request.query_params.insert(
-                "text_field_as_array".to_string(),
-                text_field_as_array.to_string(),
-            );
+            self.request
+                .api_request
+                .query_params
+                .insert("text_field_as_array", text_field_as_array.to_string());
         }
         if let Some(page_token) = &self.request.page_token {
             self.request
                 .api_request
                 .query_params
-                .insert("page_token".to_string(), page_token.clone());
+                .insert("page_token", page_token.clone());
         }
         if let Some(page_size) = &self.request.page_size {
             self.request
                 .api_request
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         self.request
     }
diff --git a/src/service/cloud_docs/bitable/v1/app_table_field/update.rs b/src/service/cloud_docs/bitable/v1/app_table_field/update.rs
index 501e271..1dfcf7b 100644
--- a/src/service/cloud_docs/bitable/v1/app_table_field/update.rs
+++ b/src/service/cloud_docs/bitable/v1/app_table_field/update.rs
@@ -132,7 +132,7 @@ impl UpdateFieldRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.clone());
+                .insert("user_id_type", user_id_type.clone());
         }
         self.request.api_request.body = serde_json::to_vec(&self.request).unwrap();
         self.request
diff --git a/src/service/cloud_docs/bitable/v1/app_table_record/batch_create.rs b/src/service/cloud_docs/bitable/v1/app_table_record/batch_create.rs
index 6bea80e..6ceb03d 100644
--- a/src/service/cloud_docs/bitable/v1/app_table_record/batch_create.rs
+++ b/src/service/cloud_docs/bitable/v1/app_table_record/batch_create.rs
@@ -96,13 +96,13 @@ impl BatchCreateRecordRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.clone());
+                .insert("user_id_type", user_id_type.clone());
         }
         if let Some(client_token) = &self.request.client_token {
             self.request
                 .api_request
                 .query_params
-                .insert("client_token".to_string(), client_token.clone());
+                .insert("client_token", client_token.clone());
         }
         self.request.api_request.body = serde_json::to_vec(&self.request).unwrap();
         self.request
diff --git a/src/service/cloud_docs/bitable/v1/app_table_record/batch_get.rs b/src/service/cloud_docs/bitable/v1/app_table_record/batch_get.rs
index e1cf1e3..a84fd6c 100644
--- a/src/service/cloud_docs/bitable/v1/app_table_record/batch_get.rs
+++ b/src/service/cloud_docs/bitable/v1/app_table_record/batch_get.rs
@@ -105,19 +105,19 @@ impl BatchGetRecordRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.clone());
+                .insert("user_id_type", user_id_type.clone());
         }
         if let Some(automatic) = &self.request.automatic {
             self.request
                 .api_request
                 .query_params
-                .insert("automatic".to_string(), automatic.to_string());
+                .insert("automatic", automatic.to_string());
         }
         if let Some(with_shared_url) = &self.request.with_shared_url {
             self.request
                 .api_request
                 .query_params
-                .insert("with_shared_url".to_string(), with_shared_url.to_string());
+                .insert("with_shared_url", with_shared_url.to_string());
         }
         self.request.api_request.body = serde_json::to_vec(&self.request).unwrap();
         self.request
diff --git a/src/service/cloud_docs/bitable/v1/app_table_record/batch_update.rs b/src/service/cloud_docs/bitable/v1/app_table_record/batch_update.rs
index 1cc6dbd..0b5f8d0 100644
--- a/src/service/cloud_docs/bitable/v1/app_table_record/batch_update.rs
+++ b/src/service/cloud_docs/bitable/v1/app_table_record/batch_update.rs
@@ -100,7 +100,7 @@ impl BatchUpdateRecordRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.clone());
+                .insert("user_id_type", user_id_type.clone());
         }
         self.request.api_request.body = serde_json::to_vec(&self.request).unwrap();
         self.request
diff --git a/src/service/cloud_docs/bitable/v1/app_table_record/create.rs b/src/service/cloud_docs/bitable/v1/app_table_record/create.rs
index 4fcc7af..7c3dac7 100644
--- a/src/service/cloud_docs/bitable/v1/app_table_record/create.rs
+++ b/src/service/cloud_docs/bitable/v1/app_table_record/create.rs
@@ -103,13 +103,13 @@ impl CreateRecordRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.clone());
+                .insert("user_id_type", user_id_type.clone());
         }
         if let Some(client_token) = &self.request.client_token {
             self.request
                 .api_request
                 .query_params
-                .insert("client_token".to_string(), client_token.clone());
+                .insert("client_token", client_token.clone());
         }
         match serde_json::to_vec(&self.request) {
             Ok(bytes) => {
diff --git a/src/service/cloud_docs/bitable/v1/app_table_record/search.rs b/src/service/cloud_docs/bitable/v1/app_table_record/search.rs
index 9e0c1bc..0e77f6d 100644
--- a/src/service/cloud_docs/bitable/v1/app_table_record/search.rs
+++ b/src/service/cloud_docs/bitable/v1/app_table_record/search.rs
@@ -162,19 +162,19 @@ impl SearchRecordRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.clone());
+                .insert("user_id_type", user_id_type.clone());
         }
         if let Some(page_token) = &self.request.page_token {
             self.request
                 .api_request
                 .query_params
-                .insert("page_token".to_string(), page_token.clone());
+                .insert("page_token", page_token.clone());
         }
         if let Some(page_size) = &self.request.page_size {
             self.request
                 .api_request
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         self.request.api_request.body = serde_json::to_vec(&self.request).unwrap();
         self.request
diff --git a/src/service/cloud_docs/bitable/v1/app_table_record/update.rs b/src/service/cloud_docs/bitable/v1/app_table_record/update.rs
index 48741c2..036eb93 100644
--- a/src/service/cloud_docs/bitable/v1/app_table_record/update.rs
+++ b/src/service/cloud_docs/bitable/v1/app_table_record/update.rs
@@ -105,7 +105,7 @@ impl UpdateRecordRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.clone());
+                .insert("user_id_type", user_id_type.clone());
         }
         self.request.api_request.body = serde_json::to_vec(&self.request).unwrap();
         self.request
diff --git a/src/service/cloud_docs/bitable/v1/app_table_view/list.rs b/src/service/cloud_docs/bitable/v1/app_table_view/list.rs
index 6dcef2e..7f7e0c3 100644
--- a/src/service/cloud_docs/bitable/v1/app_table_view/list.rs
+++ b/src/service/cloud_docs/bitable/v1/app_table_view/list.rs
@@ -29,14 +29,12 @@ impl AppTableViewService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
diff --git a/src/service/cloud_docs/bitable/v1/app_workflow/list.rs b/src/service/cloud_docs/bitable/v1/app_workflow/list.rs
index 58a2086..b829e6e 100644
--- a/src/service/cloud_docs/bitable/v1/app_workflow/list.rs
+++ b/src/service/cloud_docs/bitable/v1/app_workflow/list.rs
@@ -69,13 +69,13 @@ impl ListWorkflowRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = &self.request.page_token {
             self.request
                 .api_request
                 .query_params
-                .insert("page_token".to_string(), page_token.clone());
+                .insert("page_token", page_token.clone());
         }
         self.request
     }
diff --git a/src/service/cloud_docs/bitable/v1/form/list.rs b/src/service/cloud_docs/bitable/v1/form/list.rs
index 8e00b0e..7ae31f7 100644
--- a/src/service/cloud_docs/bitable/v1/form/list.rs
+++ b/src/service/cloud_docs/bitable/v1/form/list.rs
@@ -79,13 +79,13 @@ impl ListFormQuestionRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("page_token".to_string(), page_token.clone());
+                .insert("page_token", page_token.clone());
         }
         if let Some(page_size) = &self.request.page_size {
             self.request
                 .api_request
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         self.request
     }
diff --git a/src/service/cloud_docs/board/mod.rs b/src/service/cloud_docs/board/mod.rs
index b1c65af..50f7b94 100644
--- a/src/service/cloud_docs/board/mod.rs
+++ b/src/service/cloud_docs/board/mod.rs
@@ -5,22 +5,20 @@
 
 pub mod v1;
 
-use std::sync::Arc;
-
 use crate::core::{config::Config, req_option::RequestOption, SDKResult};
 
 use self::v1::*;
 
 /// 画板服务
 pub struct BoardService {
-    config: Arc<Config>,
+    config: Config,
     pub whiteboard: v1::whiteboard::WhiteboardService,
 }
 
 impl BoardService {
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            whiteboard: v1::whiteboard::WhiteboardService::new((*config).clone()),
+            whiteboard: v1::whiteboard::WhiteboardService::new(config.clone()),
             config,
         }
     }
diff --git a/src/service/cloud_docs/board/v1/whiteboard.rs b/src/service/cloud_docs/board/v1/whiteboard.rs
index 428d77d..c0daf2f 100644
--- a/src/service/cloud_docs/board/v1/whiteboard.rs
+++ b/src/service/cloud_docs/board/v1/whiteboard.rs
@@ -43,17 +43,13 @@ impl WhiteboardService {
 
         // 添加查询参数
         if let Some(format) = request.format {
-            api_req.query_params.insert("format".to_string(), format);
+            api_req.query_params.insert("format", format);
         }
         if let Some(width) = request.width {
-            api_req
-                .query_params
-                .insert("width".to_string(), width.to_string());
+            api_req.query_params.insert("width", width.to_string());
         }
         if let Some(height) = request.height {
-            api_req
-                .query_params
-                .insert("height".to_string(), height.to_string());
+            api_req.query_params.insert("height", height.to_string());
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
diff --git a/src/service/cloud_docs/comments/mod.rs b/src/service/cloud_docs/comments/mod.rs
index f97c1a7..659f5a9 100644
--- a/src/service/cloud_docs/comments/mod.rs
+++ b/src/service/cloud_docs/comments/mod.rs
@@ -1,5 +1,3 @@
-use std::sync::Arc;
-
 use crate::core::{config::Config, req_option::RequestOption, SDKResult};
 
 pub use batch_query::{
@@ -29,11 +27,11 @@ mod update_reply;
 
 /// 评论服务
 pub struct CommentsService {
-    config: Arc<Config>,
+    config: Config,
 }
 
 impl CommentsService {
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self { config }
     }
 
diff --git a/src/service/cloud_docs/docx/mod.rs b/src/service/cloud_docs/docx/mod.rs
index f9b541a..b8b5b26 100644
--- a/src/service/cloud_docs/docx/mod.rs
+++ b/src/service/cloud_docs/docx/mod.rs
@@ -1,5 +1,3 @@
-use std::sync::Arc;
-
 use crate::core::config::Config;
 
 pub mod v1;
@@ -9,9 +7,9 @@ pub struct DocxService {
 }
 
 impl DocxService {
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         DocxService {
-            v1: v1::V1::new((*config).clone()),
+            v1: v1::V1::new(config.clone()),
         }
     }
 }
diff --git a/src/service/cloud_docs/docx/v1/document.rs b/src/service/cloud_docs/docx/v1/document.rs
index 8d1ac9e..e256d70 100644
--- a/src/service/cloud_docs/docx/v1/document.rs
+++ b/src/service/cloud_docs/docx/v1/document.rs
@@ -115,12 +115,10 @@ impl DocumentService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
diff --git a/src/service/cloud_docs/docx/v1/document_block.rs b/src/service/cloud_docs/docx/v1/document_block.rs
index b1d459d..0269654 100644
--- a/src/service/cloud_docs/docx/v1/document_block.rs
+++ b/src/service/cloud_docs/docx/v1/document_block.rs
@@ -178,12 +178,10 @@ impl DocumentBlockService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
diff --git a/src/service/cloud_docs/drive/mod.rs b/src/service/cloud_docs/drive/mod.rs
index 1327bb7..017a254 100644
--- a/src/service/cloud_docs/drive/mod.rs
+++ b/src/service/cloud_docs/drive/mod.rs
@@ -38,8 +38,6 @@
 //! // let file_info = client.drive.v1.file.get(file_token, None).await?;
 //! ```
 
-use std::sync::Arc;
-
 use crate::{
     core::config::Config,
     service::drive::{v1::V1, v2::V2},
@@ -66,10 +64,10 @@ impl DriveService {
     ///
     /// # 参数
     /// - `config`: 客户端配置
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            v1: V1::new((*config).clone()),
-            v2: V2::new((*config).clone()),
+            v1: V1::new(config.clone()),
+            v2: V2::new(config.clone()),
         }
     }
 }
diff --git a/src/service/cloud_docs/drive/v1.rs b/src/service/cloud_docs/drive/v1.rs
index 48de81e..d554bdd 100644
--- a/src/service/cloud_docs/drive/v1.rs
+++ b/src/service/cloud_docs/drive/v1.rs
@@ -1,5 +1,3 @@
-use std::sync::Arc;
-
 use crate::core::config::Config;
 
 pub mod event;
@@ -23,15 +21,15 @@ pub struct V1 {
 }
 
 impl V1 {
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            event: event::EventService::new(Arc::clone(&config)),
-            file: file::FileService::new(Arc::clone(&config)),
-            file_version: file_version::FileVersionService::new(Arc::clone(&config)),
-            files: files::FilesService::new(Arc::clone(&config)),
-            folder: folder::FolderService::new(Arc::clone(&config)),
-            like: like::LikeService::new(Arc::clone(&config)),
-            media: media::MediaService::new(Arc::clone(&config)),
+            event: event::EventService::new(config.clone()),
+            file: file::FileService::new(config.clone()),
+            file_version: file_version::FileVersionService::new(config.clone()),
+            files: files::FilesService::new(config.clone()),
+            folder: folder::FolderService::new(config.clone()),
+            like: like::LikeService::new(config.clone()),
+            media: media::MediaService::new(config.clone()),
             permissions: permissions::PermissionsService::new(config),
         }
     }
diff --git a/src/service/cloud_docs/drive/v1/file.rs b/src/service/cloud_docs/drive/v1/file.rs
index d2a1fe5..b3d2cf7 100644
--- a/src/service/cloud_docs/drive/v1/file.rs
+++ b/src/service/cloud_docs/drive/v1/file.rs
@@ -96,14 +96,12 @@ impl FileService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         let api_resp: BaseResponse<ListFileViewRecordsRespData> =
@@ -229,21 +227,17 @@ impl FileService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("search_key".to_string(), request.search_key);
+            .insert("search_key", request.search_key);
         if let Some(count) = request.count {
-            api_req
-                .query_params
-                .insert("count".to_string(), count.to_string());
+            api_req.query_params.insert("count", count.to_string());
         }
         if let Some(offset) = request.offset {
-            api_req
-                .query_params
-                .insert("offset".to_string(), offset.to_string());
+            api_req.query_params.insert("offset", offset.to_string());
         }
         if let Some(owner_ids) = request.owner_ids {
             api_req
                 .query_params
-                .insert("owner_ids".to_string(), owner_ids.join(","));
+                .insert("owner_ids", owner_ids.join(","));
         }
 
         let api_resp: BaseResponse<SearchFilesRespData> =
diff --git a/src/service/cloud_docs/drive/v1/file_version.rs b/src/service/cloud_docs/drive/v1/file_version.rs
index 7518290..93dace9 100644
--- a/src/service/cloud_docs/drive/v1/file_version.rs
+++ b/src/service/cloud_docs/drive/v1/file_version.rs
@@ -118,14 +118,12 @@ impl FileVersionService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
diff --git a/src/service/cloud_docs/drive/v1/folder.rs b/src/service/cloud_docs/drive/v1/folder.rs
index be70082..f466dc4 100644
--- a/src/service/cloud_docs/drive/v1/folder.rs
+++ b/src/service/cloud_docs/drive/v1/folder.rs
@@ -66,24 +66,18 @@ impl FolderService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(order_by) = request.order_by {
-            api_req
-                .query_params
-                .insert("order_by".to_string(), order_by);
+            api_req.query_params.insert("order_by", order_by);
         }
         if let Some(direction) = request.direction {
-            api_req
-                .query_params
-                .insert("direction".to_string(), direction);
+            api_req.query_params.insert("direction", direction);
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
diff --git a/src/service/cloud_docs/drive/v1/like.rs b/src/service/cloud_docs/drive/v1/like.rs
index 1d85238..79fb442 100644
--- a/src/service/cloud_docs/drive/v1/like.rs
+++ b/src/service/cloud_docs/drive/v1/like.rs
@@ -46,14 +46,12 @@ impl LikeService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
diff --git a/src/service/cloud_docs/drive/v1/media.rs b/src/service/cloud_docs/drive/v1/media.rs
index 44e19a7..d796abb 100644
--- a/src/service/cloud_docs/drive/v1/media.rs
+++ b/src/service/cloud_docs/drive/v1/media.rs
@@ -163,9 +163,7 @@ impl MediaService {
 
         // 添加查询参数
         let file_tokens = request.file_tokens.join(",");
-        api_req
-            .query_params
-            .insert("file_tokens".to_string(), file_tokens);
+        api_req.query_params.insert("file_tokens", file_tokens);
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
         Ok(api_resp)
diff --git a/src/service/cloud_docs/drive/v1/permissions.rs b/src/service/cloud_docs/drive/v1/permissions.rs
index dbb8c42..53852c3 100644
--- a/src/service/cloud_docs/drive/v1/permissions.rs
+++ b/src/service/cloud_docs/drive/v1/permissions.rs
@@ -118,7 +118,7 @@ impl GetPermissionRequestBuilder {
         self.request
             .api_request
             .query_params
-            .insert("type".to_string(), r#type.to_string());
+            .insert("type", r#type.to_string());
         self
     }
 
@@ -323,7 +323,7 @@ impl PatchPermissionRequestBuilder {
         self.request
             .api_request
             .query_params
-            .insert("type".to_string(), r#type.to_string());
+            .insert("type", r#type.to_string());
         self
     }
 
diff --git a/src/service/cloud_docs/drive/v2.rs b/src/service/cloud_docs/drive/v2.rs
index f72af5e..ea66b0d 100644
--- a/src/service/cloud_docs/drive/v2.rs
+++ b/src/service/cloud_docs/drive/v2.rs
@@ -1,5 +1,3 @@
-use std::sync::Arc;
-
 use crate::{
     core::config::Config,
     service::drive::{v1::permissions::PermissionsService, v2::explorer::ExplorerService},
@@ -13,9 +11,9 @@ pub struct V2 {
 }
 
 impl V2 {
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            explorer: ExplorerService::new(Arc::clone(&config)),
+            explorer: ExplorerService::new(config.clone()),
             permission: PermissionsService::new(config),
         }
     }
diff --git a/src/service/cloud_docs/drive/v2/explorer.rs b/src/service/cloud_docs/drive/v2/explorer.rs
index b487916..a8894a6 100644
--- a/src/service/cloud_docs/drive/v2/explorer.rs
+++ b/src/service/cloud_docs/drive/v2/explorer.rs
@@ -139,7 +139,7 @@ impl ListFolderIterator<'_> {
                         self.req
                             .api_req
                             .query_params
-                            .insert("page_token".to_string(), data.next_page_token.unwrap());
+                            .insert("page_token", data.next_page_token.unwrap());
                         Some(data.files)
                     } else if data.files.is_empty() {
                         None
@@ -281,7 +281,7 @@ impl ListFolderRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("page_size".to_string(), page_size.to_string());
+            .insert("page_size", page_size.to_string());
         self
     }
 
@@ -293,7 +293,7 @@ impl ListFolderRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("page_token".to_string(), page_token.to_string());
+            .insert("page_token", page_token.to_string());
         self
     }
 
@@ -304,7 +304,7 @@ impl ListFolderRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("folder_token".to_string(), fold_token.to_string());
+            .insert("folder_token", fold_token.to_string());
         self
     }
 
@@ -322,7 +322,7 @@ impl ListFolderRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("order_by".to_string(), order_by.to_string());
+            .insert("order_by", order_by.to_string());
         self
     }
 
@@ -338,7 +338,7 @@ impl ListFolderRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("direction".to_string(), direction.to_string());
+            .insert("direction", direction.to_string());
         self
     }
 
@@ -360,7 +360,7 @@ impl ListFolderRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("user_id_type".to_string(), user_id_type.to_string());
+            .insert("user_id_type", user_id_type.to_string());
         self
     }
 
diff --git a/src/service/cloud_docs/mod.rs b/src/service/cloud_docs/mod.rs
index e9168aa..c8a4ce7 100644
--- a/src/service/cloud_docs/mod.rs
+++ b/src/service/cloud_docs/mod.rs
@@ -134,7 +134,6 @@
 //! - 📈 项目管理和跟踪
 
 use crate::core::config::Config;
-use std::sync::Arc;
 
 // 子模块声明
 pub mod assistant;
@@ -183,17 +182,17 @@ pub struct CloudDocsService {
 }
 
 impl CloudDocsService {
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            drive: DriveService::new(Arc::clone(&config)),
-            wiki: WikiService::new(Arc::clone(&config)),
-            docx: DocxService::new(Arc::clone(&config)),
-            sheets: SheetsService::new(Arc::clone(&config)),
-            bitable: BitableService::new(Arc::clone(&config)),
-            board: BoardService::new(Arc::clone(&config)),
-            permission: PermissionService::new(Arc::clone(&config)),
-            comments: CommentsService::new(Arc::clone(&config)),
-            assistant: AssistantService::new(Arc::clone(&config)),
+            drive: DriveService::new(config.clone()),
+            wiki: WikiService::new(config.clone()),
+            docx: DocxService::new(config.clone()),
+            sheets: SheetsService::new(config.clone()),
+            bitable: BitableService::new(config.clone()),
+            board: BoardService::new(config.clone()),
+            permission: PermissionService::new(config.clone()),
+            comments: CommentsService::new(config.clone()),
+            assistant: AssistantService::new(config.clone()),
         }
     }
 }
diff --git a/src/service/cloud_docs/permission/mod.rs b/src/service/cloud_docs/permission/mod.rs
index d33ebee..a600c64 100644
--- a/src/service/cloud_docs/permission/mod.rs
+++ b/src/service/cloud_docs/permission/mod.rs
@@ -8,19 +8,17 @@ pub mod member;
 pub mod public_v1;
 pub mod public_v2;
 
-use std::sync::Arc;
-
 use crate::core::{config::Config, req_option::RequestOption, SDKResult};
 
 use self::{member::*, public_v1::*, public_v2::*};
 
 /// 权限服务
 pub struct PermissionService {
-    config: Arc<Config>,
+    config: Config,
 }
 
 impl PermissionService {
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self { config }
     }
 
diff --git a/src/service/cloud_docs/sheets/mod.rs b/src/service/cloud_docs/sheets/mod.rs
index 695f419..b76fb2c 100644
--- a/src/service/cloud_docs/sheets/mod.rs
+++ b/src/service/cloud_docs/sheets/mod.rs
@@ -50,8 +50,6 @@
 //! // client.sheets.v3.data_operation.write_data_to_multiple_ranges(write_request, None).await?;
 //! ```
 
-use std::sync::Arc;
-
 /// Sheets API v2版本
 pub mod v2;
 /// Sheets API v3版本
@@ -73,10 +71,10 @@ impl SheetsService {
     ///
     /// # 参数
     /// - `config`: 客户端配置
-    pub fn new(config: Arc<crate::core::config::Config>) -> Self {
+    pub fn new(config: crate::core::config::Config) -> Self {
         Self {
-            v2: v2::V2::new((*config).clone()),
-            v3: v3::V3::new((*config).clone()),
+            v2: v2::V2::new(config.clone()),
+            v3: v3::V3::new(config.clone()),
         }
     }
 }
diff --git a/src/service/cloud_docs/sheets/v2/data_operation/reading_a_single_range.rs b/src/service/cloud_docs/sheets/v2/data_operation/reading_a_single_range.rs
index 28f4bef..d978b5e 100644
--- a/src/service/cloud_docs/sheets/v2/data_operation/reading_a_single_range.rs
+++ b/src/service/cloud_docs/sheets/v2/data_operation/reading_a_single_range.rs
@@ -79,10 +79,10 @@ impl ReadingSingleRangeRequestBuilder {
     /// - valueRenderOption=UnformattedValue：计算但不对单元格进行格式化
     pub fn value_render_option(mut self, value_render_option: impl ToString) -> Self {
         self.request.value_render_option = Some(value_render_option.to_string());
-        self.request.api_request.query_params.insert(
-            "valueRenderOption".to_string(),
-            value_render_option.to_string(),
-        );
+        self.request
+            .api_request
+            .query_params
+            .insert("valueRenderOption", value_render_option.to_string());
         self
     }
 
@@ -96,10 +96,10 @@ impl ReadingSingleRangeRequestBuilder {
     ///   但不会对数字进行格式化。将返回格式化后的字符串。详见电子表格常见问题
     pub fn date_time_render_option(mut self, date_time_render_option: impl ToString) -> Self {
         self.request.date_time_render_option = Some(date_time_render_option.to_string());
-        self.request.api_request.query_params.insert(
-            "dateTimeRenderOption".to_string(),
-            date_time_render_option.to_string(),
-        );
+        self.request
+            .api_request
+            .query_params
+            .insert("dateTimeRenderOption", date_time_render_option.to_string());
         self
     }
 
@@ -114,7 +114,7 @@ impl ReadingSingleRangeRequestBuilder {
         self.request
             .api_request
             .query_params
-            .insert("user_id_type".to_string(), user_id_type.to_string());
+            .insert("user_id_type", user_id_type.to_string());
         self
     }
 
diff --git a/src/service/cloud_docs/sheets/v2/data_operation/reading_multiple_range.rs b/src/service/cloud_docs/sheets/v2/data_operation/reading_multiple_range.rs
index f4d8227..6bb3532 100644
--- a/src/service/cloud_docs/sheets/v2/data_operation/reading_multiple_range.rs
+++ b/src/service/cloud_docs/sheets/v2/data_operation/reading_multiple_range.rs
@@ -71,7 +71,7 @@ impl ReadingMultiRangesRequestBuilder {
         self.request
             .api_request
             .query_params
-            .insert("ranges".to_string(), ranges.to_string());
+            .insert("ranges", ranges.to_string());
         self
     }
 
@@ -84,10 +84,10 @@ impl ReadingMultiRangesRequestBuilder {
     /// - valueRenderOption=UnformattedValue：计算但不对单元格进行格式化
     pub fn value_render_option(mut self, value_render_option: impl ToString) -> Self {
         self.request.value_render_option = Some(value_render_option.to_string());
-        self.request.api_request.query_params.insert(
-            "valueRenderOption".to_string(),
-            value_render_option.to_string(),
-        );
+        self.request
+            .api_request
+            .query_params
+            .insert("valueRenderOption", value_render_option.to_string());
         self
     }
 
@@ -101,10 +101,10 @@ impl ReadingMultiRangesRequestBuilder {
     ///   但不会对数字进行格式化。将返回格式化后的字符串。详见电子表格常见问题
     pub fn date_time_render_option(mut self, date_time_render_option: impl ToString) -> Self {
         self.request.date_time_render_option = Some(date_time_render_option.to_string());
-        self.request.api_request.query_params.insert(
-            "dateTimeRenderOption".to_string(),
-            date_time_render_option.to_string(),
-        );
+        self.request
+            .api_request
+            .query_params
+            .insert("dateTimeRenderOption", date_time_render_option.to_string());
         self
     }
 
@@ -119,7 +119,7 @@ impl ReadingMultiRangesRequestBuilder {
         self.request
             .api_request
             .query_params
-            .insert("user_id_type".to_string(), user_id_type.to_string());
+            .insert("user_id_type", user_id_type.to_string());
         self
     }
 
diff --git a/src/service/cloud_docs/sheets/v2/mod.rs b/src/service/cloud_docs/sheets/v2/mod.rs
index 092b803..57402eb 100644
--- a/src/service/cloud_docs/sheets/v2/mod.rs
+++ b/src/service/cloud_docs/sheets/v2/mod.rs
@@ -1,5 +1,3 @@
-use std::sync::Arc;
-
 use crate::core::config::Config;
 
 /// 数据操作功能
@@ -66,9 +64,9 @@ impl V2 {
     ///
     /// # 返回值
     /// 配置完成的V2服务实例，包含基础的服务模块
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            spreadsheet: SpreadsheetService::new(Arc::clone(&config)),
+            spreadsheet: SpreadsheetService::new(config.clone()),
             spreadsheet_sheet: SpreadsheetSheetService::new(config),
         }
     }
diff --git a/src/service/cloud_docs/sheets/v3/condition_format/get.rs b/src/service/cloud_docs/sheets/v3/condition_format/get.rs
index d63de35..7b19daf 100644
--- a/src/service/cloud_docs/sheets/v3/condition_format/get.rs
+++ b/src/service/cloud_docs/sheets/v3/condition_format/get.rs
@@ -32,9 +32,7 @@ impl SpreadsheetSheetService {
 
         // 添加查询参数
         if let Some(range) = &request.range {
-            api_req
-                .query_params
-                .insert("range".to_string(), range.clone());
+            api_req.query_params.insert("range", range.clone());
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
diff --git a/src/service/cloud_docs/sheets/v3/data_operation/append_data.rs b/src/service/cloud_docs/sheets/v3/data_operation/append_data.rs
index 697991e..a74e006 100644
--- a/src/service/cloud_docs/sheets/v3/data_operation/append_data.rs
+++ b/src/service/cloud_docs/sheets/v3/data_operation/append_data.rs
@@ -32,7 +32,8 @@ impl DataOperationService {
         );
         api_req.supported_access_token_types = vec![AccessTokenType::Tenant, AccessTokenType::User];
 
-        let api_resp: BaseResponse<AppendDataResponseData> = Transport::request(api_req, &self.config, option).await?;
+        let api_resp: BaseResponse<AppendDataResponseData> =
+            Transport::request(api_req, &self.config, option).await?;
 
         api_resp.into_result()
     }
diff --git a/src/service/cloud_docs/sheets/v3/data_operation/batch_set_cell_style.rs b/src/service/cloud_docs/sheets/v3/data_operation/batch_set_cell_style.rs
index 363da1e..7e43ab7 100644
--- a/src/service/cloud_docs/sheets/v3/data_operation/batch_set_cell_style.rs
+++ b/src/service/cloud_docs/sheets/v3/data_operation/batch_set_cell_style.rs
@@ -32,7 +32,8 @@ impl DataOperationService {
         );
         api_req.supported_access_token_types = vec![AccessTokenType::Tenant, AccessTokenType::User];
 
-        let api_resp: BaseResponse<BatchSetCellStyleResponseData> = Transport::request(api_req, &self.config, option).await?;
+        let api_resp: BaseResponse<BatchSetCellStyleResponseData> =
+            Transport::request(api_req, &self.config, option).await?;
         api_resp.into_result()
     }
 }
diff --git a/src/service/cloud_docs/sheets/v3/data_operation/find_cells.rs b/src/service/cloud_docs/sheets/v3/data_operation/find_cells.rs
index e05d046..e0f0410 100644
--- a/src/service/cloud_docs/sheets/v3/data_operation/find_cells.rs
+++ b/src/service/cloud_docs/sheets/v3/data_operation/find_cells.rs
@@ -246,7 +246,8 @@ impl SpreadsheetSheetService {
         api_req.http_method = reqwest::Method::POST;
         api_req.supported_access_token_types = vec![AccessTokenType::Tenant, AccessTokenType::App];
 
-        let api_resp: BaseResponse<FindCellsResponse> = crate::core::http::Transport::request(api_req, &self.config, option).await?;
+        let api_resp: BaseResponse<FindCellsResponse> =
+            crate::core::http::Transport::request(api_req, &self.config, option).await?;
 
         api_resp.into_result()
     }
diff --git a/src/service/cloud_docs/sheets/v3/data_operation/merge_cells.rs b/src/service/cloud_docs/sheets/v3/data_operation/merge_cells.rs
index 84d48c2..4d0a708 100644
--- a/src/service/cloud_docs/sheets/v3/data_operation/merge_cells.rs
+++ b/src/service/cloud_docs/sheets/v3/data_operation/merge_cells.rs
@@ -31,7 +31,8 @@ impl DataOperationService {
         );
         api_req.supported_access_token_types = vec![AccessTokenType::Tenant, AccessTokenType::User];
 
-        let api_resp: BaseResponse<MergeCellsResponseData> = Transport::request(api_req, &self.config, option).await?;
+        let api_resp: BaseResponse<MergeCellsResponseData> =
+            Transport::request(api_req, &self.config, option).await?;
 
         api_resp.into_result()
     }
diff --git a/src/service/cloud_docs/sheets/v3/data_operation/prepend_data.rs b/src/service/cloud_docs/sheets/v3/data_operation/prepend_data.rs
index 68aed7a..106bcb9 100644
--- a/src/service/cloud_docs/sheets/v3/data_operation/prepend_data.rs
+++ b/src/service/cloud_docs/sheets/v3/data_operation/prepend_data.rs
@@ -32,7 +32,8 @@ impl DataOperationService {
         );
         api_req.supported_access_token_types = vec![AccessTokenType::Tenant, AccessTokenType::User];
 
-        let api_resp: BaseResponse<PrependDataResponseData> = Transport::request(api_req, &self.config, option).await?;
+        let api_resp: BaseResponse<PrependDataResponseData> =
+            Transport::request(api_req, &self.config, option).await?;
         api_resp.into_result()
     }
 }
diff --git a/src/service/cloud_docs/sheets/v3/data_operation/reading_multiple_ranges.rs b/src/service/cloud_docs/sheets/v3/data_operation/reading_multiple_ranges.rs
index 2d71c14..583d012 100644
--- a/src/service/cloud_docs/sheets/v3/data_operation/reading_multiple_ranges.rs
+++ b/src/service/cloud_docs/sheets/v3/data_operation/reading_multiple_ranges.rs
@@ -33,7 +33,8 @@ impl DataOperationService {
         );
         api_req.supported_access_token_types = vec![AccessTokenType::Tenant, AccessTokenType::User];
 
-        let api_resp: BaseResponse<ReadingMultipleRangesResponseData> = Transport::request(api_req, &self.config, option).await?;
+        let api_resp: BaseResponse<ReadingMultipleRangesResponseData> =
+            Transport::request(api_req, &self.config, option).await?;
 
         api_resp.into_result()
     }
@@ -141,7 +142,7 @@ impl ReadingMultipleRangesRequestBuilder {
         self.request
             .api_request
             .query_params
-            .insert("valueRenderOption".to_string(), value);
+            .insert("valueRenderOption", value);
         self
     }
 
@@ -151,7 +152,7 @@ impl ReadingMultipleRangesRequestBuilder {
         self.request
             .api_request
             .query_params
-            .insert("dateTimeRenderOption".to_string(), value);
+            .insert("dateTimeRenderOption", value);
         self
     }
 
@@ -161,7 +162,7 @@ impl ReadingMultipleRangesRequestBuilder {
         self.request
             .api_request
             .query_params
-            .insert("user_id_type".to_string(), value);
+            .insert("user_id_type", value);
         self
     }
 
diff --git a/src/service/cloud_docs/sheets/v3/data_operation/reading_single_range.rs b/src/service/cloud_docs/sheets/v3/data_operation/reading_single_range.rs
index 552681e..0e4b26f 100644
--- a/src/service/cloud_docs/sheets/v3/data_operation/reading_single_range.rs
+++ b/src/service/cloud_docs/sheets/v3/data_operation/reading_single_range.rs
@@ -33,7 +33,8 @@ impl DataOperationService {
         );
         api_req.supported_access_token_types = vec![AccessTokenType::Tenant, AccessTokenType::User];
 
-        let api_resp: BaseResponse<ReadingSingleRangeResponseData> = Transport::request(api_req, &self.config, option).await?;
+        let api_resp: BaseResponse<ReadingSingleRangeResponseData> =
+            Transport::request(api_req, &self.config, option).await?;
 
         api_resp.into_result()
     }
@@ -130,7 +131,7 @@ impl ReadingSingleRangeRequestBuilder {
         self.request
             .api_request
             .query_params
-            .insert("valueRenderOption".to_string(), value);
+            .insert("valueRenderOption", value);
         self
     }
 
@@ -140,7 +141,7 @@ impl ReadingSingleRangeRequestBuilder {
         self.request
             .api_request
             .query_params
-            .insert("dateTimeRenderOption".to_string(), value);
+            .insert("dateTimeRenderOption", value);
         self
     }
 
@@ -150,7 +151,7 @@ impl ReadingSingleRangeRequestBuilder {
         self.request
             .api_request
             .query_params
-            .insert("user_id_type".to_string(), value);
+            .insert("user_id_type", value);
         self
     }
 
diff --git a/src/service/cloud_docs/sheets/v3/data_operation/replace_cells.rs b/src/service/cloud_docs/sheets/v3/data_operation/replace_cells.rs
index 524fdad..27cd37f 100644
--- a/src/service/cloud_docs/sheets/v3/data_operation/replace_cells.rs
+++ b/src/service/cloud_docs/sheets/v3/data_operation/replace_cells.rs
@@ -5,8 +5,9 @@ use crate::{
         api_req::ApiRequest,
         api_resp::{ApiResponseTrait, BaseResponse, ResponseFormat},
         constants::AccessTokenType,
-        req_option, SDKResult,
+        req_option,
         standard_response::StandardResponse,
+        SDKResult,
     },
     impl_executable_builder_owned,
     service::sheets::v3::{
@@ -142,7 +143,8 @@ impl SpreadsheetSheetService {
         api_req.http_method = reqwest::Method::POST;
         api_req.supported_access_token_types = vec![AccessTokenType::Tenant, AccessTokenType::App];
 
-        let api_resp: BaseResponse<ReplaceCellsResponse> = crate::core::http::Transport::request(api_req, &self.config, option).await?;
+        let api_resp: BaseResponse<ReplaceCellsResponse> =
+            crate::core::http::Transport::request(api_req, &self.config, option).await?;
         api_resp.into_result()
     }
 }
diff --git a/src/service/cloud_docs/sheets/v3/data_operation/set_cell_style.rs b/src/service/cloud_docs/sheets/v3/data_operation/set_cell_style.rs
index 36fc9d4..6e8bf02 100644
--- a/src/service/cloud_docs/sheets/v3/data_operation/set_cell_style.rs
+++ b/src/service/cloud_docs/sheets/v3/data_operation/set_cell_style.rs
@@ -30,7 +30,8 @@ impl DataOperationService {
         );
         api_req.supported_access_token_types = vec![AccessTokenType::Tenant, AccessTokenType::User];
 
-        let api_resp: BaseResponse<SetCellStyleResponseData> = Transport::request(api_req, &self.config, option).await?;
+        let api_resp: BaseResponse<SetCellStyleResponseData> =
+            Transport::request(api_req, &self.config, option).await?;
         api_resp.into_result()
     }
 }
diff --git a/src/service/cloud_docs/sheets/v3/data_operation/split_cells.rs b/src/service/cloud_docs/sheets/v3/data_operation/split_cells.rs
index 54366ae..b2eb854 100644
--- a/src/service/cloud_docs/sheets/v3/data_operation/split_cells.rs
+++ b/src/service/cloud_docs/sheets/v3/data_operation/split_cells.rs
@@ -30,7 +30,8 @@ impl DataOperationService {
         );
         api_req.supported_access_token_types = vec![AccessTokenType::Tenant, AccessTokenType::User];
 
-        let api_resp: BaseResponse<SplitCellsResponseData> = Transport::request(api_req, &self.config, option).await?;
+        let api_resp: BaseResponse<SplitCellsResponseData> =
+            Transport::request(api_req, &self.config, option).await?;
         api_resp.into_result()
     }
 }
diff --git a/src/service/cloud_docs/sheets/v3/data_operation/write_data_to_multiple_ranges.rs b/src/service/cloud_docs/sheets/v3/data_operation/write_data_to_multiple_ranges.rs
index af6cf92..15b5ab6 100644
--- a/src/service/cloud_docs/sheets/v3/data_operation/write_data_to_multiple_ranges.rs
+++ b/src/service/cloud_docs/sheets/v3/data_operation/write_data_to_multiple_ranges.rs
@@ -31,7 +31,8 @@ impl DataOperationService {
         );
         api_req.supported_access_token_types = vec![AccessTokenType::Tenant, AccessTokenType::User];
 
-        let api_resp: BaseResponse<WriteDataToMultipleRangesResponseData> = Transport::request(api_req, &self.config, option).await?;
+        let api_resp: BaseResponse<WriteDataToMultipleRangesResponseData> =
+            Transport::request(api_req, &self.config, option).await?;
 
         api_resp.into_result()
     }
diff --git a/src/service/cloud_docs/sheets/v3/data_operation/write_images.rs b/src/service/cloud_docs/sheets/v3/data_operation/write_images.rs
index 546b70b..06a8d71 100644
--- a/src/service/cloud_docs/sheets/v3/data_operation/write_images.rs
+++ b/src/service/cloud_docs/sheets/v3/data_operation/write_images.rs
@@ -30,7 +30,8 @@ impl DataOperationService {
         );
         api_req.supported_access_token_types = vec![AccessTokenType::Tenant, AccessTokenType::User];
 
-        let api_resp: BaseResponse<WriteImagesResponseData> = Transport::request(api_req, &self.config, option).await?;
+        let api_resp: BaseResponse<WriteImagesResponseData> =
+            Transport::request(api_req, &self.config, option).await?;
         api_resp.into_result()
     }
 }
diff --git a/src/service/cloud_docs/sheets/v3/data_validation/query.rs b/src/service/cloud_docs/sheets/v3/data_validation/query.rs
index b05267d..2631503 100644
--- a/src/service/cloud_docs/sheets/v3/data_validation/query.rs
+++ b/src/service/cloud_docs/sheets/v3/data_validation/query.rs
@@ -32,9 +32,7 @@ impl SpreadsheetSheetService {
 
         // 添加查询参数
         if let Some(range) = &request.range {
-            api_req
-                .query_params
-                .insert("range".to_string(), range.clone());
+            api_req.query_params.insert("range", range.clone());
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
diff --git a/src/service/cloud_docs/sheets/v3/mod.rs b/src/service/cloud_docs/sheets/v3/mod.rs
index d832c89..e000ddf 100644
--- a/src/service/cloud_docs/sheets/v3/mod.rs
+++ b/src/service/cloud_docs/sheets/v3/mod.rs
@@ -1,5 +1,3 @@
-use std::sync::Arc;
-
 use crate::core::config::Config;
 
 /// 条件格式化功能
@@ -80,14 +78,14 @@ impl V3 {
     ///
     /// # 返回值
     /// 配置完成的V3服务实例，包含所有子服务模块
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            spreadsheet: SpreadsheetService::new(Arc::clone(&config)),
-            spreadsheet_sheet: SpreadsheetSheetService::new(Arc::clone(&config)),
-            spreadsheet_sheet_filter: SpreadsheetSheetFilterService::new(Arc::clone(&config)),
-            spreadsheet_sheet_filter_view: SpreadsheetSheetFilterViewService::new(Arc::clone(&config)),
-            data_operation: DataOperationService::new(Arc::clone(&config)),
-            sheet_row_col: SheetRowColService::new(config),
+            spreadsheet: SpreadsheetService::new(config.clone()),
+            spreadsheet_sheet: SpreadsheetSheetService::new(config.clone()),
+            spreadsheet_sheet_filter: SpreadsheetSheetFilterService::new(config.clone()),
+            spreadsheet_sheet_filter_view: SpreadsheetSheetFilterViewService::new(config.clone()),
+            data_operation: DataOperationService::new(config.clone()),
+            sheet_row_col: SheetRowColService::new(config.clone()),
         }
     }
 }
@@ -122,7 +120,9 @@ impl SpreadsheetService {
     /// # 参数
     /// - `config`: 客户端配置
     pub fn new(config: Config) -> Self {
-        Self { config }
+        Self {
+            config: config.clone(),
+        }
     }
 }
 
@@ -157,7 +157,9 @@ impl SpreadsheetSheetService {
     /// # 参数
     /// - `config`: 客户端配置
     pub fn new(config: Config) -> Self {
-        Self { config }
+        Self {
+            config: config.clone(),
+        }
     }
 }
 
@@ -198,7 +200,9 @@ impl SpreadsheetSheetFilterService {
     /// # 参数
     /// - `config`: 客户端配置
     pub fn new(config: Config) -> Self {
-        Self { config }
+        Self {
+            config: config.clone(),
+        }
     }
 }
 
@@ -241,7 +245,9 @@ impl SpreadsheetSheetFilterViewService {
     /// # 参数
     /// - `config`: 客户端配置
     pub fn new(config: Config) -> Self {
-        Self { config }
+        Self {
+            config: config.clone(),
+        }
     }
 }
 
@@ -295,7 +301,9 @@ impl DataOperationService {
     /// # 参数
     /// - `config`: 客户端配置
     pub fn new(config: Config) -> Self {
-        Self { config }
+        Self {
+            config: config.clone(),
+        }
     }
 }
 
@@ -344,6 +352,8 @@ impl SheetRowColService {
     /// # 参数
     /// - `config`: 客户端配置
     pub fn new(config: Config) -> Self {
-        Self { config }
+        Self {
+            config: config.clone(),
+        }
     }
 }
diff --git a/src/service/cloud_docs/sheets/v3/protect_range/get.rs b/src/service/cloud_docs/sheets/v3/protect_range/get.rs
index 6c1c769..10284fc 100644
--- a/src/service/cloud_docs/sheets/v3/protect_range/get.rs
+++ b/src/service/cloud_docs/sheets/v3/protect_range/get.rs
@@ -32,9 +32,7 @@ impl SpreadsheetService {
 
         // 添加查询参数
         if let Some(sheet_id) = &request.sheet_id {
-            api_req
-                .query_params
-                .insert("sheet_id".to_string(), sheet_id.clone());
+            api_req.query_params.insert("sheet_id", sheet_id.clone());
         }
 
         let api_resp = Transport::request(api_req, &self.config, option).await?;
diff --git a/src/service/cloud_docs/wiki/mod.rs b/src/service/cloud_docs/wiki/mod.rs
index b70eceb..4f78d5b 100644
--- a/src/service/cloud_docs/wiki/mod.rs
+++ b/src/service/cloud_docs/wiki/mod.rs
@@ -1,5 +1,3 @@
-use std::sync::Arc;
-
 use crate::core::config::Config;
 
 pub use v2::V2;
@@ -12,9 +10,9 @@ pub struct WikiService {
 }
 
 impl WikiService {
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            v2: V2::new((*config).clone()),
+            v2: V2::new(config.clone()),
         }
     }
 }
diff --git a/src/service/cloud_docs/wiki/v2/mod.rs b/src/service/cloud_docs/wiki/v2/mod.rs
index df37718..19a50a9 100644
--- a/src/service/cloud_docs/wiki/v2/mod.rs
+++ b/src/service/cloud_docs/wiki/v2/mod.rs
@@ -36,7 +36,7 @@ impl V2 {
             space_node: SpaceNodeService::new(config.clone()),
             space_setting: SpaceSettingService::new(config.clone()),
             task: TaskService::new(config.clone()),
-            config,
+            config: config.clone(),
         }
     }
 
diff --git a/src/service/cloud_docs/wiki/v2/space/list.rs b/src/service/cloud_docs/wiki/v2/space/list.rs
index a0fd737..0b37b3c 100644
--- a/src/service/cloud_docs/wiki/v2/space/list.rs
+++ b/src/service/cloud_docs/wiki/v2/space/list.rs
@@ -57,13 +57,13 @@ impl ListSpaceRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = &self.request.page_token {
             self.request
                 .api_request
                 .query_params
-                .insert("page_token".to_string(), page_token.clone());
+                .insert("page_token", page_token.clone());
         }
         self.request
     }
diff --git a/src/service/cloud_docs/wiki/v2/space_member/delete.rs b/src/service/cloud_docs/wiki/v2/space_member/delete.rs
index 7b0bb93..68837d2 100644
--- a/src/service/cloud_docs/wiki/v2/space_member/delete.rs
+++ b/src/service/cloud_docs/wiki/v2/space_member/delete.rs
@@ -70,7 +70,7 @@ impl DeleteSpaceMemberRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("member_type".to_string(), member_type.clone());
+                .insert("member_type", member_type.clone());
         }
         self.request
     }
diff --git a/src/service/cloud_docs/wiki/v2/space_member/list.rs b/src/service/cloud_docs/wiki/v2/space_member/list.rs
index f4e9ff1..f868841 100644
--- a/src/service/cloud_docs/wiki/v2/space_member/list.rs
+++ b/src/service/cloud_docs/wiki/v2/space_member/list.rs
@@ -69,13 +69,13 @@ impl ListSpaceMemberRequestBuilder {
             self.request
                 .api_request
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = &self.request.page_token {
             self.request
                 .api_request
                 .query_params
-                .insert("page_token".to_string(), page_token.clone());
+                .insert("page_token", page_token.clone());
         }
         self.request
     }
diff --git a/src/service/contact/v3/functional_role.rs b/src/service/contact/v3/functional_role.rs
index 12cda77..602d2aa 100644
--- a/src/service/contact/v3/functional_role.rs
+++ b/src/service/contact/v3/functional_role.rs
@@ -83,12 +83,12 @@ impl FunctionalRoleService {
         if let Some(page_size) = req.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = &req.page_token {
             api_req
                 .query_params
-                .insert("page_token".to_string(), page_token.clone());
+                .insert("page_token", page_token.clone());
         }
 
         let resp =
diff --git a/src/service/contact/v3/group.rs b/src/service/contact/v3/group.rs
index 9bb9c46..d7efe43 100644
--- a/src/service/contact/v3/group.rs
+++ b/src/service/contact/v3/group.rs
@@ -130,13 +130,13 @@ impl GroupService {
         let mut query_params = std::collections::HashMap::new();
 
         if let Some(user_id_type) = &req.user_id_type {
-            query_params.insert("user_id_type".to_string(), user_id_type.clone());
+            query_params.insert("user_id_type", user_id_type.clone());
         }
         if let Some(department_id_type) = &req.department_id_type {
-            query_params.insert("department_id_type".to_string(), department_id_type.clone());
+            query_params.insert("department_id_type", department_id_type.clone());
         }
         if let Some(include_members) = req.include_members {
-            query_params.insert("include_members".to_string(), include_members.to_string());
+            query_params.insert("include_members", include_members.to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/contact/v3/mod.rs b/src/service/contact/v3/mod.rs
index 71deb12..596dedb 100644
--- a/src/service/contact/v3/mod.rs
+++ b/src/service/contact/v3/mod.rs
@@ -1,6 +1,4 @@
 /// Contact v3 API 实现
-use std::sync::Arc;
-
 use crate::core::config::Config;
 
 pub mod custom_attr;
@@ -66,21 +64,21 @@ pub struct V3 {
 }
 
 impl V3 {
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            scope: ScopeService::new(Arc::clone(&config)),
-            user: UserService::new(Arc::clone(&config)),
-            group: GroupService::new(Arc::clone(&config)),
-            custom_attr: CustomAttrService::new(Arc::clone(&config)),
-            employee_type_enum: EmployeeTypeEnumService::new(Arc::clone(&config)),
-            department: DepartmentService::new(Arc::clone(&config)),
-            unit: UnitService::new(Arc::clone(&config)),
-            group_member: GroupMemberService::new(Arc::clone(&config)),
-            functional_role: FunctionalRoleService::new(Arc::clone(&config)),
-            functional_role_member: FunctionalRoleMemberService::new(Arc::clone(&config)),
-            job_level: JobLevelService::new(Arc::clone(&config)),
-            job_family: JobFamilyService::new(Arc::clone(&config)),
-            job_title: JobTitleService::new(Arc::clone(&config)),
+            scope: ScopeService::new(config.clone()),
+            user: UserService::new(config.clone()),
+            group: GroupService::new(config.clone()),
+            custom_attr: CustomAttrService::new(config.clone()),
+            employee_type_enum: EmployeeTypeEnumService::new(config.clone()),
+            department: DepartmentService::new(config.clone()),
+            unit: UnitService::new(config.clone()),
+            group_member: GroupMemberService::new(config.clone()),
+            functional_role: FunctionalRoleService::new(config.clone()),
+            functional_role_member: FunctionalRoleMemberService::new(config.clone()),
+            job_level: JobLevelService::new(config.clone()),
+            job_family: JobFamilyService::new(config.clone()),
+            job_title: JobTitleService::new(config.clone()),
             work_city: WorkCityService::new(config),
         }
     }
diff --git a/src/service/contact/v3/user.rs b/src/service/contact/v3/user.rs
index 88faf92..c848ebc 100644
--- a/src/service/contact/v3/user.rs
+++ b/src/service/contact/v3/user.rs
@@ -1,9 +1,9 @@
 use crate::{
     core::{
         api_req::ApiRequest, api_resp::ApiResponseTrait, config::Config,
-        constants::AccessTokenType, http::Transport, req_option::RequestOption,
-        standard_response::StandardResponse, trait_system::executable_builder::ExecutableBuilder,
-        SDKResult,
+        constants::AccessTokenType, endpoints::Endpoints, http::Transport,
+        req_option::RequestOption, standard_response::StandardResponse,
+        trait_system::executable_builder::ExecutableBuilder, SDKResult,
     },
     service::contact::models::*,
 };
@@ -34,7 +34,7 @@ impl UserService {
     ) -> crate::core::SDKResult<CreateUserResponse> {
         let api_req = ApiRequest {
             http_method: reqwest::Method::POST,
-            api_path: "/open-apis/contact/v3/users".to_string(),
+            api_path: Endpoints::CONTACT_V3_USERS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: serde_json::to_vec(req)?,
             ..Default::default()
@@ -88,10 +88,10 @@ impl UserService {
     ) -> crate::core::SDKResult<GetUserResponse> {
         let mut query_params = std::collections::HashMap::new();
         if let Some(user_id_type) = &_req.user_id_type {
-            query_params.insert("user_id_type".to_string(), user_id_type.clone());
+            query_params.insert("user_id_type", user_id_type.clone());
         }
         if let Some(department_id_type) = &_req.department_id_type {
-            query_params.insert("department_id_type".to_string(), department_id_type.clone());
+            query_params.insert("department_id_type", department_id_type.clone());
         }
 
         let api_req = ApiRequest {
@@ -114,7 +114,7 @@ impl UserService {
     ) -> crate::core::SDKResult<BatchGetUsersResponse> {
         let api_req = ApiRequest {
             http_method: reqwest::Method::POST,
-            api_path: "/open-apis/contact/v3/users/batch".to_string(),
+            api_path: Endpoints::CONTACT_V3_USERS_BATCH.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: serde_json::to_vec(req)?,
             ..Default::default()
@@ -131,7 +131,7 @@ impl UserService {
     ) -> crate::core::SDKResult<FindUsersByDepartmentResponse> {
         let api_req = ApiRequest {
             http_method: reqwest::Method::GET,
-            api_path: "/open-apis/contact/v3/users/find_by_department".to_string(),
+            api_path: Endpoints::CONTACT_V3_USERS_FIND_BY_DEPARTMENT.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: Vec::new(),
             query_params: std::collections::HashMap::new(),
@@ -150,7 +150,7 @@ impl UserService {
     ) -> crate::core::SDKResult<BatchGetUserIdResponse> {
         let api_req = ApiRequest {
             http_method: reqwest::Method::POST,
-            api_path: "/open-apis/contact/v3/users/batch_get_id".to_string(),
+            api_path: Endpoints::CONTACT_V3_USERS_BATCH_GET_ID.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: serde_json::to_vec(req)?,
             ..Default::default()
@@ -168,7 +168,7 @@ impl UserService {
     ) -> crate::core::SDKResult<SearchUsersResponse> {
         let api_req = ApiRequest {
             http_method: reqwest::Method::POST,
-            api_path: "/open-apis/contact/v3/users/search".to_string(),
+            api_path: Endpoints::CONTACT_V3_USERS_SEARCH.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(req)?,
             ..Default::default()
@@ -220,21 +220,21 @@ impl UserService {
         let mut query_params = std::collections::HashMap::new();
 
         if let Some(page_size) = req.page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = &req.page_token {
-            query_params.insert("page_token".to_string(), page_token.clone());
+            query_params.insert("page_token", page_token.clone());
         }
         if let Some(user_id_type) = &req.user_id_type {
-            query_params.insert("user_id_type".to_string(), user_id_type.clone());
+            query_params.insert("user_id_type", user_id_type.clone());
         }
         if let Some(department_id_type) = &req.department_id_type {
-            query_params.insert("department_id_type".to_string(), department_id_type.clone());
+            query_params.insert("department_id_type", department_id_type.clone());
         }
 
         let api_req = ApiRequest {
             http_method: reqwest::Method::GET,
-            api_path: "/open-apis/contact/v3/users".to_string(),
+            api_path: Endpoints::CONTACT_V3_USERS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: Vec::new(),
             query_params,
diff --git a/src/service/corehr/job_management/mod.rs b/src/service/corehr/job_management/mod.rs
index 598d79c..6fb61c6 100644
--- a/src/service/corehr/job_management/mod.rs
+++ b/src/service/corehr/job_management/mod.rs
@@ -7,6 +7,7 @@ use crate::{
         api_resp::{ApiResponseTrait, BaseResponse, ResponseFormat},
         config::Config,
         constants::AccessTokenType,
+        endpoints::Endpoints,
         http::Transport,
         req_option::RequestOption,
         SDKResult,
@@ -180,7 +181,7 @@ impl JobManagementService {
     ) -> SDKResult<BaseResponse<JobFamilyCreateResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/corehr/v1/job_families".to_string(),
+            api_path: Endpoints::COREHR_JOB_FAMILIES.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: serde_json::to_vec(&request).unwrap_or_default(),
             ..Default::default()
@@ -223,7 +224,7 @@ impl JobManagementService {
     ) -> SDKResult<BaseResponse<JobFamilyListResponse>> {
         let mut api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/corehr/v1/job_families".to_string(),
+            api_path: Endpoints::COREHR_JOB_FAMILIES.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: vec![],
             ..Default::default()
@@ -231,13 +232,11 @@ impl JobManagementService {
 
         // 添加查询参数
         if let Some(size) = page_size {
-            api_req
-                .query_params
-                .insert("page_size".to_string(), size.to_string());
+            api_req.query_params.insert("page_size", size.to_string());
         }
 
         if let Some(token) = page_token {
-            api_req.query_params.insert("page_token".to_string(), token);
+            api_req.query_params.insert("page_token", token);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -289,7 +288,7 @@ impl JobManagementService {
     ) -> SDKResult<BaseResponse<JobLevelCreateResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/corehr/v1/job_levels".to_string(),
+            api_path: Endpoints::COREHR_JOB_LEVELS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: serde_json::to_vec(&request).unwrap_or_default(),
             ..Default::default()
@@ -332,7 +331,7 @@ impl JobManagementService {
     ) -> SDKResult<BaseResponse<JobLevelListResponse>> {
         let mut api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/corehr/v1/job_levels".to_string(),
+            api_path: Endpoints::COREHR_JOB_LEVELS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: vec![],
             ..Default::default()
@@ -340,13 +339,11 @@ impl JobManagementService {
 
         // 添加查询参数
         if let Some(size) = page_size {
-            api_req
-                .query_params
-                .insert("page_size".to_string(), size.to_string());
+            api_req.query_params.insert("page_size", size.to_string());
         }
 
         if let Some(token) = page_token {
-            api_req.query_params.insert("page_token".to_string(), token);
+            api_req.query_params.insert("page_token", token);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -398,7 +395,7 @@ impl JobManagementService {
     ) -> SDKResult<BaseResponse<JobGradeCreateResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/corehr/v1/job_grades".to_string(),
+            api_path: Endpoints::COREHR_JOB_GRADES.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: serde_json::to_vec(&request).unwrap_or_default(),
             ..Default::default()
@@ -441,7 +438,7 @@ impl JobManagementService {
     ) -> SDKResult<BaseResponse<JobGradeQueryResponse>> {
         let mut api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/corehr/v1/job_grades/query".to_string(),
+            api_path: Endpoints::COREHR_JOB_GRADES_QUERY.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: vec![],
             ..Default::default()
@@ -451,7 +448,7 @@ impl JobManagementService {
         if let Some(family_id) = job_family_id {
             api_req
                 .query_params
-                .insert("job_family_id".to_string(), family_id);
+                .insert("job_family_id", family_id);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -503,7 +500,7 @@ impl JobManagementService {
     ) -> SDKResult<BaseResponse<JobCreateResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/corehr/v1/jobs".to_string(),
+            api_path: Endpoints::COREHR_JOBS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: serde_json::to_vec(&request).unwrap_or_default(),
             ..Default::default()
@@ -546,7 +543,7 @@ impl JobManagementService {
     ) -> SDKResult<BaseResponse<JobListResponse>> {
         let mut api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/corehr/v1/jobs".to_string(),
+            api_path: Endpoints::COREHR_JOBS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: vec![],
             ..Default::default()
@@ -554,13 +551,11 @@ impl JobManagementService {
 
         // 添加查询参数
         if let Some(size) = page_size {
-            api_req
-                .query_params
-                .insert("page_size".to_string(), size.to_string());
+            api_req.query_params.insert("page_size", size.to_string());
         }
 
         if let Some(token) = page_token {
-            api_req.query_params.insert("page_token".to_string(), token);
+            api_req.query_params.insert("page_token", token);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/corehr/lifecycle/mod.rs b/src/service/corehr/lifecycle/mod.rs
index b598da4..03c463c 100644
--- a/src/service/corehr/lifecycle/mod.rs
+++ b/src/service/corehr/lifecycle/mod.rs
@@ -7,6 +7,7 @@ use crate::{
         api_resp::{ApiResponseTrait, BaseResponse, ResponseFormat},
         config::Config,
         constants::AccessTokenType,
+        endpoints::Endpoints,
         http::Transport,
         req_option::RequestOption,
         SDKResult,
@@ -166,7 +167,7 @@ impl LifecycleService {
     ) -> SDKResult<BaseResponse<PreHireCreateResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/corehr/v1/pre_hires".to_string(),
+            api_path: Endpoints::COREHR_PRE_HIRES.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: serde_json::to_vec(&request).unwrap_or_default(),
             ..Default::default()
@@ -218,7 +219,7 @@ impl LifecycleService {
     ) -> SDKResult<BaseResponse<PreHireSearchResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/corehr/v1/pre_hires/search".to_string(),
+            api_path: Endpoints::COREHR_PRE_HIRES_SEARCH.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: serde_json::to_vec(&request).unwrap_or_default(),
             ..Default::default()
@@ -275,7 +276,7 @@ impl LifecycleService {
     ) -> SDKResult<BaseResponse<JobChangeCreateResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/corehr/v1/job_changes".to_string(),
+            api_path: Endpoints::COREHR_JOB_CHANGES.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: serde_json::to_vec(&request).unwrap_or_default(),
             ..Default::default()
@@ -328,7 +329,7 @@ impl LifecycleService {
     ) -> SDKResult<BaseResponse<JobChangeSearchResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/corehr/v1/job_changes/search".to_string(),
+            api_path: Endpoints::COREHR_JOB_CHANGES_SEARCH.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: serde_json::to_vec(&request).unwrap_or_default(),
             ..Default::default()
@@ -379,7 +380,7 @@ impl LifecycleService {
     ) -> SDKResult<BaseResponse<OffboardingCreateResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/corehr/v1/offboardings".to_string(),
+            api_path: Endpoints::COREHR_OFFBOARDINGS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: serde_json::to_vec(&request).unwrap_or_default(),
             ..Default::default()
@@ -432,7 +433,7 @@ impl LifecycleService {
     ) -> SDKResult<BaseResponse<OffboardingSearchResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/corehr/v1/offboardings/search".to_string(),
+            api_path: Endpoints::COREHR_OFFBOARDINGS_SEARCH.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: serde_json::to_vec(&request).unwrap_or_default(),
             ..Default::default()
diff --git a/src/service/corehr/organization/mod.rs b/src/service/corehr/organization/mod.rs
index e5302f8..c973522 100644
--- a/src/service/corehr/organization/mod.rs
+++ b/src/service/corehr/organization/mod.rs
@@ -244,7 +244,7 @@ impl OrganizationService {
         if let Some(date) = effective_date {
             api_req
                 .query_params
-                .insert("effective_date".to_string(), date);
+                .insert("effective_date", date);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -355,13 +355,11 @@ impl OrganizationService {
 
         // 添加查询参数
         if let Some(size) = page_size {
-            api_req
-                .query_params
-                .insert("page_size".to_string(), size.to_string());
+            api_req.query_params.insert("page_size", size.to_string());
         }
 
         if let Some(token) = page_token {
-            api_req.query_params.insert("page_token".to_string(), token);
+            api_req.query_params.insert("page_token", token);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/directory/v1/department/create.rs b/src/service/directory/v1/department/create.rs
index d81cbcb..7c8e9d0 100644
--- a/src/service/directory/v1/department/create.rs
+++ b/src/service/directory/v1/department/create.rs
@@ -100,14 +100,14 @@ impl CreateDepartmentRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         if let Some(department_id_type) = &self.request.department_id_type {
-            self.request.api_req.query_params.insert(
-                "department_id_type".to_string(),
-                department_id_type.to_string(),
-            );
+            self.request
+                .api_req
+                .query_params
+                .insert("department_id_type", department_id_type.to_string());
         }
 
         // 构建请求体
diff --git a/src/service/directory/v1/department/delete.rs b/src/service/directory/v1/department/delete.rs
index 0a6d072..83fb67c 100644
--- a/src/service/directory/v1/department/delete.rs
+++ b/src/service/directory/v1/department/delete.rs
@@ -60,10 +60,10 @@ impl DeleteDepartmentRequestBuilder {
     pub fn build(mut self) -> DeleteDepartmentRequest {
         // 构建查询参数
         if let Some(department_id_type) = &self.request.department_id_type {
-            self.request.api_req.query_params.insert(
-                "department_id_type".to_string(),
-                department_id_type.to_string(),
-            );
+            self.request
+                .api_req
+                .query_params
+                .insert("department_id_type", department_id_type.to_string());
         }
 
         self.request
diff --git a/src/service/directory/v1/department/filter.rs b/src/service/directory/v1/department/filter.rs
index 48c0e72..f21dfb2 100644
--- a/src/service/directory/v1/department/filter.rs
+++ b/src/service/directory/v1/department/filter.rs
@@ -91,19 +91,19 @@ impl FilterDepartmentRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(ref page_token) = self.request.page_token {
             self.request
                 .api_req
                 .query_params
-                .insert("page_token".to_string(), page_token.clone());
+                .insert("page_token", page_token.clone());
         }
 
         if let Some(ref parent_department_id) = self.request.parent_department_id {
             self.request.api_req.query_params.insert(
-                "parent_department_id".to_string(),
+                "parent_department_id",
                 parent_department_id.clone(),
             );
         }
@@ -112,21 +112,21 @@ impl FilterDepartmentRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("fetch_deleted".to_string(), fetch_deleted.to_string());
+                .insert("fetch_deleted", fetch_deleted.to_string());
         }
 
         if let Some(user_id_type) = &self.request.user_id_type {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         if let Some(department_id_type) = &self.request.department_id_type {
-            self.request.api_req.query_params.insert(
-                "department_id_type".to_string(),
-                department_id_type.to_string(),
-            );
+            self.request
+                .api_req
+                .query_params
+                .insert("department_id_type", department_id_type.to_string());
         }
 
         self.request
diff --git a/src/service/directory/v1/department/mget.rs b/src/service/directory/v1/department/mget.rs
index 3661679..2d0105c 100644
--- a/src/service/directory/v1/department/mget.rs
+++ b/src/service/directory/v1/department/mget.rs
@@ -74,14 +74,14 @@ impl MgetDepartmentRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         if let Some(department_id_type) = &self.request.department_id_type {
-            self.request.api_req.query_params.insert(
-                "department_id_type".to_string(),
-                department_id_type.to_string(),
-            );
+            self.request
+                .api_req
+                .query_params
+                .insert("department_id_type", department_id_type.to_string());
         }
 
         // 构建请求体
diff --git a/src/service/directory/v1/department/patch.rs b/src/service/directory/v1/department/patch.rs
index 7e2f4ea..0409e6a 100644
--- a/src/service/directory/v1/department/patch.rs
+++ b/src/service/directory/v1/department/patch.rs
@@ -112,14 +112,14 @@ impl PatchDepartmentRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         if let Some(department_id_type) = &self.request.department_id_type {
-            self.request.api_req.query_params.insert(
-                "department_id_type".to_string(),
-                department_id_type.to_string(),
-            );
+            self.request
+                .api_req
+                .query_params
+                .insert("department_id_type", department_id_type.to_string());
         }
 
         // 构建请求体
diff --git a/src/service/directory/v1/department/search.rs b/src/service/directory/v1/department/search.rs
index a483fb4..0809f1e 100644
--- a/src/service/directory/v1/department/search.rs
+++ b/src/service/directory/v1/department/search.rs
@@ -88,14 +88,14 @@ impl SearchDepartmentRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         if let Some(department_id_type) = &self.request.department_id_type {
-            self.request.api_req.query_params.insert(
-                "department_id_type".to_string(),
-                department_id_type.to_string(),
-            );
+            self.request
+                .api_req
+                .query_params
+                .insert("department_id_type", department_id_type.to_string());
         }
 
         // 构建请求体
diff --git a/src/service/directory/v1/employee/create.rs b/src/service/directory/v1/employee/create.rs
index cf9bb17..aae3669 100644
--- a/src/service/directory/v1/employee/create.rs
+++ b/src/service/directory/v1/employee/create.rs
@@ -148,14 +148,14 @@ impl CreateEmployeeRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         if let Some(department_id_type) = &self.request.department_id_type {
-            self.request.api_req.query_params.insert(
-                "department_id_type".to_string(),
-                department_id_type.to_string(),
-            );
+            self.request
+                .api_req
+                .query_params
+                .insert("department_id_type", department_id_type.to_string());
         }
 
         // 构建请求体
diff --git a/src/service/directory/v1/employee/delete.rs b/src/service/directory/v1/employee/delete.rs
index 795c5fc..0260863 100644
--- a/src/service/directory/v1/employee/delete.rs
+++ b/src/service/directory/v1/employee/delete.rs
@@ -83,14 +83,14 @@ impl DeleteEmployeeRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         if let Some(department_id_type) = &self.request.department_id_type {
-            self.request.api_req.query_params.insert(
-                "department_id_type".to_string(),
-                department_id_type.to_string(),
-            );
+            self.request
+                .api_req
+                .query_params
+                .insert("department_id_type", department_id_type.to_string());
         }
 
         // 构建请求体
diff --git a/src/service/directory/v1/employee/filter.rs b/src/service/directory/v1/employee/filter.rs
index 4beb8b1..f1ab787 100644
--- a/src/service/directory/v1/employee/filter.rs
+++ b/src/service/directory/v1/employee/filter.rs
@@ -91,19 +91,19 @@ impl FilterEmployeeRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(ref page_token) = self.request.page_token {
             self.request
                 .api_req
                 .query_params
-                .insert("page_token".to_string(), page_token.clone());
+                .insert("page_token", page_token.clone());
         }
 
         if let Some(ref status) = self.request.status {
             self.request.api_req.query_params.insert(
-                "status".to_string(),
+                "status",
                 serde_json::to_string(status)
                     .unwrap_or_default()
                     .trim_matches('"')
@@ -115,21 +115,21 @@ impl FilterEmployeeRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("department_ids".to_string(), department_ids.join(","));
+                .insert("department_ids", department_ids.join(","));
         }
 
         if let Some(user_id_type) = &self.request.user_id_type {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         if let Some(department_id_type) = &self.request.department_id_type {
-            self.request.api_req.query_params.insert(
-                "department_id_type".to_string(),
-                department_id_type.to_string(),
-            );
+            self.request
+                .api_req
+                .query_params
+                .insert("department_id_type", department_id_type.to_string());
         }
 
         self.request
diff --git a/src/service/directory/v1/employee/mget.rs b/src/service/directory/v1/employee/mget.rs
index 4fa7bfc..af86afa 100644
--- a/src/service/directory/v1/employee/mget.rs
+++ b/src/service/directory/v1/employee/mget.rs
@@ -67,14 +67,14 @@ impl MgetEmployeeRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         if let Some(department_id_type) = &self.request.department_id_type {
-            self.request.api_req.query_params.insert(
-                "department_id_type".to_string(),
-                department_id_type.to_string(),
-            );
+            self.request
+                .api_req
+                .query_params
+                .insert("department_id_type", department_id_type.to_string());
         }
 
         // 构建请求体
diff --git a/src/service/directory/v1/employee/patch.rs b/src/service/directory/v1/employee/patch.rs
index 1777093..a97d1f1 100644
--- a/src/service/directory/v1/employee/patch.rs
+++ b/src/service/directory/v1/employee/patch.rs
@@ -147,14 +147,14 @@ impl PatchEmployeeRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         if let Some(department_id_type) = &self.request.department_id_type {
-            self.request.api_req.query_params.insert(
-                "department_id_type".to_string(),
-                department_id_type.to_string(),
-            );
+            self.request
+                .api_req
+                .query_params
+                .insert("department_id_type", department_id_type.to_string());
         }
 
         // 构建请求体
diff --git a/src/service/directory/v1/employee/regular.rs b/src/service/directory/v1/employee/regular.rs
index e22b0d0..f5ba34a 100644
--- a/src/service/directory/v1/employee/regular.rs
+++ b/src/service/directory/v1/employee/regular.rs
@@ -59,7 +59,7 @@ impl RegularEmployeeRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         // 构建空的请求体
diff --git a/src/service/directory/v1/employee/resurrect.rs b/src/service/directory/v1/employee/resurrect.rs
index bb968ef..c97c338 100644
--- a/src/service/directory/v1/employee/resurrect.rs
+++ b/src/service/directory/v1/employee/resurrect.rs
@@ -107,14 +107,14 @@ impl ResurrectEmployeeRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         if let Some(department_id_type) = &self.request.department_id_type {
-            self.request.api_req.query_params.insert(
-                "department_id_type".to_string(),
-                department_id_type.to_string(),
-            );
+            self.request
+                .api_req
+                .query_params
+                .insert("department_id_type", department_id_type.to_string());
         }
 
         // 构建请求体
@@ -182,7 +182,7 @@ impl EmployeeService {
     /// let response = client.directory.v1.employee.resurrect(
     ///     ResurrectEmployeeRequest::builder("employee_id")
     ///         .leader_id("leader_id")
-    ///         .department_ids(vec!["department_id".to_string()])
+    ///         .department_ids(vec!["department_id"])
     ///         .build(),
     ///     None
     /// ).await?;
diff --git a/src/service/directory/v1/employee/search.rs b/src/service/directory/v1/employee/search.rs
index c844035..26fb8b3 100644
--- a/src/service/directory/v1/employee/search.rs
+++ b/src/service/directory/v1/employee/search.rs
@@ -91,28 +91,28 @@ impl SearchEmployeeRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         if let Some(department_id_type) = &self.request.department_id_type {
-            self.request.api_req.query_params.insert(
-                "department_id_type".to_string(),
-                department_id_type.to_string(),
-            );
+            self.request
+                .api_req
+                .query_params
+                .insert("department_id_type", department_id_type.to_string());
         }
 
         if let Some(page_token) = &self.request.page_token {
             self.request
                 .api_req
                 .query_params
-                .insert("page_token".to_string(), page_token.clone());
+                .insert("page_token", page_token.clone());
         }
 
         if let Some(page_size) = &self.request.page_size {
             self.request
                 .api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         // 构建请求体
diff --git a/src/service/directory/v1/employee/to_be_resigned.rs b/src/service/directory/v1/employee/to_be_resigned.rs
index 8572b83..a5c2184 100644
--- a/src/service/directory/v1/employee/to_be_resigned.rs
+++ b/src/service/directory/v1/employee/to_be_resigned.rs
@@ -83,7 +83,7 @@ impl ToBeResignedEmployeeRequestBuilder {
             self.request
                 .api_req
                 .query_params
-                .insert("user_id_type".to_string(), user_id_type.to_string());
+                .insert("user_id_type", user_id_type.to_string());
         }
 
         // 构建请求体
diff --git a/src/service/ehr/attachment/mod.rs b/src/service/ehr/attachment/mod.rs
index ac24bab..19ab02c 100644
--- a/src/service/ehr/attachment/mod.rs
+++ b/src/service/ehr/attachment/mod.rs
@@ -104,9 +104,7 @@ impl AttachmentService {
 
         // 添加查询参数
         if let Some(user_id_type) = request.user_id_type {
-            api_req
-                .query_params
-                .insert("user_id_type".to_string(), user_id_type);
+            api_req.query_params.insert("user_id_type", user_id_type);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/ehr/employee/mod.rs b/src/service/ehr/employee/mod.rs
index 98c4186..63ea5e7 100644
--- a/src/service/ehr/employee/mod.rs
+++ b/src/service/ehr/employee/mod.rs
@@ -111,48 +111,40 @@ impl EmployeeService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(department_id) = request.department_id {
-            api_req
-                .query_params
-                .insert("department_id".to_string(), department_id);
+            api_req.query_params.insert("department_id", department_id);
         }
 
         if let Some(user_id_type) = request.user_id_type {
-            api_req
-                .query_params
-                .insert("user_id_type".to_string(), user_id_type);
+            api_req.query_params.insert("user_id_type", user_id_type);
         }
 
         if let Some(department_id_type) = request.department_id_type {
             api_req
                 .query_params
-                .insert("department_id_type".to_string(), department_id_type);
+                .insert("department_id_type", department_id_type);
         }
 
         if let Some(include_resigned) = request.include_resigned {
             api_req
                 .query_params
-                .insert("include_resigned".to_string(), include_resigned.to_string());
+                .insert("include_resigned", include_resigned.to_string());
         }
 
         if let Some(fields) = request.fields {
             if !fields.is_empty() {
-                api_req
-                    .query_params
-                    .insert("fields".to_string(), fields.join(","));
+                api_req.query_params.insert("fields", fields.join(","));
             }
         }
 
diff --git a/src/service/elearning/course_registration/mod.rs b/src/service/elearning/course_registration/mod.rs
index f96ce41..2d6894f 100644
--- a/src/service/elearning/course_registration/mod.rs
+++ b/src/service/elearning/course_registration/mod.rs
@@ -80,47 +80,45 @@ impl CourseRegistrationService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(course_id) = request.course_id {
             api_req
                 .query_params
-                .insert("course_id".to_string(), course_id);
+                .insert("course_id", course_id);
         }
 
         if let Some(user_id) = request.user_id {
-            api_req.query_params.insert("user_id".to_string(), user_id);
+            api_req.query_params.insert("user_id", user_id);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(registration_type) = request.registration_type {
             api_req
                 .query_params
-                .insert("registration_type".to_string(), registration_type);
+                .insert("registration_type", registration_type);
         }
 
         if let Some(start_time) = request.start_time {
             api_req
                 .query_params
-                .insert("start_time".to_string(), start_time.to_string());
+                .insert("start_time", start_time.to_string());
         }
 
         if let Some(end_time) = request.end_time {
             api_req
                 .query_params
-                .insert("end_time".to_string(), end_time.to_string());
+                .insert("end_time", end_time.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -239,31 +237,29 @@ impl CourseRegistrationService {
 
         // 添加查询参数
         if let Some(user_id) = request.user_id {
-            api_req.query_params.insert("user_id".to_string(), user_id);
+            api_req.query_params.insert("user_id", user_id);
         }
 
         if let Some(course_id) = request.course_id {
             api_req
                 .query_params
-                .insert("course_id".to_string(), course_id);
+                .insert("course_id", course_id);
         }
 
         if let Some(department_id) = request.department_id {
-            api_req
-                .query_params
-                .insert("department_id".to_string(), department_id);
+            api_req.query_params.insert("department_id", department_id);
         }
 
         if let Some(start_time) = request.start_time {
             api_req
                 .query_params
-                .insert("start_time".to_string(), start_time.to_string());
+                .insert("start_time", start_time.to_string());
         }
 
         if let Some(end_time) = request.end_time {
             api_req
                 .query_params
-                .insert("end_time".to_string(), end_time.to_string());
+                .insert("end_time", end_time.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/group/v1/chat/mod.rs b/src/service/group/v1/chat/mod.rs
index 67c6c60..638ee83 100644
--- a/src/service/group/v1/chat/mod.rs
+++ b/src/service/group/v1/chat/mod.rs
@@ -1,5 +1,3 @@
-use crate::core::config::Config;
-
 //! # 群管理服务模块
 //!
 //! 本模块包含飞书群聊相关的所有管理功能。
@@ -9,7 +7,7 @@ use crate::core::config::Config;
 //! - `create`: 创建群聊
 //! - `get`: 获取群信息
 //! - `list`: 获取群列表
-//! - `delete`: 解散群聊 
+//! - `delete`: 解散群聊
 //! - `update`: 更新群信息
 //! - `search`: 搜索群聊
 //! - `put_top_notice`: 设置群置顶
@@ -18,6 +16,8 @@ use crate::core::config::Config;
 //!
 //! 🚧 **待实现** - 以上功能模块尚未实现，敬请期待。
 
+use crate::core::config::Config;
+
 // 规划中的功能模块（待实现）
 // pub mod create;
 // pub mod get;
diff --git a/src/service/group/v1/chat_member/mod.rs b/src/service/group/v1/chat_member/mod.rs
index ab92938..b3df7b9 100644
--- a/src/service/group/v1/chat_member/mod.rs
+++ b/src/service/group/v1/chat_member/mod.rs
@@ -1,5 +1,3 @@
-use crate::core::config::Config;
-
 //! # 群成员管理服务模块
 //!
 //! 本模块包含飞书群聊成员相关的所有管理功能。
@@ -16,6 +14,8 @@ use crate::core::config::Config;
 //!
 //! 🚧 **待实现** - 以上功能模块尚未实现，敬请期待。
 
+use crate::core::config::Config;
+
 // 规划中的功能模块（待实现）
 // pub mod create;
 // pub mod get;
diff --git a/src/service/group/v1/mod.rs b/src/service/group/v1/mod.rs
index b6b8310..a081f2f 100644
--- a/src/service/group/v1/mod.rs
+++ b/src/service/group/v1/mod.rs
@@ -1,5 +1,3 @@
-use std::sync::Arc;
-
 use crate::core::config::Config;
 
 pub mod chat;
@@ -21,12 +19,12 @@ pub struct V1 {
 }
 
 impl V1 {
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            chat: chat::ChatService::new(Arc::clone(&config)),
-            chat_member: chat_member::ChatMemberService::new(Arc::clone(&config)),
-            chat_announcement: chat_announcement::ChatAnnouncementService::new(Arc::clone(&config)),
-            chat_tab: chat_tab::ChatTabService::new(Arc::clone(&config)),
+            chat: chat::ChatService::new(config.clone()),
+            chat_member: chat_member::ChatMemberService::new(config.clone()),
+            chat_announcement: chat_announcement::ChatAnnouncementService::new(config.clone()),
+            chat_tab: chat_tab::ChatTabService::new(config.clone()),
             chat_menu_tree: chat_menu_tree::ChatMenuTreeService::new(config),
         }
     }
diff --git a/src/service/helpdesk/v1/agent/mod.rs b/src/service/helpdesk/v1/agent/mod.rs
index da85cce..72428f0 100644
--- a/src/service/helpdesk/v1/agent/mod.rs
+++ b/src/service/helpdesk/v1/agent/mod.rs
@@ -87,10 +87,7 @@ impl AgentService {
     ) -> SDKResult<BaseResponse<UpdateAgentResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -128,10 +125,7 @@ impl AgentService {
     ) -> SDKResult<BaseResponse<GetAgentEmailResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/helpdesk/v1/agent_schedule/mod.rs b/src/service/helpdesk/v1/agent_schedule/mod.rs
index 46f9583..d669964 100644
--- a/src/service/helpdesk/v1/agent_schedule/mod.rs
+++ b/src/service/helpdesk/v1/agent_schedule/mod.rs
@@ -119,10 +119,7 @@ impl AgentScheduleService {
     ) -> SDKResult<BaseResponse<CreateAgentScheduleResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -147,10 +144,7 @@ impl AgentScheduleService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -177,10 +171,7 @@ impl AgentScheduleService {
     ) -> SDKResult<BaseResponse<UpdateAgentScheduleResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -207,10 +198,7 @@ impl AgentScheduleService {
     ) -> SDKResult<BaseResponse<GetAgentScheduleResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -237,16 +225,13 @@ impl AgentScheduleService {
     ) -> SDKResult<BaseResponse<ListAgentSchedulesResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/helpdesk/v1/agent_skill/mod.rs b/src/service/helpdesk/v1/agent_skill/mod.rs
index deb6923..1733210 100644
--- a/src/service/helpdesk/v1/agent_skill/mod.rs
+++ b/src/service/helpdesk/v1/agent_skill/mod.rs
@@ -89,10 +89,7 @@ impl AgentSkillService {
     ) -> SDKResult<BaseResponse<CreateAgentSkillResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -116,10 +113,7 @@ impl AgentSkillService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -142,10 +136,7 @@ impl AgentSkillService {
     ) -> SDKResult<BaseResponse<GetAgentSkillResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -169,16 +160,13 @@ impl AgentSkillService {
     ) -> SDKResult<BaseResponse<ListAgentSkillsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/helpdesk/v1/agent_skill_rule/mod.rs b/src/service/helpdesk/v1/agent_skill_rule/mod.rs
index 7fbe5dd..bb2a7da 100644
--- a/src/service/helpdesk/v1/agent_skill_rule/mod.rs
+++ b/src/service/helpdesk/v1/agent_skill_rule/mod.rs
@@ -81,10 +81,7 @@ impl AgentSkillRuleService {
     ) -> SDKResult<BaseResponse<OperatorOptionsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -122,16 +119,13 @@ impl AgentSkillRuleService {
     ) -> SDKResult<BaseResponse<ListAgentSkillRulesResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/helpdesk/v1/category/mod.rs b/src/service/helpdesk/v1/category/mod.rs
index 8949809..5f0f21a 100644
--- a/src/service/helpdesk/v1/category/mod.rs
+++ b/src/service/helpdesk/v1/category/mod.rs
@@ -119,10 +119,7 @@ impl CategoryService {
     ) -> SDKResult<BaseResponse<CreateCategoryResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -146,10 +143,7 @@ impl CategoryService {
     ) -> SDKResult<BaseResponse<GetCategoryResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -173,10 +167,7 @@ impl CategoryService {
     ) -> SDKResult<BaseResponse<UpdateCategoryResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -200,10 +191,7 @@ impl CategoryService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -228,19 +216,16 @@ impl CategoryService {
     ) -> SDKResult<BaseResponse<ListCategoriesResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(parent_id) = parent_id {
-            query_params.insert("parent_id".to_string(), parent_id.to_string());
+            query_params.insert("parent_id", parent_id.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/helpdesk/v1/event/mod.rs b/src/service/helpdesk/v1/event/mod.rs
index 6e74513..115f360 100644
--- a/src/service/helpdesk/v1/event/mod.rs
+++ b/src/service/helpdesk/v1/event/mod.rs
@@ -77,10 +77,7 @@ impl EventService {
     ) -> SDKResult<BaseResponse<SubscribeEventResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -118,10 +115,7 @@ impl EventService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/helpdesk/v1/faq/mod.rs b/src/service/helpdesk/v1/faq/mod.rs
index fdcc6ac..b9514b8 100644
--- a/src/service/helpdesk/v1/faq/mod.rs
+++ b/src/service/helpdesk/v1/faq/mod.rs
@@ -160,10 +160,7 @@ impl FaqService {
     ) -> SDKResult<BaseResponse<CreateFaqResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -201,10 +198,7 @@ impl FaqService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -243,10 +237,7 @@ impl FaqService {
     ) -> SDKResult<BaseResponse<UpdateFaqResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -284,10 +275,7 @@ impl FaqService {
     ) -> SDKResult<BaseResponse<GetFaqResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -329,22 +317,19 @@ impl FaqService {
     ) -> SDKResult<BaseResponse<ListFaqsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(category_id) = category_id {
-            query_params.insert("category_id".to_string(), category_id.to_string());
+            query_params.insert("category_id", category_id.to_string());
         }
         if let Some(status) = status {
-            query_params.insert("status".to_string(), status.to_string());
+            query_params.insert("status", status.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
 
         let api_req = ApiRequest {
@@ -383,10 +368,7 @@ impl FaqService {
     ) -> SDKResult<BaseResponse<BinaryResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -427,21 +409,18 @@ impl FaqService {
         option: Option<RequestOption>,
     ) -> SDKResult<BaseResponse<SearchFaqsResponse>> {
         let mut query_params = HashMap::new();
-        query_params.insert("query".to_string(), query.to_string());
+        query_params.insert("query", query.to_string());
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(category_id) = category_id {
-            query_params.insert("category_id".to_string(), category_id.to_string());
+            query_params.insert("category_id", category_id.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/helpdesk/v1/notification/mod.rs b/src/service/helpdesk/v1/notification/mod.rs
index 16cfe8c..6cc8735 100644
--- a/src/service/helpdesk/v1/notification/mod.rs
+++ b/src/service/helpdesk/v1/notification/mod.rs
@@ -118,10 +118,7 @@ impl NotificationService {
     ) -> SDKResult<BaseResponse<CreateNotificationResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -146,10 +143,7 @@ impl NotificationService {
     ) -> SDKResult<BaseResponse<UpdateNotificationResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -173,10 +167,7 @@ impl NotificationService {
     ) -> SDKResult<BaseResponse<GetNotificationResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -199,10 +190,7 @@ impl NotificationService {
     ) -> SDKResult<BaseResponse<PreviewNotificationResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -225,10 +213,7 @@ impl NotificationService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -253,10 +238,7 @@ impl NotificationService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -281,10 +263,7 @@ impl NotificationService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -309,10 +288,7 @@ impl NotificationService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/helpdesk/v1/ticket/mod.rs b/src/service/helpdesk/v1/ticket/mod.rs
index c0cd03e..e18b5cd 100644
--- a/src/service/helpdesk/v1/ticket/mod.rs
+++ b/src/service/helpdesk/v1/ticket/mod.rs
@@ -121,10 +121,7 @@ impl TicketService {
     ) -> SDKResult<BaseResponse<StartServiceResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -148,10 +145,7 @@ impl TicketService {
     ) -> SDKResult<BaseResponse<GetTicketResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -175,10 +169,7 @@ impl TicketService {
     ) -> SDKResult<BaseResponse<UpdateTicketResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -203,16 +194,13 @@ impl TicketService {
     ) -> SDKResult<BaseResponse<ListTicketsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
 
         let api_req = ApiRequest {
@@ -229,10 +217,12 @@ impl TicketService {
     /// 规划中的工单相关功能
     ///
     /// 以下功能将在未来版本中实现：
-    /// 
+    ///
     /// - `ticket_image`: 获取工单内图像
     /// - `answer_user_query`: 回复用户在工单里的提问
     /// - `customized_fields`: 获取服务台自定义字段
     ///
     /// 🚧 **待实现** - 以上功能尚未实现，敬请期待。
+    fn _placeholder() { /* TODO: 实现以上功能 */
+    }
 }
diff --git a/src/service/helpdesk/v1/ticket_customized_field/mod.rs b/src/service/helpdesk/v1/ticket_customized_field/mod.rs
index af61b7e..7db8d58 100644
--- a/src/service/helpdesk/v1/ticket_customized_field/mod.rs
+++ b/src/service/helpdesk/v1/ticket_customized_field/mod.rs
@@ -141,10 +141,7 @@ impl TicketCustomizedFieldService {
     ) -> SDKResult<BaseResponse<CreateTicketCustomizedFieldResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -182,10 +179,7 @@ impl TicketCustomizedFieldService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -224,10 +218,7 @@ impl TicketCustomizedFieldService {
     ) -> SDKResult<BaseResponse<UpdateTicketCustomizedFieldResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -265,10 +256,7 @@ impl TicketCustomizedFieldService {
     ) -> SDKResult<BaseResponse<GetTicketCustomizedFieldResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -306,16 +294,13 @@ impl TicketCustomizedFieldService {
     ) -> SDKResult<BaseResponse<ListTicketCustomizedFieldsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/helpdesk/v1/ticket_message/mod.rs b/src/service/helpdesk/v1/ticket_message/mod.rs
index 1fa3562..d76d0d6 100644
--- a/src/service/helpdesk/v1/ticket_message/mod.rs
+++ b/src/service/helpdesk/v1/ticket_message/mod.rs
@@ -115,10 +115,7 @@ impl TicketMessageService {
     ) -> SDKResult<BaseResponse<CreateTicketMessageResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -160,16 +157,13 @@ impl TicketMessageService {
     ) -> SDKResult<BaseResponse<ListTicketMessagesResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
 
         let api_req = ApiRequest {
@@ -209,10 +203,7 @@ impl TicketMessageService {
     ) -> SDKResult<BaseResponse<CreateGroupMessageResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/hire/attachment/mod.rs b/src/service/hire/attachment/mod.rs
index 1ba789c..c510256 100644
--- a/src/service/hire/attachment/mod.rs
+++ b/src/service/hire/attachment/mod.rs
@@ -382,49 +382,47 @@ impl AttachmentService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(object_type) = request.object_type {
             api_req
                 .query_params
-                .insert("object_type".to_string(), object_type);
+                .insert("object_type", object_type);
         }
 
         if let Some(object_id) = request.object_id {
             api_req
                 .query_params
-                .insert("object_id".to_string(), object_id);
+                .insert("object_id", object_id);
         }
 
         if let Some(attachment_type) = request.attachment_type {
             api_req
                 .query_params
-                .insert("attachment_type".to_string(), attachment_type);
+                .insert("attachment_type", attachment_type);
         }
 
         if let Some(uploader_id) = request.uploader_id {
             api_req
                 .query_params
-                .insert("uploader_id".to_string(), uploader_id);
+                .insert("uploader_id", uploader_id);
         }
 
         if let Some(created_start_time) = request.created_start_time {
             api_req
                 .query_params
-                .insert("created_start_time".to_string(), created_start_time);
+                .insert("created_start_time", created_start_time);
         }
 
         if let Some(created_end_time) = request.created_end_time {
             api_req
                 .query_params
-                .insert("created_end_time".to_string(), created_end_time);
+                .insert("created_end_time", created_end_time);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -712,19 +710,15 @@ impl AttachmentService {
         if let Some(object_type) = object_type {
             api_req
                 .query_params
-                .insert("object_type".to_string(), object_type);
+                .insert("object_type", object_type);
         }
 
         if let Some(start_date) = start_date {
-            api_req
-                .query_params
-                .insert("start_date".to_string(), start_date);
+            api_req.query_params.insert("start_date", start_date);
         }
 
         if let Some(end_date) = end_date {
-            api_req
-                .query_params
-                .insert("end_date".to_string(), end_date);
+            api_req.query_params.insert("end_date", end_date);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/candidate_management/application/mod.rs b/src/service/hire/candidate_management/application/mod.rs
index ab50b18..c29f0ed 100644
--- a/src/service/hire/candidate_management/application/mod.rs
+++ b/src/service/hire/candidate_management/application/mod.rs
@@ -293,43 +293,41 @@ impl ApplicationService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(job_id) = request.job_id {
-            api_req.query_params.insert("job_id".to_string(), job_id);
+            api_req.query_params.insert("job_id", job_id);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(stage_id) = request.stage_id {
             api_req
                 .query_params
-                .insert("stage_id".to_string(), stage_id);
+                .insert("stage_id", stage_id);
         }
 
         if let Some(source) = request.source {
-            api_req.query_params.insert("source".to_string(), source);
+            api_req.query_params.insert("source", source);
         }
 
         if let Some(created_start_time) = request.created_start_time {
             api_req
                 .query_params
-                .insert("created_start_time".to_string(), created_start_time);
+                .insert("created_start_time", created_start_time);
         }
 
         if let Some(created_end_time) = request.created_end_time {
             api_req
                 .query_params
-                .insert("created_end_time".to_string(), created_end_time);
+                .insert("created_end_time", created_end_time);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -488,13 +486,11 @@ impl ApplicationService {
         if let Some(page_size) = page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/candidate_management/interview/mod.rs b/src/service/hire/candidate_management/interview/mod.rs
index 2c9d9c6..50c2e11 100644
--- a/src/service/hire/candidate_management/interview/mod.rs
+++ b/src/service/hire/candidate_management/interview/mod.rs
@@ -433,41 +433,39 @@ impl InterviewService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(application_id) = request.application_id {
             api_req
                 .query_params
-                .insert("application_id".to_string(), application_id);
+                .insert("application_id", application_id);
         }
 
         if let Some(interviewer_id) = request.interviewer_id {
             api_req
                 .query_params
-                .insert("interviewer_id".to_string(), interviewer_id);
+                .insert("interviewer_id", interviewer_id);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(start_time_from) = request.start_time_from {
             api_req
                 .query_params
-                .insert("start_time_from".to_string(), start_time_from);
+                .insert("start_time_from", start_time_from);
         }
 
         if let Some(start_time_to) = request.start_time_to {
             api_req
                 .query_params
-                .insert("start_time_to".to_string(), start_time_to);
+                .insert("start_time_to", start_time_to);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -617,13 +615,11 @@ impl InterviewService {
         if let Some(page_size) = page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/candidate_management/offer/mod.rs b/src/service/hire/candidate_management/offer/mod.rs
index b7f1a8e..9babe8c 100644
--- a/src/service/hire/candidate_management/offer/mod.rs
+++ b/src/service/hire/candidate_management/offer/mod.rs
@@ -462,45 +462,43 @@ impl OfferService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(talent_id) = request.talent_id {
             api_req
                 .query_params
-                .insert("talent_id".to_string(), talent_id);
+                .insert("talent_id", talent_id);
         }
 
         if let Some(job_id) = request.job_id {
-            api_req.query_params.insert("job_id".to_string(), job_id);
+            api_req.query_params.insert("job_id", job_id);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(approval_status) = request.approval_status {
             api_req
                 .query_params
-                .insert("approval_status".to_string(), approval_status);
+                .insert("approval_status", approval_status);
         }
 
         if let Some(created_start_time) = request.created_start_time {
             api_req
                 .query_params
-                .insert("created_start_time".to_string(), created_start_time);
+                .insert("created_start_time", created_start_time);
         }
 
         if let Some(created_end_time) = request.created_end_time {
             api_req
                 .query_params
-                .insert("created_end_time".to_string(), created_end_time);
+                .insert("created_end_time", created_end_time);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -744,23 +742,21 @@ impl OfferService {
         if let Some(page_size) = page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(status) = status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(department) = department {
             api_req
                 .query_params
-                .insert("department".to_string(), department);
+                .insert("department", department);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/candidate_management/talent/mod.rs b/src/service/hire/candidate_management/talent/mod.rs
index f991fb4..1be7cca 100644
--- a/src/service/hire/candidate_management/talent/mod.rs
+++ b/src/service/hire/candidate_management/talent/mod.rs
@@ -302,61 +302,59 @@ impl TalentService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(name_keyword) = request.name_keyword {
             api_req
                 .query_params
-                .insert("name_keyword".to_string(), name_keyword);
+                .insert("name_keyword", name_keyword);
         }
 
         if let Some(email_keyword) = request.email_keyword {
             api_req
                 .query_params
-                .insert("email_keyword".to_string(), email_keyword);
+                .insert("email_keyword", email_keyword);
         }
 
         if let Some(phone_keyword) = request.phone_keyword {
             api_req
                 .query_params
-                .insert("phone_keyword".to_string(), phone_keyword);
+                .insert("phone_keyword", phone_keyword);
         }
 
         if let Some(work_experience) = request.work_experience {
             api_req
                 .query_params
-                .insert("work_experience".to_string(), work_experience.to_string());
+                .insert("work_experience", work_experience.to_string());
         }
 
         if let Some(education) = request.education {
             api_req
                 .query_params
-                .insert("education".to_string(), education);
+                .insert("education", education);
         }
 
         if !request.tags.is_empty() {
             api_req
                 .query_params
-                .insert("tags".to_string(), request.tags.join(","));
+                .insert("tags", request.tags.join(","));
         }
 
         if let Some(created_start_time) = request.created_start_time {
             api_req
                 .query_params
-                .insert("created_start_time".to_string(), created_start_time);
+                .insert("created_start_time", created_start_time);
         }
 
         if let Some(created_end_time) = request.created_end_time {
             api_req
                 .query_params
-                .insert("created_end_time".to_string(), created_end_time);
+                .insert("created_end_time", created_end_time);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -495,13 +493,11 @@ impl TalentService {
         if let Some(page_size) = page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/candidate_management/talent_pool/mod.rs b/src/service/hire/candidate_management/talent_pool/mod.rs
index bc12697..0964074 100644
--- a/src/service/hire/candidate_management/talent_pool/mod.rs
+++ b/src/service/hire/candidate_management/talent_pool/mod.rs
@@ -347,29 +347,27 @@ impl TalentPoolService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(pool_type) = request.pool_type {
             api_req
                 .query_params
-                .insert("pool_type".to_string(), pool_type);
+                .insert("pool_type", pool_type);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(owner_id) = request.owner_id {
             api_req
                 .query_params
-                .insert("owner_id".to_string(), owner_id);
+                .insert("owner_id", owner_id);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -439,31 +437,29 @@ impl TalentPoolService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if !request.tags.is_empty() {
             api_req
                 .query_params
-                .insert("tags".to_string(), request.tags.join(","));
+                .insert("tags", request.tags.join(","));
         }
 
         if let Some(work_experience) = request.work_experience {
             api_req
                 .query_params
-                .insert("work_experience".to_string(), work_experience.to_string());
+                .insert("work_experience", work_experience.to_string());
         }
 
         if let Some(education) = request.education {
             api_req
                 .query_params
-                .insert("education".to_string(), education);
+                .insert("education", education);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/ecological_docking/background_check/mod.rs b/src/service/hire/ecological_docking/background_check/mod.rs
index d6316ff..5f07311 100644
--- a/src/service/hire/ecological_docking/background_check/mod.rs
+++ b/src/service/hire/ecological_docking/background_check/mod.rs
@@ -351,23 +351,21 @@ impl BackgroundCheckService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(vendor) = request.vendor {
-            api_req.query_params.insert("vendor".to_string(), vendor);
+            api_req.query_params.insert("vendor", vendor);
         }
 
         if let Some(enabled) = request.enabled {
             api_req
                 .query_params
-                .insert("enabled".to_string(), enabled.to_string());
+                .insert("enabled", enabled.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -562,35 +560,33 @@ impl BackgroundCheckService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(talent_id) = request.talent_id {
             api_req
                 .query_params
-                .insert("talent_id".to_string(), talent_id);
+                .insert("talent_id", talent_id);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(created_start_time) = request.created_start_time {
             api_req
                 .query_params
-                .insert("created_start_time".to_string(), created_start_time);
+                .insert("created_start_time", created_start_time);
         }
 
         if let Some(created_end_time) = request.created_end_time {
             api_req
                 .query_params
-                .insert("created_end_time".to_string(), created_end_time);
+                .insert("created_end_time", created_end_time);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/ecological_docking/exam/mod.rs b/src/service/hire/ecological_docking/exam/mod.rs
index e4d5017..a791a00 100644
--- a/src/service/hire/ecological_docking/exam/mod.rs
+++ b/src/service/hire/ecological_docking/exam/mod.rs
@@ -358,37 +358,35 @@ impl ExamService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(paper_type) = request.paper_type {
             api_req
                 .query_params
-                .insert("paper_type".to_string(), paper_type);
+                .insert("paper_type", paper_type);
         }
 
         if let Some(difficulty_level) = request.difficulty_level {
             api_req
                 .query_params
-                .insert("difficulty_level".to_string(), difficulty_level);
+                .insert("difficulty_level", difficulty_level);
         }
 
         if let Some(skill_tag) = request.skill_tag {
             api_req
                 .query_params
-                .insert("skill_tag".to_string(), skill_tag);
+                .insert("skill_tag", skill_tag);
         }
 
         if let Some(enabled) = request.enabled {
             api_req
                 .query_params
-                .insert("enabled".to_string(), enabled.to_string());
+                .insert("enabled", enabled.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -565,41 +563,39 @@ impl ExamService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(talent_id) = request.talent_id {
             api_req
                 .query_params
-                .insert("talent_id".to_string(), talent_id);
+                .insert("talent_id", talent_id);
         }
 
         if let Some(paper_id) = request.paper_id {
             api_req
                 .query_params
-                .insert("paper_id".to_string(), paper_id);
+                .insert("paper_id", paper_id);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(start_time_from) = request.start_time_from {
             api_req
                 .query_params
-                .insert("start_time_from".to_string(), start_time_from);
+                .insert("start_time_from", start_time_from);
         }
 
         if let Some(start_time_to) = request.start_time_to {
             api_req
                 .query_params
-                .insert("start_time_to".to_string(), start_time_to);
+                .insert("start_time_to", start_time_to);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -800,19 +796,15 @@ impl ExamService {
         if let Some(paper_id) = paper_id {
             api_req
                 .query_params
-                .insert("paper_id".to_string(), paper_id);
+                .insert("paper_id", paper_id);
         }
 
         if let Some(start_date) = start_date {
-            api_req
-                .query_params
-                .insert("start_date".to_string(), start_date);
+            api_req.query_params.insert("start_date", start_date);
         }
 
         if let Some(end_date) = end_date {
-            api_req
-                .query_params
-                .insert("end_date".to_string(), end_date);
+            api_req.query_params.insert("end_date", end_date);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/get_candidates/agency/mod.rs b/src/service/hire/get_candidates/agency/mod.rs
index d5cf041..8157196 100644
--- a/src/service/hire/get_candidates/agency/mod.rs
+++ b/src/service/hire/get_candidates/agency/mod.rs
@@ -429,35 +429,33 @@ impl AgencyService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(cooperation_mode) = request.cooperation_mode {
             api_req
                 .query_params
-                .insert("cooperation_mode".to_string(), cooperation_mode);
+                .insert("cooperation_mode", cooperation_mode);
         }
 
         if let Some(specialty) = request.specialty {
             api_req
                 .query_params
-                .insert("specialty".to_string(), specialty);
+                .insert("specialty", specialty);
         }
 
         if let Some(service_area) = request.service_area {
             api_req
                 .query_params
-                .insert("service_area".to_string(), service_area);
+                .insert("service_area", service_area);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -556,39 +554,37 @@ impl AgencyService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(agency_id) = request.agency_id {
             api_req
                 .query_params
-                .insert("agency_id".to_string(), agency_id);
+                .insert("agency_id", agency_id);
         }
 
         if let Some(job_id) = request.job_id {
-            api_req.query_params.insert("job_id".to_string(), job_id);
+            api_req.query_params.insert("job_id", job_id);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(recommendation_start_time) = request.recommendation_start_time {
             api_req.query_params.insert(
-                "recommendation_start_time".to_string(),
+                "recommendation_start_time",
                 recommendation_start_time,
             );
         }
 
         if let Some(recommendation_end_time) = request.recommendation_end_time {
             api_req.query_params.insert(
-                "recommendation_end_time".to_string(),
+                "recommendation_end_time",
                 recommendation_end_time,
             );
         }
@@ -676,13 +672,11 @@ impl AgencyService {
         if let Some(page_size) = page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/get_candidates/external_system/mod.rs b/src/service/hire/get_candidates/external_system/mod.rs
index 0f3fc58..5561aef 100644
--- a/src/service/hire/get_candidates/external_system/mod.rs
+++ b/src/service/hire/get_candidates/external_system/mod.rs
@@ -387,25 +387,23 @@ impl ExternalSystemService {
         if let Some(page_size) = page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(system_type) = system_type {
             api_req
                 .query_params
-                .insert("system_type".to_string(), system_type);
+                .insert("system_type", system_type);
         }
 
         if let Some(enabled) = enabled {
             api_req
                 .query_params
-                .insert("enabled".to_string(), enabled.to_string());
+                .insert("enabled", enabled.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -520,29 +518,27 @@ impl ExternalSystemService {
         if let Some(system_config_id) = system_config_id {
             api_req
                 .query_params
-                .insert("system_config_id".to_string(), system_config_id);
+                .insert("system_config_id", system_config_id);
         }
 
         if let Some(sync_type) = sync_type {
             api_req
                 .query_params
-                .insert("sync_type".to_string(), sync_type);
+                .insert("sync_type", sync_type);
         }
 
         if let Some(status) = status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(page_size) = page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -666,29 +662,27 @@ impl ExternalSystemService {
         if let Some(system_config_id) = system_config_id {
             api_req
                 .query_params
-                .insert("system_config_id".to_string(), system_config_id);
+                .insert("system_config_id", system_config_id);
         }
 
         if let Some(sync_status) = sync_status {
             api_req
                 .query_params
-                .insert("sync_status".to_string(), sync_status);
+                .insert("sync_status", sync_status);
         }
 
         if let Some(skills) = skills {
-            api_req.query_params.insert("skills".to_string(), skills);
+            api_req.query_params.insert("skills", skills);
         }
 
         if let Some(page_size) = page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/get_candidates/referral/mod.rs b/src/service/hire/get_candidates/referral/mod.rs
index 50094cd..0281d56 100644
--- a/src/service/hire/get_candidates/referral/mod.rs
+++ b/src/service/hire/get_candidates/referral/mod.rs
@@ -371,45 +371,43 @@ impl ReferralService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(referrer_id) = request.referrer_id {
             api_req
                 .query_params
-                .insert("referrer_id".to_string(), referrer_id);
+                .insert("referrer_id", referrer_id);
         }
 
         if let Some(job_id) = request.job_id {
-            api_req.query_params.insert("job_id".to_string(), job_id);
+            api_req.query_params.insert("job_id", job_id);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(reward_status) = request.reward_status {
             api_req
                 .query_params
-                .insert("reward_status".to_string(), reward_status);
+                .insert("reward_status", reward_status);
         }
 
         if let Some(referral_start_time) = request.referral_start_time {
             api_req
                 .query_params
-                .insert("referral_start_time".to_string(), referral_start_time);
+                .insert("referral_start_time", referral_start_time);
         }
 
         if let Some(referral_end_time) = request.referral_end_time {
             api_req
                 .query_params
-                .insert("referral_end_time".to_string(), referral_end_time);
+                .insert("referral_end_time", referral_end_time);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -645,13 +643,11 @@ impl ReferralService {
         if let Some(page_size) = page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/get_candidates/website/mod.rs b/src/service/hire/get_candidates/website/mod.rs
index 9a68aca..b1edc69 100644
--- a/src/service/hire/get_candidates/website/mod.rs
+++ b/src/service/hire/get_candidates/website/mod.rs
@@ -308,31 +308,29 @@ impl WebsiteService {
         if let Some(page_size) = page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(publish_status) = publish_status {
             api_req
                 .query_params
-                .insert("publish_status".to_string(), publish_status);
+                .insert("publish_status", publish_status);
         }
 
         if let Some(job_type) = job_type {
             api_req
                 .query_params
-                .insert("job_type".to_string(), job_type);
+                .insert("job_type", job_type);
         }
 
         if let Some(location) = location {
             api_req
                 .query_params
-                .insert("location".to_string(), location);
+                .insert("location", location);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -490,45 +488,43 @@ impl WebsiteService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(job_id) = request.job_id {
-            api_req.query_params.insert("job_id".to_string(), job_id);
+            api_req.query_params.insert("job_id", job_id);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(candidate_name) = request.candidate_name {
             api_req
                 .query_params
-                .insert("candidate_name".to_string(), candidate_name);
+                .insert("candidate_name", candidate_name);
         }
 
         if let Some(candidate_email) = request.candidate_email {
             api_req
                 .query_params
-                .insert("candidate_email".to_string(), candidate_email);
+                .insert("candidate_email", candidate_email);
         }
 
         if let Some(apply_start_time) = request.apply_start_time {
             api_req
                 .query_params
-                .insert("apply_start_time".to_string(), apply_start_time);
+                .insert("apply_start_time", apply_start_time);
         }
 
         if let Some(apply_end_time) = request.apply_end_time {
             api_req
                 .query_params
-                .insert("apply_end_time".to_string(), apply_end_time);
+                .insert("apply_end_time", apply_end_time);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -728,19 +724,15 @@ impl WebsiteService {
 
         // 添加查询参数
         if let Some(job_id) = job_id {
-            api_req.query_params.insert("job_id".to_string(), job_id);
+            api_req.query_params.insert("job_id", job_id);
         }
 
         if let Some(start_date) = start_date {
-            api_req
-                .query_params
-                .insert("start_date".to_string(), start_date);
+            api_req.query_params.insert("start_date", start_date);
         }
 
         if let Some(end_date) = end_date {
-            api_req
-                .query_params
-                .insert("end_date".to_string(), end_date);
+            api_req.query_params.insert("end_date", end_date);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/mod.rs b/src/service/hire/mod.rs
index a080f06..1533e43 100644
--- a/src/service/hire/mod.rs
+++ b/src/service/hire/mod.rs
@@ -94,8 +94,6 @@ pub mod referral_account;
 /// 招聘服务 v1 版本
 pub mod v1;
 
-use std::sync::Arc;
-
 use crate::core::config::Config;
 
 use attachment::AttachmentService;
@@ -166,13 +164,13 @@ impl HireService {
     ///
     /// # 返回值
     /// 配置完成的招聘服务实例，包含所有子服务模块
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            recruitment_config: RecruitmentConfigService::new(Arc::clone(&config)),
-            get_candidates: GetCandidatesService::new(Arc::clone(&config)),
-            candidate_management: CandidateManagementService::new(Arc::clone(&config)),
-            ecological_docking: EcologicalDockingService::new(Arc::clone(&config)),
-            referral_account: ReferralAccountService::new(Arc::clone(&config)),
+            recruitment_config: RecruitmentConfigService::new(config.clone()),
+            get_candidates: GetCandidatesService::new(config.clone()),
+            candidate_management: CandidateManagementService::new(config.clone()),
+            ecological_docking: EcologicalDockingService::new(config.clone()),
+            referral_account: ReferralAccountService::new(config.clone()),
             attachment: AttachmentService::new(config),
         }
     }
diff --git a/src/service/hire/recruitment_config/application.rs b/src/service/hire/recruitment_config/application.rs
index 3644be1..fa41a30 100644
--- a/src/service/hire/recruitment_config/application.rs
+++ b/src/service/hire/recruitment_config/application.rs
@@ -84,19 +84,17 @@ impl ApplicationConfigService {
         if let Some(tag_type) = request.tag_type {
             api_req
                 .query_params
-                .insert("tag_type".to_string(), format!("{tag_type:?}"));
+                .insert("tag_type", format!("{tag_type:?}"));
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -131,19 +129,17 @@ impl ApplicationConfigService {
         if let Some(form_type) = request.form_type {
             api_req
                 .query_params
-                .insert("form_type".to_string(), format!("{form_type:?}"));
+                .insert("form_type", format!("{form_type:?}"));
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/recruitment_config/auth/mod.rs b/src/service/hire/recruitment_config/auth/mod.rs
index 1fdefcb..81b1803 100644
--- a/src/service/hire/recruitment_config/auth/mod.rs
+++ b/src/service/hire/recruitment_config/auth/mod.rs
@@ -136,13 +136,11 @@ impl AuthService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/recruitment_config/interview_settings/mod.rs b/src/service/hire/recruitment_config/interview_settings/mod.rs
index 2cc05af..04fd57c 100644
--- a/src/service/hire/recruitment_config/interview_settings/mod.rs
+++ b/src/service/hire/recruitment_config/interview_settings/mod.rs
@@ -387,23 +387,21 @@ impl InterviewSettingsService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(interview_type) = request.interview_type {
             api_req
                 .query_params
-                .insert("interview_type".to_string(), interview_type);
+                .insert("interview_type", interview_type);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/recruitment_config/job/mod.rs b/src/service/hire/recruitment_config/job/mod.rs
index b60f69c..f3b0f66 100644
--- a/src/service/hire/recruitment_config/job/mod.rs
+++ b/src/service/hire/recruitment_config/job/mod.rs
@@ -291,41 +291,37 @@ impl JobService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(department_id) = request.department_id {
-            api_req
-                .query_params
-                .insert("department_id".to_string(), department_id);
+            api_req.query_params.insert("department_id", department_id);
         }
 
         if let Some(job_type) = request.job_type {
             api_req
                 .query_params
-                .insert("job_type".to_string(), job_type);
+                .insert("job_type", job_type);
         }
 
         if let Some(created_start_time) = request.created_start_time {
             api_req
                 .query_params
-                .insert("created_start_time".to_string(), created_start_time);
+                .insert("created_start_time", created_start_time);
         }
 
         if let Some(created_end_time) = request.created_end_time {
             api_req
                 .query_params
-                .insert("created_end_time".to_string(), created_end_time);
+                .insert("created_end_time", created_end_time);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/recruitment_config/job_process/mod.rs b/src/service/hire/recruitment_config/job_process/mod.rs
index 15bd937..2eff467 100644
--- a/src/service/hire/recruitment_config/job_process/mod.rs
+++ b/src/service/hire/recruitment_config/job_process/mod.rs
@@ -363,23 +363,21 @@ impl JobProcessService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(process_type) = request.process_type {
             api_req
                 .query_params
-                .insert("process_type".to_string(), process_type);
+                .insert("process_type", process_type);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/recruitment_config/job_requirement/mod.rs b/src/service/hire/recruitment_config/job_requirement/mod.rs
index da6b262..f9c251e 100644
--- a/src/service/hire/recruitment_config/job_requirement/mod.rs
+++ b/src/service/hire/recruitment_config/job_requirement/mod.rs
@@ -241,21 +241,19 @@ impl JobRequirementService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(job_id) = request.job_id {
-            api_req.query_params.insert("job_id".to_string(), job_id);
+            api_req.query_params.insert("job_id", job_id);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/recruitment_config/location/mod.rs b/src/service/hire/recruitment_config/location/mod.rs
index ab77d92..e2829b7 100644
--- a/src/service/hire/recruitment_config/location/mod.rs
+++ b/src/service/hire/recruitment_config/location/mod.rs
@@ -83,25 +83,21 @@ impl LocationService {
         if let Some(location_type) = request.location_type {
             api_req
                 .query_params
-                .insert("location_type".to_string(), location_type);
+                .insert("location_type", location_type);
         }
 
         if let Some(parent_id) = request.parent_id {
-            api_req
-                .query_params
-                .insert("parent_id".to_string(), parent_id);
+            api_req.query_params.insert("parent_id", parent_id);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/recruitment_config/offer_settings/mod.rs b/src/service/hire/recruitment_config/offer_settings/mod.rs
index bdbb3ad..bfa067c 100644
--- a/src/service/hire/recruitment_config/offer_settings/mod.rs
+++ b/src/service/hire/recruitment_config/offer_settings/mod.rs
@@ -418,23 +418,21 @@ impl OfferSettingsService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(job_type) = request.job_type {
             api_req
                 .query_params
-                .insert("job_type".to_string(), job_type);
+                .insert("job_type", job_type);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/recruitment_config/subject/mod.rs b/src/service/hire/recruitment_config/subject/mod.rs
index b78b90c..f4740a3 100644
--- a/src/service/hire/recruitment_config/subject/mod.rs
+++ b/src/service/hire/recruitment_config/subject/mod.rs
@@ -322,29 +322,27 @@ impl SubjectService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(subject_type) = request.subject_type {
             api_req
                 .query_params
-                .insert("subject_type".to_string(), subject_type);
+                .insert("subject_type", subject_type);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(owner_id) = request.owner_id {
             api_req
                 .query_params
-                .insert("owner_id".to_string(), owner_id);
+                .insert("owner_id", owner_id);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/hire/referral_account/mod.rs b/src/service/hire/referral_account/mod.rs
index 1cc4a04..3c317ac 100644
--- a/src/service/hire/referral_account/mod.rs
+++ b/src/service/hire/referral_account/mod.rs
@@ -7,7 +7,9 @@ use crate::{
         api_resp::{ApiResponseTrait, BaseResponse, ResponseFormat},
         config::Config,
         constants::AccessTokenType,
+        endpoints::Endpoints,
         http::Transport,
+        query_params::QueryParams,
         req_option::RequestOption,
         SDKResult,
     },
@@ -322,7 +324,7 @@ impl ReferralAccountService {
     ) -> SDKResult<BaseResponse<ReferralAccountOperationResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/hire/v1/referral_accounts".to_string(),
+            api_path: Endpoints::HIRE_REFERRAL_ACCOUNTS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: serde_json::to_vec(&request).unwrap_or_default(),
             ..Default::default()
@@ -380,7 +382,7 @@ impl ReferralAccountService {
     ) -> SDKResult<BaseResponse<ReferralAccountListResponse>> {
         let mut api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/hire/v1/referral_accounts".to_string(),
+            api_path: Endpoints::HIRE_REFERRAL_ACCOUNTS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: vec![],
             ..Default::default()
@@ -390,21 +392,21 @@ impl ReferralAccountService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert(QueryParams::PAGE_SIZE, page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
             api_req
                 .query_params
-                .insert("page_token".to_string(), page_token);
+                .insert(QueryParams::PAGE_TOKEN, page_token);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert(QueryParams::STATUS, status);
         }
 
         if let Some(user_id) = request.user_id {
-            api_req.query_params.insert("user_id".to_string(), user_id);
+            api_req.query_params.insert(QueryParams::USER_ID, user_id);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -508,7 +510,7 @@ impl ReferralAccountService {
     ) -> SDKResult<BaseResponse<IncomeRecordListResponse>> {
         let mut api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/hire/v1/referral_income_records".to_string(),
+            api_path: Endpoints::HIRE_REFERRAL_INCOME_RECORDS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: vec![],
             ..Default::default()
@@ -518,35 +520,33 @@ impl ReferralAccountService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert(QueryParams::PAGE_SIZE, page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
             api_req
                 .query_params
-                .insert("page_token".to_string(), page_token);
+                .insert(QueryParams::PAGE_TOKEN, page_token);
         }
 
         if let Some(user_id) = request.user_id {
-            api_req.query_params.insert("user_id".to_string(), user_id);
+            api_req.query_params.insert(QueryParams::USER_ID, user_id);
         }
 
         if let Some(income_type) = request.income_type {
             api_req
                 .query_params
-                .insert("income_type".to_string(), income_type);
+                .insert(QueryParams::INCOME_TYPE, income_type);
         }
 
         if let Some(start_time) = request.start_time {
             api_req
                 .query_params
-                .insert("start_time".to_string(), start_time);
+                .insert(QueryParams::START_TIME, start_time);
         }
 
         if let Some(end_time) = request.end_time {
-            api_req
-                .query_params
-                .insert("end_time".to_string(), end_time);
+            api_req.query_params.insert(QueryParams::END_TIME, end_time);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -604,7 +604,7 @@ impl ReferralAccountService {
     ) -> SDKResult<BaseResponse<ReferralAccountOperationResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/hire/v1/referral_withdrawals".to_string(),
+            api_path: Endpoints::HIRE_REFERRAL_WITHDRAWALS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: serde_json::to_vec(&request).unwrap_or_default(),
             ..Default::default()
@@ -666,7 +666,7 @@ impl ReferralAccountService {
     ) -> SDKResult<BaseResponse<WithdrawalRecordListResponse>> {
         let mut api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/hire/v1/referral_withdrawals".to_string(),
+            api_path: Endpoints::HIRE_REFERRAL_WITHDRAWALS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: vec![],
             ..Default::default()
@@ -676,33 +676,31 @@ impl ReferralAccountService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert(QueryParams::PAGE_SIZE, page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
             api_req
                 .query_params
-                .insert("page_token".to_string(), page_token);
+                .insert(QueryParams::PAGE_TOKEN, page_token);
         }
 
         if let Some(user_id) = request.user_id {
-            api_req.query_params.insert("user_id".to_string(), user_id);
+            api_req.query_params.insert(QueryParams::USER_ID, user_id);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert(QueryParams::STATUS, status);
         }
 
         if let Some(start_time) = request.start_time {
             api_req
                 .query_params
-                .insert("start_time".to_string(), start_time);
+                .insert(QueryParams::START_TIME, start_time);
         }
 
         if let Some(end_time) = request.end_time {
-            api_req
-                .query_params
-                .insert("end_time".to_string(), end_time);
+            api_req.query_params.insert(QueryParams::END_TIME, end_time);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -868,7 +866,7 @@ impl ReferralAccountService {
     ) -> SDKResult<BaseResponse<serde_json::Value>> {
         let mut api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/hire/v1/referral_statistics".to_string(),
+            api_path: Endpoints::HIRE_REFERRAL_STATISTICS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant],
             body: vec![],
             ..Default::default()
@@ -878,13 +876,11 @@ impl ReferralAccountService {
         if let Some(start_date) = start_date {
             api_req
                 .query_params
-                .insert("start_date".to_string(), start_date);
+                .insert(QueryParams::START_DATE, start_date);
         }
 
         if let Some(end_date) = end_date {
-            api_req
-                .query_params
-                .insert("end_date".to_string(), end_date);
+            api_req.query_params.insert(QueryParams::END_DATE, end_date);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/im/mod.rs b/src/service/im/mod.rs
index 91356db..2efb58c 100644
--- a/src/service/im/mod.rs
+++ b/src/service/im/mod.rs
@@ -40,8 +40,6 @@
 //! // let result = client.im.v1.message.create(request, None).await?;
 //! ```
 
-use std::sync::Arc;
-
 use crate::{
     core::config::Config,
     service::im::{v1::V1, v2::V2},
@@ -68,10 +66,10 @@ impl ImService {
     ///
     /// # 参数
     /// - `config`: 客户端配置
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            v1: V1::new((*config).clone()),
-            v2: V2::new((*config).clone()),
+            v1: V1::new(config.clone()),
+            v2: V2::new(config.clone()),
         }
     }
 }
diff --git a/src/service/im/v1.rs b/src/service/im/v1.rs
index 6195ec4..d3bb6a6 100644
--- a/src/service/im/v1.rs
+++ b/src/service/im/v1.rs
@@ -1,5 +1,3 @@
-use std::sync::Arc;
-
 use crate::{
     core::config::Config,
     service::im::v1::{
@@ -45,24 +43,24 @@ pub struct V1 {
 }
 
 impl V1 {
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
             // 现有服务
             chats: ChatsService {
-                config: Arc::clone(&config),
+                config: config.clone(),
             },
             message: MessageService {
-                config: Arc::clone(&config),
+                config: config.clone(),
             },
 
             // 新增服务
-            batch_message: BatchMessageService::new(Arc::clone(&config)),
-            image: ImageService::new(Arc::clone(&config)),
-            file: FileService::new(Arc::clone(&config)),
-            message_reaction: MessageReactionService::new(Arc::clone(&config)),
-            pin: PinService::new(Arc::clone(&config)),
-            message_card: MessageCardService::new(Arc::clone(&config)),
-            buzz_messages: BuzzMessagesService::new(Arc::clone(&config)),
+            batch_message: BatchMessageService::new(config.clone()),
+            image: ImageService::new(config.clone()),
+            file: FileService::new(config.clone()),
+            message_reaction: MessageReactionService::new(config.clone()),
+            pin: PinService::new(config.clone()),
+            message_card: MessageCardService::new(config.clone()),
+            buzz_messages: BuzzMessagesService::new(config.clone()),
             url_preview: UrlPreviewService::new(config),
         }
     }
diff --git a/src/service/im/v1/batch_message/mod.rs b/src/service/im/v1/batch_message/mod.rs
index e72068b..28fd697 100644
--- a/src/service/im/v1/batch_message/mod.rs
+++ b/src/service/im/v1/batch_message/mod.rs
@@ -125,7 +125,7 @@ impl BatchMessageService {
             api_path: "/open-apis/im/v1/batch_messages".to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             query_params: HashMap::from([(
-                "receive_id_type".to_string(),
+                "receive_id_type",
                 receive_id_type.as_str().to_string(),
             )]),
             body: serde_json::to_vec(&request)?,
@@ -184,16 +184,13 @@ impl BatchMessageService {
     ) -> SDKResult<GetBatchReadUserResponse> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/im/v1/buzz_messages/mod.rs b/src/service/im/v1/buzz_messages/mod.rs
index 3720c52..16d71d8 100644
--- a/src/service/im/v1/buzz_messages/mod.rs
+++ b/src/service/im/v1/buzz_messages/mod.rs
@@ -72,10 +72,7 @@ impl BuzzMessagesService {
             http_method: Method::PATCH,
             api_path: format!("/open-apis/im/v1/messages/{message_id}/urgent_app"),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
-            query_params: HashMap::from([(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            )]),
+            query_params: HashMap::from([("user_id_type", user_id_type.as_str().to_string())]),
             body: serde_json::to_vec(&request)?,
             ..Default::default()
         };
@@ -97,10 +94,7 @@ impl BuzzMessagesService {
             http_method: Method::PATCH,
             api_path: format!("/open-apis/im/v1/messages/{message_id}/urgent_sms"),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
-            query_params: HashMap::from([(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            )]),
+            query_params: HashMap::from([("user_id_type", user_id_type.as_str().to_string())]),
             body: serde_json::to_vec(&request)?,
             ..Default::default()
         };
@@ -122,10 +116,7 @@ impl BuzzMessagesService {
             http_method: Method::PATCH,
             api_path: format!("/open-apis/im/v1/messages/{message_id}/urgent_phone"),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
-            query_params: HashMap::from([(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            )]),
+            query_params: HashMap::from([("user_id_type", user_id_type.as_str().to_string())]),
             body: serde_json::to_vec(&request)?,
             ..Default::default()
         };
diff --git a/src/service/im/v1/chats.rs b/src/service/im/v1/chats.rs
index ccd1bea..fac7a89 100644
--- a/src/service/im/v1/chats.rs
+++ b/src/service/im/v1/chats.rs
@@ -1,5 +1,3 @@
-use std::sync::Arc;
-
 use reqwest::Method;
 use serde::{Deserialize, Serialize};
 
@@ -15,7 +13,7 @@ use crate::core::{
 };
 
 pub struct ChatsService {
-    pub config: Arc<Config>,
+    pub config: Config,
 }
 
 impl ChatsService {
@@ -74,7 +72,7 @@ impl ListChatIterator<'_> {
                     self.request
                         .api_req
                         .query_params
-                        .insert("page_token".to_string(), data.page_token.to_string());
+                        .insert("page_token", data.page_token.to_string());
                     Some(data.items)
                 } else if data.items.is_empty() {
                     None
@@ -109,7 +107,7 @@ impl ListChatRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("user_id_type".to_string(), user_id_type.to_string());
+            .insert("user_id_type", user_id_type.to_string());
         self
     }
 
@@ -118,7 +116,7 @@ impl ListChatRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("sort_type".to_string(), sort_type.to_string());
+            .insert("sort_type", sort_type.to_string());
         self
     }
 
@@ -130,7 +128,7 @@ impl ListChatRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("page_token".to_string(), page_token.to_string());
+            .insert("page_token", page_token.to_string());
         self
     }
 
@@ -139,7 +137,7 @@ impl ListChatRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("page_size".to_string(), page_size.to_string());
+            .insert("page_size", page_size.to_string());
         self
     }
 
diff --git a/src/service/im/v1/file/mod.rs b/src/service/im/v1/file/mod.rs
index 8cf5f5d..4c76789 100644
--- a/src/service/im/v1/file/mod.rs
+++ b/src/service/im/v1/file/mod.rs
@@ -62,8 +62,8 @@ impl FileService {
         option: Option<RequestOption>,
     ) -> SDKResult<CreateFileResponse> {
         let mut query_params = HashMap::new();
-        query_params.insert("file_type".to_string(), file_type.to_string());
-        query_params.insert("file_name".to_string(), file_name.to_string());
+        query_params.insert("file_type", file_type.to_string());
+        query_params.insert("file_name", file_name.to_string());
 
         let api_req = ApiRequest {
             http_method: Method::POST,
diff --git a/src/service/im/v1/image/mod.rs b/src/service/im/v1/image/mod.rs
index cb5630b..1b5228d 100644
--- a/src/service/im/v1/image/mod.rs
+++ b/src/service/im/v1/image/mod.rs
@@ -62,7 +62,7 @@ impl ImageService {
             http_method: Method::POST,
             api_path: "/open-apis/im/v1/images".to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
-            query_params: HashMap::from([("image_type".to_string(), image_type.to_string())]),
+            query_params: HashMap::from([("image_type", image_type.to_string())]),
             body: image_data,
             ..Default::default()
         };
diff --git a/src/service/im/v1/message/builders.rs b/src/service/im/v1/message/builders.rs
index 0d28cbe..985fec2 100644
--- a/src/service/im/v1/message/builders.rs
+++ b/src/service/im/v1/message/builders.rs
@@ -40,7 +40,7 @@ impl CreateMessageRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("receive_id".to_string(), receive_id.to_string());
+            .insert("receive_id", receive_id.to_string());
         self
     }
 
@@ -52,7 +52,7 @@ impl CreateMessageRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("msg_type".to_string(), msg_type.to_string());
+            .insert("msg_type", msg_type.to_string());
         self
     }
 
@@ -64,7 +64,7 @@ impl CreateMessageRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("content".to_string(), content.to_string());
+            .insert("content", content.to_string());
         self
     }
 
@@ -81,7 +81,7 @@ impl CreateMessageRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("receive_id_type".to_string(), receive_id_type.to_string());
+            .insert("receive_id_type", receive_id_type.to_string());
         self
     }
 
@@ -268,7 +268,7 @@ impl UpdateMessageRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("content".to_string(), content.to_string());
+            .insert("content", content.to_string());
         self
     }
 
@@ -284,16 +284,12 @@ impl CreateMessageRequest {
         let mut api_req = ApiRequest::default();
         api_req
             .query_params
-            .insert("receive_id".to_string(), receive_id.to_string());
+            .insert("receive_id", receive_id.to_string());
+        api_req.query_params.insert("msg_type", msg.msg_type());
+        api_req.query_params.insert("content", msg.content());
         api_req
             .query_params
-            .insert("msg_type".to_string(), msg.msg_type());
-        api_req
-            .query_params
-            .insert("content".to_string(), msg.content());
-        api_req
-            .query_params
-            .insert("receive_id_type".to_string(), receive_id_type.to_string());
+            .insert("receive_id_type", receive_id_type.to_string());
 
         Self { api_req }
     }
diff --git a/src/service/im/v1/message/list.rs b/src/service/im/v1/message/list.rs
index b4177f2..166358e 100644
--- a/src/service/im/v1/message/list.rs
+++ b/src/service/im/v1/message/list.rs
@@ -39,10 +39,10 @@ impl ListMessageRequestBuilder {
     ///
     /// 示例值：chat
     pub fn container_id_type(mut self, container_id_type: impl ToString) -> Self {
-        self.request.api_req.query_params.insert(
-            "container_id_type".to_string(),
-            container_id_type.to_string(),
-        );
+        self.request
+            .api_req
+            .query_params
+            .insert("container_id_type", container_id_type.to_string());
         self
     }
 
@@ -53,7 +53,7 @@ impl ListMessageRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("container_id".to_string(), container_id.to_string());
+            .insert("container_id", container_id.to_string());
         self
     }
 
@@ -64,7 +64,7 @@ impl ListMessageRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("start_time".to_string(), start_time.to_string());
+            .insert("start_time", start_time.to_string());
         self
     }
 
@@ -75,7 +75,7 @@ impl ListMessageRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("end_time".to_string(), end_time.to_string());
+            .insert("end_time", end_time.to_string());
         self
     }
 
@@ -86,7 +86,7 @@ impl ListMessageRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("sort_type".to_string(), sort_type.to_string());
+            .insert("sort_type", sort_type.to_string());
         self
     }
 
@@ -96,7 +96,7 @@ impl ListMessageRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("page_token".to_string(), page_token.to_string());
+            .insert("page_token", page_token.to_string());
         self
     }
 
@@ -122,7 +122,7 @@ impl ListMessageRequestBuilder {
         self.request
             .api_req
             .query_params
-            .insert("page_size".to_string(), page_size.to_string());
+            .insert("page_size", page_size.to_string());
         self
     }
 
diff --git a/src/service/im/v1/message/types.rs b/src/service/im/v1/message/types.rs
index f3bd8e5..db20f3d 100644
--- a/src/service/im/v1/message/types.rs
+++ b/src/service/im/v1/message/types.rs
@@ -189,7 +189,7 @@ impl<'a> ListMessageIterator<'a> {
     // FUTURE: 实现异步迭代器或流式处理分页结果
     // 标准 Iterator trait 不支持异步，可考虑：
     // 1. 使用 futures::Stream trait
-    // 2. 使用 async-stream crate 
+    // 2. 使用 async-stream crate
     // 3. 实现自定义的 AsyncIterator trait
 }
 
diff --git a/src/service/im/v1/message_reaction/mod.rs b/src/service/im/v1/message_reaction/mod.rs
index 4b413c2..bcc81ac 100644
--- a/src/service/im/v1/message_reaction/mod.rs
+++ b/src/service/im/v1/message_reaction/mod.rs
@@ -59,10 +59,7 @@ impl MessageReactionService {
     ) -> SDKResult<EmptyResponse> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -92,16 +89,13 @@ impl MessageReactionService {
     ) -> SDKResult<ListReactionResponse> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
 
         let api_req = ApiRequest {
@@ -127,10 +121,7 @@ impl MessageReactionService {
     ) -> SDKResult<EmptyResponse> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/im/v1/message_service.rs b/src/service/im/v1/message_service.rs
index d43a12b..a2ebdb5 100644
--- a/src/service/im/v1/message_service.rs
+++ b/src/service/im/v1/message_service.rs
@@ -1,5 +1,3 @@
-use std::sync::Arc;
-
 use crate::core::config::Config;
 
 /// Message service
@@ -10,12 +8,12 @@ use crate::core::config::Config;
 #[derive(Debug, Clone)]
 pub struct MessageService {
     /// Service configuration
-    pub config: Arc<Config>,
+    pub config: Config,
 }
 
 impl MessageService {
     /// Create a new message service instance
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self { config }
     }
 }
diff --git a/src/service/im/v1/pin/mod.rs b/src/service/im/v1/pin/mod.rs
index 38e9167..af13a79 100644
--- a/src/service/im/v1/pin/mod.rs
+++ b/src/service/im/v1/pin/mod.rs
@@ -79,12 +79,9 @@ impl PinService {
         option: Option<RequestOption>,
     ) -> SDKResult<CreatePinResponse> {
         let mut query_params = HashMap::new();
-        query_params.insert("message_id".to_string(), message_id.to_string());
+        query_params.insert("message_id", message_id.to_string());
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -108,10 +105,7 @@ impl PinService {
         option: Option<RequestOption>,
     ) -> SDKResult<EmptyResponse> {
         let query_params = if let Some(user_id_type) = user_id_type {
-            HashMap::from([(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            )])
+            HashMap::from([("user_id_type", user_id_type.as_str().to_string())])
         } else {
             HashMap::new()
         };
@@ -139,18 +133,15 @@ impl PinService {
         option: Option<RequestOption>,
     ) -> SDKResult<ListPinResponse> {
         let mut query_params = HashMap::new();
-        query_params.insert("chat_id".to_string(), chat_id.to_string());
+        query_params.insert("chat_id", chat_id.to_string());
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/im/v2/groups_bots/mod.rs b/src/service/im/v2/groups_bots/mod.rs
index 80f6844..d1bd891 100644
--- a/src/service/im/v2/groups_bots/mod.rs
+++ b/src/service/im/v2/groups_bots/mod.rs
@@ -122,7 +122,7 @@ impl GroupsBotsService {
             api_path: "/open-apis/im/v2/groups-bots/bot_time_sentive".to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             query_params: HashMap::from([(
-                "receive_id_type".to_string(),
+                "receive_id_type",
                 receive_id_type.as_str().to_string(),
             )]),
             body: serde_json::to_vec(&request)?,
@@ -162,7 +162,7 @@ impl GroupsBotsService {
             api_path: "/open-apis/im/v2/groups-bots/patch".to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             query_params: HashMap::from([(
-                "receive_id_type".to_string(),
+                "receive_id_type",
                 receive_id_type.as_str().to_string(),
             )]),
             body: serde_json::to_vec(&request)?,
diff --git a/src/service/im/v2/mod.rs b/src/service/im/v2/mod.rs
index 19ddf10..f2a6323 100644
--- a/src/service/im/v2/mod.rs
+++ b/src/service/im/v2/mod.rs
@@ -1,5 +1,3 @@
-use std::sync::Arc;
-
 use crate::core::config::Config;
 
 pub mod app_feed_card;
@@ -18,9 +16,9 @@ pub struct V2 {
 }
 
 impl V2 {
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            app_feed_card: AppFeedCardService::new(Arc::clone(&config)),
+            app_feed_card: AppFeedCardService::new(config.clone()),
             groups_bots: GroupsBotsService::new(config),
         }
     }
diff --git a/src/service/lingo/classification/mod.rs b/src/service/lingo/classification/mod.rs
index aeea958..b42327d 100644
--- a/src/service/lingo/classification/mod.rs
+++ b/src/service/lingo/classification/mod.rs
@@ -52,19 +52,17 @@ impl ClassificationService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(repo_id) = request.repo_id {
-            api_req.query_params.insert("repo_id".to_string(), repo_id);
+            api_req.query_params.insert("repo_id", repo_id);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/lingo/entity/mod.rs b/src/service/lingo/entity/mod.rs
index ad61cf5..5aab4ae 100644
--- a/src/service/lingo/entity/mod.rs
+++ b/src/service/lingo/entity/mod.rs
@@ -169,29 +169,27 @@ impl EntityService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(repo_id) = request.repo_id {
-            api_req.query_params.insert("repo_id".to_string(), repo_id);
+            api_req.query_params.insert("repo_id", repo_id);
         }
 
         if let Some(classification_id) = request.classification_id {
             api_req
                 .query_params
-                .insert("classification_id".to_string(), classification_id);
+                .insert("classification_id", classification_id);
         }
 
         if let Some(creator) = request.creator {
-            api_req.query_params.insert("creator".to_string(), creator);
+            api_req.query_params.insert("creator", creator);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/lingo/repo/mod.rs b/src/service/lingo/repo/mod.rs
index e602ebd..b9817cf 100644
--- a/src/service/lingo/repo/mod.rs
+++ b/src/service/lingo/repo/mod.rs
@@ -52,15 +52,13 @@ impl RepoService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/mail/v1/attachment/mod.rs b/src/service/mail/v1/attachment/mod.rs
index c6ff332..80938e0 100644
--- a/src/service/mail/v1/attachment/mod.rs
+++ b/src/service/mail/v1/attachment/mod.rs
@@ -68,10 +68,7 @@ impl AttachmentService {
     ) -> SDKResult<BaseResponse<GetAttachmentDownloadUrlResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/mail/v1/contact/mod.rs b/src/service/mail/v1/contact/mod.rs
index 14a5899..110cc63 100644
--- a/src/service/mail/v1/contact/mod.rs
+++ b/src/service/mail/v1/contact/mod.rs
@@ -106,10 +106,7 @@ impl ContactService {
     ) -> SDKResult<BaseResponse<CreateContactResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -134,10 +131,7 @@ impl ContactService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -164,10 +158,7 @@ impl ContactService {
     ) -> SDKResult<BaseResponse<UpdateContactResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -195,16 +186,13 @@ impl ContactService {
     ) -> SDKResult<BaseResponse<ListContactsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/mail/v1/event/mod.rs b/src/service/mail/v1/event/mod.rs
index 1b779d0..f7e2ae0 100644
--- a/src/service/mail/v1/event/mod.rs
+++ b/src/service/mail/v1/event/mod.rs
@@ -70,10 +70,7 @@ impl EventService {
     ) -> SDKResult<BaseResponse<SubscribeEventResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -99,10 +96,7 @@ impl EventService {
     ) -> SDKResult<BaseResponse<GetSubscriptionResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -127,10 +121,7 @@ impl EventService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/mail/v1/folder/mod.rs b/src/service/mail/v1/folder/mod.rs
index 11e520f..3b352e8 100644
--- a/src/service/mail/v1/folder/mod.rs
+++ b/src/service/mail/v1/folder/mod.rs
@@ -116,10 +116,7 @@ impl FolderService {
     ) -> SDKResult<BaseResponse<CreateFolderResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -159,10 +156,7 @@ impl FolderService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -205,10 +199,7 @@ impl FolderService {
     ) -> SDKResult<BaseResponse<UpdateFolderResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -252,16 +243,13 @@ impl FolderService {
     ) -> SDKResult<BaseResponse<ListFoldersResponse>> {
         let mut query_params = HashMap::new();
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/mail/v1/mail_group/mod.rs b/src/service/mail/v1/mail_group/mod.rs
index fe306d3..321e2dd 100644
--- a/src/service/mail/v1/mail_group/mod.rs
+++ b/src/service/mail/v1/mail_group/mod.rs
@@ -121,10 +121,7 @@ impl MailGroupService {
     ) -> SDKResult<BaseResponse<CreateMailGroupResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -148,10 +145,7 @@ impl MailGroupService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -175,10 +169,7 @@ impl MailGroupService {
     ) -> SDKResult<BaseResponse<UpdateMailGroupResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -203,10 +194,7 @@ impl MailGroupService {
     ) -> SDKResult<BaseResponse<UpdateMailGroupResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -230,10 +218,7 @@ impl MailGroupService {
     ) -> SDKResult<BaseResponse<GetMailGroupResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -257,16 +242,13 @@ impl MailGroupService {
     ) -> SDKResult<BaseResponse<ListMailGroupsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/mail/v1/mail_group_manager/mod.rs b/src/service/mail/v1/mail_group_manager/mod.rs
index 5d5616a..851a207 100644
--- a/src/service/mail/v1/mail_group_manager/mod.rs
+++ b/src/service/mail/v1/mail_group_manager/mod.rs
@@ -81,10 +81,7 @@ impl MailGroupManagerService {
     ) -> SDKResult<BaseResponse<BatchCreateManagersResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -109,10 +106,7 @@ impl MailGroupManagerService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -138,16 +132,13 @@ impl MailGroupManagerService {
     ) -> SDKResult<BaseResponse<ListManagersResponse>> {
         let mut query_params = HashMap::new();
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/mail/v1/message/mod.rs b/src/service/mail/v1/message/mod.rs
index 56ce44d..e81da14 100644
--- a/src/service/mail/v1/message/mod.rs
+++ b/src/service/mail/v1/message/mod.rs
@@ -134,10 +134,7 @@ impl MessageService {
     ) -> SDKResult<BaseResponse<SendMessageResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -177,10 +174,7 @@ impl MessageService {
     ) -> SDKResult<BaseResponse<GetMessageResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -225,19 +219,16 @@ impl MessageService {
     ) -> SDKResult<BaseResponse<ListMessagesResponse>> {
         let mut query_params = HashMap::new();
         if let Some(folder_id) = folder_id {
-            query_params.insert("folder_id".to_string(), folder_id);
+            query_params.insert("folder_id", folder_id);
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -279,18 +270,15 @@ impl MessageService {
         option: Option<RequestOption>,
     ) -> SDKResult<BaseResponse<GetMessagesByCardResponse>> {
         let mut query_params = HashMap::new();
-        query_params.insert("card_id".to_string(), card_id.to_string());
+        query_params.insert("card_id", card_id.to_string());
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/mail/v1/rule/mod.rs b/src/service/mail/v1/rule/mod.rs
index a66f431..47e2322 100644
--- a/src/service/mail/v1/rule/mod.rs
+++ b/src/service/mail/v1/rule/mod.rs
@@ -118,10 +118,7 @@ impl RuleService {
     ) -> SDKResult<BaseResponse<CreateRuleResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -146,10 +143,7 @@ impl RuleService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -176,10 +170,7 @@ impl RuleService {
     ) -> SDKResult<BaseResponse<UpdateRuleResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -207,16 +198,13 @@ impl RuleService {
     ) -> SDKResult<BaseResponse<ListRulesResponse>> {
         let mut query_params = HashMap::new();
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -240,10 +228,7 @@ impl RuleService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/mdm/country_region/mod.rs b/src/service/mdm/country_region/mod.rs
index 584b8ec..0ed5b5e 100644
--- a/src/service/mdm/country_region/mod.rs
+++ b/src/service/mdm/country_region/mod.rs
@@ -80,29 +80,27 @@ impl CountryRegionService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(region_type) = request.region_type {
             api_req
                 .query_params
-                .insert("region_type".to_string(), region_type);
+                .insert("region_type", region_type);
         }
 
         if let Some(name) = request.name {
-            api_req.query_params.insert("name".to_string(), name);
+            api_req.query_params.insert("name", name);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/minutes/v1/media/mod.rs b/src/service/minutes/v1/media/mod.rs
index 2b7de34..7e276ca 100644
--- a/src/service/minutes/v1/media/mod.rs
+++ b/src/service/minutes/v1/media/mod.rs
@@ -47,10 +47,7 @@ impl MediaService {
     ) -> SDKResult<BaseResponse<GetMediaResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/minutes/v1/minute/mod.rs b/src/service/minutes/v1/minute/mod.rs
index 0365c89..9b9768c 100644
--- a/src/service/minutes/v1/minute/mod.rs
+++ b/src/service/minutes/v1/minute/mod.rs
@@ -47,10 +47,7 @@ impl MinuteService {
     ) -> SDKResult<BaseResponse<GetMinuteResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/minutes/v1/statistics/mod.rs b/src/service/minutes/v1/statistics/mod.rs
index ccd3723..de9cf91 100644
--- a/src/service/minutes/v1/statistics/mod.rs
+++ b/src/service/minutes/v1/statistics/mod.rs
@@ -47,10 +47,7 @@ impl StatisticsService {
     ) -> SDKResult<BaseResponse<GetStatisticsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/minutes/v1/transcript/mod.rs b/src/service/minutes/v1/transcript/mod.rs
index 501d714..8d1fa69 100644
--- a/src/service/minutes/v1/transcript/mod.rs
+++ b/src/service/minutes/v1/transcript/mod.rs
@@ -47,10 +47,7 @@ impl TranscriptService {
     ) -> SDKResult<BaseResponse<GetTranscriptResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/moments/post/mod.rs b/src/service/moments/post/mod.rs
index 58ece6b..c009a2a 100644
--- a/src/service/moments/post/mod.rs
+++ b/src/service/moments/post/mod.rs
@@ -70,9 +70,7 @@ impl PostService {
 
         // 添加查询参数
         if let Some(user_id_type) = request.user_id_type {
-            api_req
-                .query_params
-                .insert("user_id_type".to_string(), user_id_type);
+            api_req.query_params.insert("user_id_type", user_id_type);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/okr/mod.rs b/src/service/okr/mod.rs
index 2a8ffd2..97be14e 100644
--- a/src/service/okr/mod.rs
+++ b/src/service/okr/mod.rs
@@ -105,8 +105,6 @@ pub mod progress_record;
 /// 复盘管理功能
 pub mod review;
 
-use std::sync::Arc;
-
 use crate::core::config::Config;
 
 use okr::OkrContentService;
@@ -215,12 +213,12 @@ pub struct OkrService {
 }
 
 impl OkrService {
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            period: PeriodService::new(Arc::clone(&config)),
-            period_rule: PeriodRuleService::new(Arc::clone(&config)),
-            okr: OkrContentService::new(Arc::clone(&config)),
-            progress_record: ProgressRecordService::new(Arc::clone(&config)),
+            period: PeriodService::new(config.clone()),
+            period_rule: PeriodRuleService::new(config.clone()),
+            okr: OkrContentService::new(config.clone()),
+            progress_record: ProgressRecordService::new(config.clone()),
             review: ReviewService::new(config),
         }
     }
diff --git a/src/service/okr/okr/mod.rs b/src/service/okr/okr/mod.rs
index 04d3f74..127f99a 100644
--- a/src/service/okr/okr/mod.rs
+++ b/src/service/okr/okr/mod.rs
@@ -114,31 +114,27 @@ impl OkrContentService {
 
         // 添加查询参数
         if let Some(user_id) = request.user_id {
-            api_req.query_params.insert("user_id".to_string(), user_id);
+            api_req.query_params.insert("user_id", user_id);
         }
 
         if let Some(period_id) = request.period_id {
             api_req
                 .query_params
-                .insert("period_id".to_string(), period_id);
+                .insert("period_id", period_id);
         }
 
         if let Some(status) = request.status {
-            api_req
-                .query_params
-                .insert("status".to_string(), format!("{status:?}"));
+            api_req.query_params.insert("status", format!("{status:?}"));
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/okr/period/mod.rs b/src/service/okr/period/mod.rs
index 0dafb3a..8b96b2b 100644
--- a/src/service/okr/period/mod.rs
+++ b/src/service/okr/period/mod.rs
@@ -180,21 +180,17 @@ impl PeriodService {
 
         // 添加查询参数
         if let Some(status) = request.status {
-            api_req
-                .query_params
-                .insert("status".to_string(), format!("{status:?}"));
+            api_req.query_params.insert("status", format!("{status:?}"));
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/okr/period_rule/mod.rs b/src/service/okr/period_rule/mod.rs
index 866cc35..d6ccbab 100644
--- a/src/service/okr/period_rule/mod.rs
+++ b/src/service/okr/period_rule/mod.rs
@@ -96,25 +96,21 @@ impl PeriodRuleService {
         if let Some(period_id) = request.period_id {
             api_req
                 .query_params
-                .insert("period_id".to_string(), period_id);
+                .insert("period_id", period_id);
         }
 
         if let Some(rule_type) = request.rule_type {
-            api_req
-                .query_params
-                .insert("rule_type".to_string(), rule_type);
+            api_req.query_params.insert("rule_type", rule_type);
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/okr/review/mod.rs b/src/service/okr/review/mod.rs
index f000b4b..a02b313 100644
--- a/src/service/okr/review/mod.rs
+++ b/src/service/okr/review/mod.rs
@@ -99,39 +99,37 @@ impl ReviewService {
         if let Some(period_id) = request.period_id {
             api_req
                 .query_params
-                .insert("period_id".to_string(), period_id);
+                .insert("period_id", period_id);
         }
 
         if let Some(user_id) = request.user_id {
-            api_req.query_params.insert("user_id".to_string(), user_id);
+            api_req.query_params.insert("user_id", user_id);
         }
 
         if let Some(okr_id) = request.okr_id {
-            api_req.query_params.insert("okr_id".to_string(), okr_id);
+            api_req.query_params.insert("okr_id", okr_id);
         }
 
         if let Some(min_score) = request.min_score {
             api_req
                 .query_params
-                .insert("min_score".to_string(), min_score.to_string());
+                .insert("min_score", min_score.to_string());
         }
 
         if let Some(max_score) = request.max_score {
             api_req
                 .query_params
-                .insert("max_score".to_string(), max_score.to_string());
+                .insert("max_score", max_score.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/payroll/acct_item/mod.rs b/src/service/payroll/acct_item/mod.rs
index 612ced9..8c75679 100644
--- a/src/service/payroll/acct_item/mod.rs
+++ b/src/service/payroll/acct_item/mod.rs
@@ -96,29 +96,27 @@ impl AcctItemService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(item_type) = request.item_type {
             api_req
                 .query_params
-                .insert("item_type".to_string(), item_type);
+                .insert("item_type", item_type);
         }
 
         if let Some(paygroup_id) = request.paygroup_id {
             api_req
                 .query_params
-                .insert("paygroup_id".to_string(), paygroup_id);
+                .insert("paygroup_id", paygroup_id);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/payroll/cost_allocation_plan/mod.rs b/src/service/payroll/cost_allocation_plan/mod.rs
index 3ee02c7..985df44 100644
--- a/src/service/payroll/cost_allocation_plan/mod.rs
+++ b/src/service/payroll/cost_allocation_plan/mod.rs
@@ -95,23 +95,21 @@ impl CostAllocationPlanService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(plan_type) = request.plan_type {
             api_req
                 .query_params
-                .insert("plan_type".to_string(), plan_type);
+                .insert("plan_type", plan_type);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/payroll/cost_allocation_report/mod.rs b/src/service/payroll/cost_allocation_report/mod.rs
index dab96b8..51b3747 100644
--- a/src/service/payroll/cost_allocation_report/mod.rs
+++ b/src/service/payroll/cost_allocation_report/mod.rs
@@ -100,40 +100,34 @@ impl CostAllocationReportService {
         // 添加查询参数
         api_req
             .query_params
-            .insert("start_date".to_string(), request.start_date);
+            .insert("start_date", request.start_date);
 
-        api_req
-            .query_params
-            .insert("end_date".to_string(), request.end_date);
+        api_req.query_params.insert("end_date", request.end_date);
 
         if let Some(cost_center_id) = request.cost_center_id {
             api_req
                 .query_params
-                .insert("cost_center_id".to_string(), cost_center_id);
+                .insert("cost_center_id", cost_center_id);
         }
 
         if let Some(department_id) = request.department_id {
-            api_req
-                .query_params
-                .insert("department_id".to_string(), department_id);
+            api_req.query_params.insert("department_id", department_id);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(report_type) = request.report_type {
             api_req
                 .query_params
-                .insert("report_type".to_string(), report_type);
+                .insert("report_type", report_type);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/payroll/datasource/mod.rs b/src/service/payroll/datasource/mod.rs
index 64e2f89..d726446 100644
--- a/src/service/payroll/datasource/mod.rs
+++ b/src/service/payroll/datasource/mod.rs
@@ -91,17 +91,15 @@ impl DatasourceService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/payroll/datasource_record/mod.rs b/src/service/payroll/datasource_record/mod.rs
index 7fec10b..07fa35a 100644
--- a/src/service/payroll/datasource_record/mod.rs
+++ b/src/service/payroll/datasource_record/mod.rs
@@ -101,8 +101,8 @@ impl DatasourceRecordService {
     /// use std::collections::HashMap;
     ///
     /// let mut field_values = HashMap::new();
-    /// field_values.insert("base_salary".to_string(), serde_json::Value::Number(serde_json::Number::from(10000)));
-    /// field_values.insert("overtime_hours".to_string(), serde_json::Value::Number(serde_json::Number::from(20)));
+    /// field_values.insert("base_salary", serde_json::Value::Number(serde_json::Number::from(10000)));
+    /// field_values.insert("overtime_hours", serde_json::Value::Number(serde_json::Number::from(20)));
     ///
     /// let record = DatasourceRecord {
     ///     record_id: None,
@@ -141,9 +141,7 @@ impl DatasourceRecordService {
 
         // 添加查询参数
         if let Some(user_id_type) = request.user_id_type {
-            api_req
-                .query_params
-                .insert("user_id_type".to_string(), user_id_type);
+            api_req.query_params.insert("user_id_type", user_id_type);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -212,21 +210,17 @@ impl DatasourceRecordService {
 
         // 添加查询参数
         if let Some(user_id_type) = request.user_id_type {
-            api_req
-                .query_params
-                .insert("user_id_type".to_string(), user_id_type);
+            api_req.query_params.insert("user_id_type", user_id_type);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/payroll/paygroup/mod.rs b/src/service/payroll/paygroup/mod.rs
index 825d40e..4d8c08e 100644
--- a/src/service/payroll/paygroup/mod.rs
+++ b/src/service/payroll/paygroup/mod.rs
@@ -93,17 +93,15 @@ impl PaygroupService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/payroll/payment_activity/mod.rs b/src/service/payroll/payment_activity/mod.rs
index 071983f..e6b8441 100644
--- a/src/service/payroll/payment_activity/mod.rs
+++ b/src/service/payroll/payment_activity/mod.rs
@@ -116,35 +116,33 @@ impl PaymentActivityService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(paygroup_id) = request.paygroup_id {
             api_req
                 .query_params
-                .insert("paygroup_id".to_string(), paygroup_id);
+                .insert("paygroup_id", paygroup_id);
         }
 
         if let Some(period_start) = request.period_start {
             api_req
                 .query_params
-                .insert("period_start".to_string(), period_start);
+                .insert("period_start", period_start);
         }
 
         if let Some(period_end) = request.period_end {
             api_req
                 .query_params
-                .insert("period_end".to_string(), period_end);
+                .insert("period_end", period_end);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/payroll/payment_detail/mod.rs b/src/service/payroll/payment_detail/mod.rs
index 9dc03b7..ea143b2 100644
--- a/src/service/payroll/payment_detail/mod.rs
+++ b/src/service/payroll/payment_detail/mod.rs
@@ -115,31 +115,25 @@ impl PaymentDetailService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(employee_id) = request.employee_id {
-            api_req
-                .query_params
-                .insert("employee_id".to_string(), employee_id);
+            api_req.query_params.insert("employee_id", employee_id);
         }
 
         if let Some(user_id_type) = request.user_id_type {
-            api_req
-                .query_params
-                .insert("user_id_type".to_string(), user_id_type);
+            api_req.query_params.insert("user_id_type", user_id_type);
         }
 
         if let Some(department_id_type) = request.department_id_type {
             api_req
                 .query_params
-                .insert("department_id_type".to_string(), department_id_type);
+                .insert("department_id_type", department_id_type);
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -208,9 +202,7 @@ impl PaymentDetailService {
 
         // 添加查询参数
         if let Some(user_id_type) = request.user_id_type {
-            api_req
-                .query_params
-                .insert("user_id_type".to_string(), user_id_type);
+            api_req.query_params.insert("user_id_type", user_id_type);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/performance/review_config/mod.rs b/src/service/performance/review_config/mod.rs
index ff95dfd..3feed21 100644
--- a/src/service/performance/review_config/mod.rs
+++ b/src/service/performance/review_config/mod.rs
@@ -7,6 +7,7 @@ use crate::{
         api_resp::{ApiResponseTrait, BaseResponse, ResponseFormat},
         config::Config,
         constants::AccessTokenType,
+        endpoints::Endpoints,
         http::Transport,
         req_option::RequestOption,
         SDKResult,
@@ -47,8 +48,7 @@ impl ReviewConfigService {
     ) -> SDKResult<BaseResponse<SemesterListResponse>> {
         let mut api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/performance/v1/review_config/semester_activity/semesters"
-                .to_string(),
+            api_path: Endpoints::PERFORMANCE_SEMESTER_LIST.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: vec![],
             ..Default::default()
@@ -56,15 +56,13 @@ impl ReviewConfigService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -89,8 +87,7 @@ impl ReviewConfigService {
     ) -> SDKResult<BaseResponse<ActivityQueryResponse>> {
         let mut api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/performance/v1/review_config/semester_activity/activities"
-                .to_string(),
+            api_path: Endpoints::PERFORMANCE_ACTIVITIES_QUERY.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: vec![],
             ..Default::default()
@@ -98,21 +95,17 @@ impl ReviewConfigService {
 
         // 添加查询参数
         if let Some(semester_id) = request.semester_id {
-            api_req
-                .query_params
-                .insert("semester_id".to_string(), semester_id);
+            api_req.query_params.insert("semester_id", semester_id);
         }
 
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -137,7 +130,7 @@ impl ReviewConfigService {
     ) -> SDKResult<BaseResponse<AdditionalInfoQueryResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/performance/v1/review_config/semester_activity/additional_information/query".to_string(),
+            api_path: Endpoints::PERFORMANCE_ADDITIONAL_INFO_QUERY.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -165,7 +158,7 @@ impl ReviewConfigService {
     ) -> SDKResult<BaseResponse<AdditionalInfoImportResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/performance/v1/review_config/semester_activity/additional_information/import".to_string(),
+            api_path: Endpoints::PERFORMANCE_ADDITIONAL_INFO_IMPORT.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -193,7 +186,7 @@ impl ReviewConfigService {
     ) -> SDKResult<BaseResponse<AdditionalInfoDeleteResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/performance/v1/review_config/semester_activity/additional_information/delete".to_string(),
+            api_path: Endpoints::PERFORMANCE_ADDITIONAL_INFO_DELETE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -221,7 +214,7 @@ impl ReviewConfigService {
     ) -> SDKResult<BaseResponse<UserGroupWriteResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/performance/v1/review_config/semester_activity/user_group_user_rel/write".to_string(),
+            api_path: Endpoints::PERFORMANCE_USER_GROUP_WRITE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -249,8 +242,7 @@ impl ReviewConfigService {
     ) -> SDKResult<BaseResponse<RevieweeQueryResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/performance/v1/review_config/semester_activity/reviewees/query"
-                .to_string(),
+            api_path: Endpoints::PERFORMANCE_REVIEWEES_QUERY.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -278,7 +270,7 @@ impl ReviewConfigService {
     ) -> SDKResult<BaseResponse<ReviewTemplateQueryResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/performance/v1/review_config/review_templates/query".to_string(),
+            api_path: Endpoints::PERFORMANCE_REVIEW_TEMPLATES_QUERY.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -306,7 +298,7 @@ impl ReviewConfigService {
     ) -> SDKResult<BaseResponse<ReviewItemQueryResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/performance/v1/review_config/review_items/query".to_string(),
+            api_path: Endpoints::PERFORMANCE_REVIEW_ITEMS_QUERY.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -334,7 +326,7 @@ impl ReviewConfigService {
     ) -> SDKResult<BaseResponse<TagQuestionConfigQueryResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/performance/v1/review_config/tag_questions/query".to_string(),
+            api_path: Endpoints::PERFORMANCE_TAG_QUESTIONS_QUERY.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -362,7 +354,7 @@ impl ReviewConfigService {
     ) -> SDKResult<BaseResponse<MetricQueryResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/performance/v1/review_config/metrics/query".to_string(),
+            api_path: Endpoints::PERFORMANCE_METRICS_QUERY.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -390,7 +382,7 @@ impl ReviewConfigService {
     ) -> SDKResult<BaseResponse<MetricTemplateQueryResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/performance/v1/review_config/metric_templates/query".to_string(),
+            api_path: Endpoints::PERFORMANCE_METRIC_TEMPLATES_QUERY.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -418,7 +410,7 @@ impl ReviewConfigService {
     ) -> SDKResult<BaseResponse<MetricFieldQueryResponse>> {
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/performance/v1/review_config/metric_fields/query".to_string(),
+            api_path: Endpoints::PERFORMANCE_METRIC_FIELDS_QUERY.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: serde_json::to_vec(&request)?,
             ..Default::default()
@@ -446,7 +438,7 @@ impl ReviewConfigService {
     ) -> SDKResult<BaseResponse<MetricTagListResponse>> {
         let mut api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/performance/v1/review_config/metric_tags".to_string(),
+            api_path: Endpoints::PERFORMANCE_METRIC_TAGS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: vec![],
             ..Default::default()
@@ -454,15 +446,13 @@ impl ReviewConfigService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/report/rule/mod.rs b/src/service/report/rule/mod.rs
index 88f5b65..d43b63a 100644
--- a/src/service/report/rule/mod.rs
+++ b/src/service/report/rule/mod.rs
@@ -52,45 +52,41 @@ impl RuleService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(rule_type) = request.rule_type {
-            api_req
-                .query_params
-                .insert("rule_type".to_string(), rule_type);
+            api_req.query_params.insert("rule_type", rule_type);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(creator) = request.creator {
-            api_req.query_params.insert("creator".to_string(), creator);
+            api_req.query_params.insert("creator", creator);
         }
 
         if let Some(name) = request.name {
-            api_req.query_params.insert("name".to_string(), name);
+            api_req.query_params.insert("name", name);
         }
 
         if let Some(start_time) = request.start_time {
             api_req
                 .query_params
-                .insert("start_time".to_string(), start_time.to_string());
+                .insert("start_time", start_time.to_string());
         }
 
         if let Some(end_time) = request.end_time {
             api_req
                 .query_params
-                .insert("end_time".to_string(), end_time.to_string());
+                .insert("end_time", end_time.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/report/task/mod.rs b/src/service/report/task/mod.rs
index f721ae1..d07aaa8 100644
--- a/src/service/report/task/mod.rs
+++ b/src/service/report/task/mod.rs
@@ -52,47 +52,45 @@ impl TaskService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(rule_id) = request.rule_id {
-            api_req.query_params.insert("rule_id".to_string(), rule_id);
+            api_req.query_params.insert("rule_id", rule_id);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         if let Some(task_type) = request.task_type {
             api_req
                 .query_params
-                .insert("task_type".to_string(), task_type);
+                .insert("task_type", task_type);
         }
 
         if let Some(reporter_id) = request.reporter_id {
             api_req
                 .query_params
-                .insert("reporter_id".to_string(), reporter_id);
+                .insert("reporter_id", reporter_id);
         }
 
         if let Some(start_time) = request.start_time {
             api_req
                 .query_params
-                .insert("start_time".to_string(), start_time.to_string());
+                .insert("start_time", start_time.to_string());
         }
 
         if let Some(end_time) = request.end_time {
             api_req
                 .query_params
-                .insert("end_time".to_string(), end_time.to_string());
+                .insert("end_time", end_time.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/search/mod.rs b/src/service/search/mod.rs
index 417eedc..2139468 100644
--- a/src/service/search/mod.rs
+++ b/src/service/search/mod.rs
@@ -76,8 +76,6 @@
 //! - 🔐 细粒度权限控制
 //! - 📊 丰富的搜索分析
 
-use std::sync::Arc;
-
 use crate::core::config::Config;
 
 /// 搜索服务 v1 版本
@@ -133,10 +131,10 @@ impl SearchService {
     ///
     /// # 返回值
     /// 配置完成的搜索服务实例，包含v1和v2版本API
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            v1: v1::V1::new((*config).clone()),
-            v2: v2::V2::new((*config).clone()),
+            v1: v1::V1::new(config.clone()),
+            v2: v2::V2::new(config.clone()),
         }
     }
 }
diff --git a/src/service/search/v1/user.rs b/src/service/search/v1/user.rs
index d525d41..b3fd349 100644
--- a/src/service/search/v1/user.rs
+++ b/src/service/search/v1/user.rs
@@ -110,7 +110,7 @@ impl SearchUserRequestBuilder {
         self.search_user_request
             .api_request
             .query_params
-            .insert("query".to_string(), query.to_string());
+            .insert("query", query.to_string());
         self
     }
 
@@ -131,7 +131,7 @@ impl SearchUserRequestBuilder {
         self.search_user_request
             .api_request
             .query_params
-            .insert("page_size".to_string(), page_size.to_string());
+            .insert("page_size", page_size.to_string());
         self
     }
 
@@ -154,7 +154,7 @@ impl SearchUserRequestBuilder {
         self.search_user_request
             .api_request
             .query_params
-            .insert("page_token".to_string(), token);
+            .insert("page_token", token);
         self
     }
 
@@ -284,7 +284,7 @@ impl SearchUserIterator<'_> {
                             self.request
                                 .api_request
                                 .query_params
-                                .insert("page_token".to_string(), token);
+                                .insert("page_token", token);
                             Some(data.users)
                         } else {
                             // has_more is true but no page_token. Stop iterating to avoid panic.
diff --git a/src/service/search/v2/data_source/mod.rs b/src/service/search/v2/data_source/mod.rs
index 1a790eb..7216560 100644
--- a/src/service/search/v2/data_source/mod.rs
+++ b/src/service/search/v2/data_source/mod.rs
@@ -207,12 +207,10 @@ impl DataSourceService {
             if let Some(page_size) = req.page_size {
                 api_req
                     .query_params
-                    .insert("page_size".to_string(), page_size.to_string());
+                    .insert("page_size", page_size.to_string());
             }
             if let Some(page_token) = req.page_token {
-                api_req
-                    .query_params
-                    .insert("page_token".to_string(), page_token);
+                api_req.query_params.insert("page_token", page_token);
             }
         }
 
diff --git a/src/service/search/v2/mod.rs b/src/service/search/v2/mod.rs
index 36f1c0e..23e7f3b 100644
--- a/src/service/search/v2/mod.rs
+++ b/src/service/search/v2/mod.rs
@@ -4,8 +4,6 @@ pub mod models;
 pub mod schema;
 pub mod suite_search;
 
-use std::sync::Arc;
-
 use crate::core::config::Config;
 
 /// Search API v2版本服务
@@ -21,11 +19,11 @@ pub struct V2 {
 }
 
 impl V2 {
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            suite_search: suite_search::SuiteSearchService::new(Arc::clone(&config)),
-            data_source: data_source::DataSourceService::new(Arc::clone(&config)),
-            data_item: data_item::DataItemService::new(Arc::clone(&config)),
+            suite_search: suite_search::SuiteSearchService::new(config.clone()),
+            data_source: data_source::DataSourceService::new(config.clone()),
+            data_item: data_item::DataItemService::new(config.clone()),
             schema: schema::SchemaService::new(config),
         }
     }
diff --git a/src/service/search/v2/suite_search/mod.rs b/src/service/search/v2/suite_search/mod.rs
index 605a2ff..2084510 100644
--- a/src/service/search/v2/suite_search/mod.rs
+++ b/src/service/search/v2/suite_search/mod.rs
@@ -82,12 +82,12 @@ impl SuiteSearchService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = &request.page_token {
             api_req
                 .query_params
-                .insert("page_token".to_string(), page_token.clone());
+                .insert("page_token", page_token.clone());
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -123,12 +123,12 @@ impl SuiteSearchService {
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = &request.page_token {
             api_req
                 .query_params
-                .insert("page_token".to_string(), page_token.clone());
+                .insert("page_token", page_token.clone());
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/security_and_compliance/openapi_log/mod.rs b/src/service/security_and_compliance/openapi_log/mod.rs
index 8da5d69..4d2405b 100644
--- a/src/service/security_and_compliance/openapi_log/mod.rs
+++ b/src/service/security_and_compliance/openapi_log/mod.rs
@@ -44,41 +44,39 @@ impl OpenapiLogService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(start_time) = request.start_time {
             api_req
                 .query_params
-                .insert("start_time".to_string(), start_time.to_string());
+                .insert("start_time", start_time.to_string());
         }
 
         if let Some(end_time) = request.end_time {
             api_req
                 .query_params
-                .insert("end_time".to_string(), end_time.to_string());
+                .insert("end_time", end_time.to_string());
         }
 
         if let Some(app_ids) = request.app_ids {
-            api_req.query_params.insert("app_ids".to_string(), app_ids);
+            api_req.query_params.insert("app_ids", app_ids);
         }
 
         if let Some(apis) = request.apis {
-            api_req.query_params.insert("apis".to_string(), apis);
+            api_req.query_params.insert("apis", apis);
         }
 
         if let Some(response_codes) = request.response_codes {
             api_req
                 .query_params
-                .insert("response_codes".to_string(), response_codes);
+                .insert("response_codes", response_codes);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/task/v2/attachment/mod.rs b/src/service/task/v2/attachment/mod.rs
index c8d7ce3..cb2ab36 100644
--- a/src/service/task/v2/attachment/mod.rs
+++ b/src/service/task/v2/attachment/mod.rs
@@ -8,6 +8,7 @@ use crate::{
         api_resp::{ApiResponseTrait, BaseResponse, EmptyResponse, ResponseFormat},
         config::Config,
         constants::AccessTokenType,
+        endpoints::Endpoints,
         http::Transport,
         req_option::RequestOption,
         SDKResult,
@@ -92,15 +93,12 @@ impl AttachmentService {
     ) -> SDKResult<BaseResponse<UploadAttachmentResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/task/v2/attachments/upload".to_string(),
+            api_path: Endpoints::TASK_V2_ATTACHMENTS_UPLOAD.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             query_params,
             body: serde_json::to_vec(&request)?,
@@ -122,23 +120,20 @@ impl AttachmentService {
     ) -> SDKResult<BaseResponse<ListAttachmentsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
-        query_params.insert("parent_type".to_string(), parent_type.to_string());
-        query_params.insert("parent_id".to_string(), parent_id.to_string());
+        query_params.insert("parent_type", parent_type.to_string());
+        query_params.insert("parent_id", parent_id.to_string());
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
 
         let api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/task/v2/attachments".to_string(),
+            api_path: Endpoints::TASK_V2_ATTACHMENTS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             query_params,
             ..Default::default()
@@ -156,10 +151,7 @@ impl AttachmentService {
     ) -> SDKResult<BaseResponse<GetAttachmentResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -182,10 +174,7 @@ impl AttachmentService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/task/v2/comment/mod.rs b/src/service/task/v2/comment/mod.rs
index 54dd691..fd840ae 100644
--- a/src/service/task/v2/comment/mod.rs
+++ b/src/service/task/v2/comment/mod.rs
@@ -110,10 +110,7 @@ impl CommentService {
     ) -> SDKResult<BaseResponse<CreateCommentResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -138,10 +135,7 @@ impl CommentService {
     ) -> SDKResult<BaseResponse<GetCommentResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -166,10 +160,7 @@ impl CommentService {
     ) -> SDKResult<BaseResponse<UpdateCommentResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -194,10 +185,7 @@ impl CommentService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -222,16 +210,13 @@ impl CommentService {
     ) -> SDKResult<BaseResponse<ListCommentsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/task/v2/custom_field/mod.rs b/src/service/task/v2/custom_field/mod.rs
index e325ec1..ee0532f 100644
--- a/src/service/task/v2/custom_field/mod.rs
+++ b/src/service/task/v2/custom_field/mod.rs
@@ -8,6 +8,7 @@ use crate::{
         api_resp::{ApiResponseTrait, BaseResponse, EmptyResponse, ResponseFormat},
         config::Config,
         constants::AccessTokenType,
+        endpoints::Endpoints,
         http::Transport,
         req_option::RequestOption,
         SDKResult,
@@ -131,15 +132,12 @@ impl CustomFieldService {
     ) -> SDKResult<BaseResponse<CreateCustomFieldResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/task/v2/custom_fields".to_string(),
+            api_path: Endpoints::TASK_V2_CUSTOM_FIELDS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             query_params,
             body: serde_json::to_vec(&request)?,
@@ -158,10 +156,7 @@ impl CustomFieldService {
     ) -> SDKResult<BaseResponse<GetCustomFieldResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -185,10 +180,7 @@ impl CustomFieldService {
     ) -> SDKResult<BaseResponse<UpdateCustomFieldResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -215,27 +207,24 @@ impl CustomFieldService {
     ) -> SDKResult<BaseResponse<ListCustomFieldsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(resource_type) = resource_type {
-            query_params.insert("resource_type".to_string(), resource_type.to_string());
+            query_params.insert("resource_type", resource_type.to_string());
         }
         if let Some(resource_id) = resource_id {
-            query_params.insert("resource_id".to_string(), resource_id.to_string());
+            query_params.insert("resource_id", resource_id.to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
 
         let api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/task/v2/custom_fields".to_string(),
+            api_path: Endpoints::TASK_V2_CUSTOM_FIELDS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             query_params,
             ..Default::default()
@@ -254,10 +243,7 @@ impl CustomFieldService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -282,10 +268,7 @@ impl CustomFieldService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/task/v2/custom_field_option/mod.rs b/src/service/task/v2/custom_field_option/mod.rs
index 66b065a..32aee14 100644
--- a/src/service/task/v2/custom_field_option/mod.rs
+++ b/src/service/task/v2/custom_field_option/mod.rs
@@ -82,10 +82,7 @@ impl CustomFieldOptionService {
     ) -> SDKResult<BaseResponse<CreateCustomFieldOptionResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -111,10 +108,7 @@ impl CustomFieldOptionService {
     ) -> SDKResult<BaseResponse<UpdateCustomFieldOptionResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/task/v2/section/mod.rs b/src/service/task/v2/section/mod.rs
index dac0a2d..891a814 100644
--- a/src/service/task/v2/section/mod.rs
+++ b/src/service/task/v2/section/mod.rs
@@ -8,6 +8,7 @@ use crate::{
         api_resp::{ApiResponseTrait, BaseResponse, EmptyResponse, ResponseFormat},
         config::Config,
         constants::AccessTokenType,
+        endpoints::Endpoints,
         http::Transport,
         req_option::RequestOption,
         SDKResult,
@@ -127,15 +128,12 @@ impl SectionService {
     ) -> SDKResult<BaseResponse<CreateSectionResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/task/v2/sections".to_string(),
+            api_path: Endpoints::TASK_V2_SECTIONS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             query_params,
             body: serde_json::to_vec(&request)?,
@@ -154,10 +152,7 @@ impl SectionService {
     ) -> SDKResult<BaseResponse<GetSectionResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -181,10 +176,7 @@ impl SectionService {
     ) -> SDKResult<BaseResponse<UpdateSectionResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -208,10 +200,7 @@ impl SectionService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -236,22 +225,19 @@ impl SectionService {
     ) -> SDKResult<BaseResponse<ListSectionsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
-        query_params.insert("tasklist_guid".to_string(), tasklist_guid.to_string());
+        query_params.insert("tasklist_guid", tasklist_guid.to_string());
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
 
         let api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/task/v2/sections".to_string(),
+            api_path: Endpoints::TASK_V2_SECTIONS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             query_params,
             ..Default::default()
@@ -279,37 +265,34 @@ impl SectionService {
     ) -> SDKResult<BaseResponse<SectionTasksResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
         if let Some(completed) = completed {
-            query_params.insert("completed".to_string(), completed.to_string());
+            query_params.insert("completed", completed.to_string());
         }
         if let Some(created_from) = created_from {
-            query_params.insert("created_from".to_string(), created_from.to_string());
+            query_params.insert("created_from", created_from.to_string());
         }
         if let Some(created_to) = created_to {
-            query_params.insert("created_to".to_string(), created_to.to_string());
+            query_params.insert("created_to", created_to.to_string());
         }
         if let Some(updated_from) = updated_from {
-            query_params.insert("updated_from".to_string(), updated_from.to_string());
+            query_params.insert("updated_from", updated_from.to_string());
         }
         if let Some(updated_to) = updated_to {
-            query_params.insert("updated_to".to_string(), updated_to.to_string());
+            query_params.insert("updated_to", updated_to.to_string());
         }
         if let Some(due_from) = due_from {
-            query_params.insert("due_from".to_string(), due_from.to_string());
+            query_params.insert("due_from", due_from.to_string());
         }
         if let Some(due_to) = due_to {
-            query_params.insert("due_to".to_string(), due_to.to_string());
+            query_params.insert("due_to", due_to.to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/task/v2/task/mod.rs b/src/service/task/v2/task/mod.rs
index c5ec6ea..9c8c399 100644
--- a/src/service/task/v2/task/mod.rs
+++ b/src/service/task/v2/task/mod.rs
@@ -8,6 +8,7 @@ use crate::{
         api_resp::{ApiResponseTrait, BaseResponse, EmptyResponse, ResponseFormat},
         config::Config,
         constants::AccessTokenType,
+        endpoints::Endpoints,
         http::Transport,
         req_option::RequestOption,
         SDKResult,
@@ -311,15 +312,12 @@ impl TaskService {
     ) -> SDKResult<BaseResponse<CreateTaskResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/task/v2/tasks".to_string(),
+            api_path: Endpoints::TASK_V2_TASKS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             query_params,
             body: serde_json::to_vec(&request)?,
@@ -339,10 +337,7 @@ impl TaskService {
     ) -> SDKResult<BaseResponse<UpdateTaskResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -366,10 +361,7 @@ impl TaskService {
     ) -> SDKResult<BaseResponse<GetTaskResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -392,10 +384,7 @@ impl TaskService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -427,42 +416,39 @@ impl TaskService {
     ) -> SDKResult<BaseResponse<ListTasksResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
         if let Some(completed) = completed {
-            query_params.insert("completed".to_string(), completed.to_string());
+            query_params.insert("completed", completed.to_string());
         }
         if let Some(created_from) = created_from {
-            query_params.insert("created_from".to_string(), created_from.to_string());
+            query_params.insert("created_from", created_from.to_string());
         }
         if let Some(created_to) = created_to {
-            query_params.insert("created_to".to_string(), created_to.to_string());
+            query_params.insert("created_to", created_to.to_string());
         }
         if let Some(updated_from) = updated_from {
-            query_params.insert("updated_from".to_string(), updated_from.to_string());
+            query_params.insert("updated_from", updated_from.to_string());
         }
         if let Some(updated_to) = updated_to {
-            query_params.insert("updated_to".to_string(), updated_to.to_string());
+            query_params.insert("updated_to", updated_to.to_string());
         }
         if let Some(due_from) = due_from {
-            query_params.insert("due_from".to_string(), due_from.to_string());
+            query_params.insert("due_from", due_from.to_string());
         }
         if let Some(due_to) = due_to {
-            query_params.insert("due_to".to_string(), due_to.to_string());
+            query_params.insert("due_to", due_to.to_string());
         }
 
         let api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/task/v2/tasks".to_string(),
+            api_path: Endpoints::TASK_V2_TASKS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             query_params,
             ..Default::default()
@@ -481,10 +467,7 @@ impl TaskService {
     ) -> SDKResult<BaseResponse<AddTaskMembersResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -509,10 +492,7 @@ impl TaskService {
     ) -> SDKResult<BaseResponse<RemoveTaskMembersResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -537,10 +517,7 @@ impl TaskService {
     ) -> SDKResult<BaseResponse<AddTaskRemindersResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -565,10 +542,7 @@ impl TaskService {
     ) -> SDKResult<BaseResponse<RemoveTaskRemindersResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -593,10 +567,7 @@ impl TaskService {
     ) -> SDKResult<BaseResponse<AddTaskDependenciesResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -621,10 +592,7 @@ impl TaskService {
     ) -> SDKResult<BaseResponse<RemoveTaskDependenciesResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/task/v2/task_subtask/mod.rs b/src/service/task/v2/task_subtask/mod.rs
index bc23da1..3d984ad 100644
--- a/src/service/task/v2/task_subtask/mod.rs
+++ b/src/service/task/v2/task_subtask/mod.rs
@@ -77,10 +77,7 @@ impl TaskSubtaskService {
     ) -> SDKResult<BaseResponse<CreateSubtaskResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -106,16 +103,13 @@ impl TaskSubtaskService {
     ) -> SDKResult<BaseResponse<ListSubtasksResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/task/v2/tasklist/mod.rs b/src/service/task/v2/tasklist/mod.rs
index 91419df..0b932fe 100644
--- a/src/service/task/v2/tasklist/mod.rs
+++ b/src/service/task/v2/tasklist/mod.rs
@@ -8,6 +8,7 @@ use crate::{
         api_resp::{ApiResponseTrait, BaseResponse, EmptyResponse, ResponseFormat},
         config::Config,
         constants::AccessTokenType,
+        endpoints::Endpoints,
         http::Transport,
         req_option::RequestOption,
         SDKResult,
@@ -169,15 +170,12 @@ impl TasklistService {
     ) -> SDKResult<BaseResponse<CreateTasklistResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
             http_method: Method::POST,
-            api_path: "/open-apis/task/v2/tasklists".to_string(),
+            api_path: Endpoints::TASK_V2_TASKLISTS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             query_params,
             body: serde_json::to_vec(&request)?,
@@ -196,10 +194,7 @@ impl TasklistService {
     ) -> SDKResult<BaseResponse<GetTasklistResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -223,10 +218,7 @@ impl TasklistService {
     ) -> SDKResult<BaseResponse<UpdateTasklistResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -250,10 +242,7 @@ impl TasklistService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -277,10 +266,7 @@ impl TasklistService {
     ) -> SDKResult<BaseResponse<AddTasklistMembersResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -305,10 +291,7 @@ impl TasklistService {
     ) -> SDKResult<BaseResponse<RemoveTasklistMembersResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -342,37 +325,34 @@ impl TasklistService {
     ) -> SDKResult<BaseResponse<TasklistTasksResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
         if let Some(completed) = completed {
-            query_params.insert("completed".to_string(), completed.to_string());
+            query_params.insert("completed", completed.to_string());
         }
         if let Some(created_from) = created_from {
-            query_params.insert("created_from".to_string(), created_from.to_string());
+            query_params.insert("created_from", created_from.to_string());
         }
         if let Some(created_to) = created_to {
-            query_params.insert("created_to".to_string(), created_to.to_string());
+            query_params.insert("created_to", created_to.to_string());
         }
         if let Some(updated_from) = updated_from {
-            query_params.insert("updated_from".to_string(), updated_from.to_string());
+            query_params.insert("updated_from", updated_from.to_string());
         }
         if let Some(updated_to) = updated_to {
-            query_params.insert("updated_to".to_string(), updated_to.to_string());
+            query_params.insert("updated_to", updated_to.to_string());
         }
         if let Some(due_from) = due_from {
-            query_params.insert("due_from".to_string(), due_from.to_string());
+            query_params.insert("due_from", due_from.to_string());
         }
         if let Some(due_to) = due_to {
-            query_params.insert("due_to".to_string(), due_to.to_string());
+            query_params.insert("due_to", due_to.to_string());
         }
 
         let api_req = ApiRequest {
@@ -396,21 +376,18 @@ impl TasklistService {
     ) -> SDKResult<BaseResponse<ListTasklistsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
 
         let api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/task/v2/tasklists".to_string(),
+            api_path: Endpoints::TASK_V2_TASKLISTS.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             query_params,
             ..Default::default()
diff --git a/src/service/task/v2/tasklist_activity_subscription/mod.rs b/src/service/task/v2/tasklist_activity_subscription/mod.rs
index d6ab22e..d0968ad 100644
--- a/src/service/task/v2/tasklist_activity_subscription/mod.rs
+++ b/src/service/task/v2/tasklist_activity_subscription/mod.rs
@@ -120,10 +120,7 @@ impl TasklistActivitySubscriptionService {
     ) -> SDKResult<BaseResponse<CreateActivitySubscriptionResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -150,10 +147,7 @@ impl TasklistActivitySubscriptionService {
     ) -> SDKResult<BaseResponse<GetActivitySubscriptionResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -180,16 +174,13 @@ impl TasklistActivitySubscriptionService {
     ) -> SDKResult<BaseResponse<ListActivitySubscriptionsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token.to_string());
+            query_params.insert("page_token", page_token.to_string());
         }
 
         let api_req = ApiRequest {
@@ -216,10 +207,7 @@ impl TasklistActivitySubscriptionService {
     ) -> SDKResult<BaseResponse<UpdateActivitySubscriptionResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -246,10 +234,7 @@ impl TasklistActivitySubscriptionService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/tenant_tag/tag/mod.rs b/src/service/tenant_tag/tag/mod.rs
index 8dfb5e6..95461c3 100644
--- a/src/service/tenant_tag/tag/mod.rs
+++ b/src/service/tenant_tag/tag/mod.rs
@@ -103,10 +103,7 @@ impl TagService {
     ) -> SDKResult<BaseResponse<CreateTagResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -131,10 +128,7 @@ impl TagService {
     ) -> SDKResult<BaseResponse<PatchTagResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -160,19 +154,16 @@ impl TagService {
     ) -> SDKResult<BaseResponse<ListTagResponse>> {
         let mut query_params = HashMap::new();
         if let Some(tag_type) = tag_type {
-            query_params.insert("tag_type".to_string(), tag_type.as_str().to_string());
+            query_params.insert("tag_type", tag_type.as_str().to_string());
         }
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/tenant_tag/tag_binding/mod.rs b/src/service/tenant_tag/tag_binding/mod.rs
index b449ff5..e92f1b4 100644
--- a/src/service/tenant_tag/tag_binding/mod.rs
+++ b/src/service/tenant_tag/tag_binding/mod.rs
@@ -114,23 +114,20 @@ impl TagBindingService {
         option: Option<RequestOption>,
     ) -> SDKResult<BaseResponse<GetTagBindingResponse>> {
         let mut query_params = HashMap::new();
-        query_params.insert("entity_id".to_string(), request.entity_id);
-        query_params.insert("entity_type".to_string(), request.entity_type);
+        query_params.insert("entity_id", request.entity_id);
+        query_params.insert("entity_type", request.entity_type);
 
         if let Some(tag_id) = request.tag_id {
-            query_params.insert("tag_id".to_string(), tag_id);
+            query_params.insert("tag_id", tag_id);
         }
         if let Some(page_size) = request.page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = request.page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
         if let Some(user_id_type) = request.user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -153,10 +150,7 @@ impl TagBindingService {
     ) -> SDKResult<BaseResponse<CreateTagBindingResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -180,10 +174,7 @@ impl TagBindingService {
     ) -> SDKResult<BaseResponse<UpdateTagBindingResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/trust_party/collaboration_organization/mod.rs b/src/service/trust_party/collaboration_organization/mod.rs
index 58fd846..f34d869 100644
--- a/src/service/trust_party/collaboration_organization/mod.rs
+++ b/src/service/trust_party/collaboration_organization/mod.rs
@@ -55,15 +55,13 @@ impl CollaborationOrganizationService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -222,15 +220,13 @@ impl CollaborationOrganizationService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         Transport::request(api_req, &self.config, option).await
@@ -263,19 +259,17 @@ impl CollaborationOrganizationService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/trust_party/searchable_visible_rules/mod.rs b/src/service/trust_party/searchable_visible_rules/mod.rs
index 2ac1ed2..28fbf30 100644
--- a/src/service/trust_party/searchable_visible_rules/mod.rs
+++ b/src/service/trust_party/searchable_visible_rules/mod.rs
@@ -110,29 +110,25 @@ impl SearchableVisibleRulesService {
 
         // 添加查询参数
         if let Some(page_token) = request.page_token {
-            api_req
-                .query_params
-                .insert("page_token".to_string(), page_token);
+            api_req.query_params.insert("page_token", page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert("page_size", page_size.to_string());
         }
 
         if let Some(org_id) = request.org_id {
-            api_req.query_params.insert("org_id".to_string(), org_id);
+            api_req.query_params.insert("org_id", org_id);
         }
 
         if let Some(rule_type) = request.rule_type {
-            api_req
-                .query_params
-                .insert("rule_type".to_string(), rule_type);
+            api_req.query_params.insert("rule_type", rule_type);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert("status", status);
         }
 
         Transport::request(api_req, &self.config, option).await
diff --git a/src/service/vc/v1/meeting/mod.rs b/src/service/vc/v1/meeting/mod.rs
index e5d9cde..a69c82a 100644
--- a/src/service/vc/v1/meeting/mod.rs
+++ b/src/service/vc/v1/meeting/mod.rs
@@ -142,10 +142,7 @@ impl MeetingService {
     ) -> SDKResult<BaseResponse<InviteMeetingResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -170,10 +167,7 @@ impl MeetingService {
     ) -> SDKResult<BaseResponse<KickoutMeetingResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -198,10 +192,7 @@ impl MeetingService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -225,10 +216,7 @@ impl MeetingService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -251,10 +239,7 @@ impl MeetingService {
     ) -> SDKResult<BaseResponse<GetMeetingResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -278,22 +263,19 @@ impl MeetingService {
         option: Option<RequestOption>,
     ) -> SDKResult<BaseResponse<ListMeetingsByNoResponse>> {
         let mut query_params = HashMap::new();
-        query_params.insert("meeting_no".to_string(), meeting_no.to_string());
-        query_params.insert("start_time".to_string(), start_time.to_string());
-        query_params.insert("end_time".to_string(), end_time.to_string());
+        query_params.insert("meeting_no", meeting_no.to_string());
+        query_params.insert("start_time", start_time.to_string());
+        query_params.insert("end_time", end_time.to_string());
 
         if let Some(params) = params {
             if let Some(page_size) = params.page_size {
-                query_params.insert("page_size".to_string(), page_size.to_string());
+                query_params.insert("page_size", page_size.to_string());
             }
             if let Some(page_token) = params.page_token {
-                query_params.insert("page_token".to_string(), page_token);
+                query_params.insert("page_token", page_token);
             }
             if let Some(user_id_type) = params.user_id_type {
-                query_params.insert(
-                    "user_id_type".to_string(),
-                    user_id_type.as_str().to_string(),
-                );
+                query_params.insert("user_id_type", user_id_type.as_str().to_string());
             }
         }
 
diff --git a/src/service/vc/v1/recording/mod.rs b/src/service/vc/v1/recording/mod.rs
index e0a491a..bfc66a7 100644
--- a/src/service/vc/v1/recording/mod.rs
+++ b/src/service/vc/v1/recording/mod.rs
@@ -91,10 +91,7 @@ impl RecordingService {
     ) -> SDKResult<BaseResponse<StartRecordingResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -118,10 +115,7 @@ impl RecordingService {
     ) -> SDKResult<BaseResponse<StopRecordingResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -144,10 +138,7 @@ impl RecordingService {
     ) -> SDKResult<BaseResponse<GetRecordingResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -171,10 +162,7 @@ impl RecordingService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/vc/v1/reserve/mod.rs b/src/service/vc/v1/reserve/mod.rs
index 143b5f1..612e37e 100644
--- a/src/service/vc/v1/reserve/mod.rs
+++ b/src/service/vc/v1/reserve/mod.rs
@@ -128,10 +128,7 @@ impl ReserveService {
     ) -> SDKResult<BaseResponse<ApplyReserveResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -155,10 +152,7 @@ impl ReserveService {
     ) -> SDKResult<BaseResponse<EmptyResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -182,10 +176,7 @@ impl ReserveService {
     ) -> SDKResult<BaseResponse<UpdateReserveResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -209,10 +200,7 @@ impl ReserveService {
     ) -> SDKResult<BaseResponse<GetReserveResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -235,10 +223,7 @@ impl ReserveService {
     ) -> SDKResult<BaseResponse<GetActiveMeetingResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
diff --git a/src/service/vc/v1/room/mod.rs b/src/service/vc/v1/room/mod.rs
index 94e5a8d..2399432 100644
--- a/src/service/vc/v1/room/mod.rs
+++ b/src/service/vc/v1/room/mod.rs
@@ -151,10 +151,7 @@ impl RoomService {
     ) -> SDKResult<BaseResponse<CreateRoomResponse>> {
         let mut query_params = HashMap::new();
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -181,15 +178,12 @@ impl RoomService {
         let mut query_params = HashMap::new();
         if let Some(room_id_type) = room_id_type {
             query_params.insert(
-                "room_id_type".to_string(),
+                "room_id_type",
                 room_id_type.as_str().to_string(),
             );
         }
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -215,15 +209,12 @@ impl RoomService {
         let mut query_params = HashMap::new();
         if let Some(room_id_type) = room_id_type {
             query_params.insert(
-                "room_id_type".to_string(),
+                "room_id_type",
                 room_id_type.as_str().to_string(),
             );
         }
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -248,15 +239,12 @@ impl RoomService {
         let mut query_params = HashMap::new();
         if let Some(room_id_type) = room_id_type {
             query_params.insert(
-                "room_id_type".to_string(),
+                "room_id_type",
                 room_id_type.as_str().to_string(),
             );
         }
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -281,22 +269,19 @@ impl RoomService {
     ) -> SDKResult<BaseResponse<ListRoomsResponse>> {
         let mut query_params = HashMap::new();
         if let Some(page_size) = page_size {
-            query_params.insert("page_size".to_string(), page_size.to_string());
+            query_params.insert("page_size", page_size.to_string());
         }
         if let Some(page_token) = page_token {
-            query_params.insert("page_token".to_string(), page_token);
+            query_params.insert("page_token", page_token);
         }
         if let Some(room_id_type) = room_id_type {
             query_params.insert(
-                "room_id_type".to_string(),
+                "room_id_type",
                 room_id_type.as_str().to_string(),
             );
         }
         if let Some(user_id_type) = user_id_type {
-            query_params.insert(
-                "user_id_type".to_string(),
-                user_id_type.as_str().to_string(),
-            );
+            query_params.insert("user_id_type", user_id_type.as_str().to_string());
         }
 
         let api_req = ApiRequest {
@@ -319,28 +304,25 @@ impl RoomService {
         let mut query_params = HashMap::new();
         if let Some(params) = params {
             if let Some(keyword) = params.keyword {
-                query_params.insert("keyword".to_string(), keyword);
+                query_params.insert("keyword", keyword);
             }
             if let Some(room_ids) = params.room_ids {
-                query_params.insert("room_ids".to_string(), room_ids.join(","));
+                query_params.insert("room_ids", room_ids.join(","));
             }
             if let Some(page_size) = params.page_size {
-                query_params.insert("page_size".to_string(), page_size.to_string());
+                query_params.insert("page_size", page_size.to_string());
             }
             if let Some(page_token) = params.page_token {
-                query_params.insert("page_token".to_string(), page_token);
+                query_params.insert("page_token", page_token);
             }
             if let Some(room_id_type) = params.room_id_type {
                 query_params.insert(
-                    "room_id_type".to_string(),
+                    "room_id_type",
                     room_id_type.as_str().to_string(),
                 );
             }
             if let Some(user_id_type) = params.user_id_type {
-                query_params.insert(
-                    "user_id_type".to_string(),
-                    user_id_type.as_str().to_string(),
-                );
+                query_params.insert("user_id_type", user_id_type.as_str().to_string());
             }
         }
 
diff --git a/src/service/workplace/app_recommend/mod.rs b/src/service/workplace/app_recommend/mod.rs
index 22055b9..ad74738 100644
--- a/src/service/workplace/app_recommend/mod.rs
+++ b/src/service/workplace/app_recommend/mod.rs
@@ -7,7 +7,9 @@ use crate::{
         api_resp::{ApiResponseTrait, BaseResponse, ResponseFormat},
         config::Config,
         constants::AccessTokenType,
+        endpoints::Endpoints,
         http::Transport,
+        query_params::QueryParams,
         req_option::RequestOption,
         standard_response::StandardResponse,
         SDKResult,
@@ -45,7 +47,7 @@ impl AppRecommendService {
     ) -> SDKResult<FavouriteAppsResponse> {
         let mut api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/workplace/v1/app_recommend_rule/favourite".to_string(),
+            api_path: Endpoints::WORKPLACE_APP_RECOMMEND_FAVOURITE.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: vec![],
             ..Default::default()
@@ -55,17 +57,17 @@ impl AppRecommendService {
         if let Some(page_token) = request.page_token {
             api_req
                 .query_params
-                .insert("page_token".to_string(), page_token);
+                .insert(QueryParams::PAGE_TOKEN, page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert(QueryParams::PAGE_SIZE, page_size.to_string());
         }
 
         if let Some(user_id) = request.user_id {
-            api_req.query_params.insert("user_id".to_string(), user_id);
+            api_req.query_params.insert(QueryParams::USER_ID, user_id);
         }
 
         let api_resp: BaseResponse<FavouriteAppsResponse> =
@@ -92,7 +94,7 @@ impl AppRecommendService {
     ) -> SDKResult<RecommendedAppsResponse> {
         let mut api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/workplace/v1/app_recommend_rule/recommend".to_string(),
+            api_path: Endpoints::WORKPLACE_APP_RECOMMEND_RECOMMEND.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: vec![],
             ..Default::default()
@@ -102,23 +104,23 @@ impl AppRecommendService {
         if let Some(page_token) = request.page_token {
             api_req
                 .query_params
-                .insert("page_token".to_string(), page_token);
+                .insert(QueryParams::PAGE_TOKEN, page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert(QueryParams::PAGE_SIZE, page_size.to_string());
         }
 
         if let Some(user_id) = request.user_id {
-            api_req.query_params.insert("user_id".to_string(), user_id);
+            api_req.query_params.insert(QueryParams::USER_ID, user_id);
         }
 
         if let Some(department_id) = request.department_id {
             api_req
                 .query_params
-                .insert("department_id".to_string(), department_id);
+                .insert(QueryParams::DEPARTMENT_ID, department_id);
         }
 
         let api_resp: BaseResponse<RecommendedAppsResponse> =
@@ -145,7 +147,7 @@ impl AppRecommendService {
     ) -> SDKResult<RecommendRulesListResponse> {
         let mut api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/workplace/v1/app_recommend_rule/list".to_string(),
+            api_path: Endpoints::WORKPLACE_APP_RECOMMEND_LIST.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: vec![],
             ..Default::default()
@@ -155,23 +157,23 @@ impl AppRecommendService {
         if let Some(page_token) = request.page_token {
             api_req
                 .query_params
-                .insert("page_token".to_string(), page_token);
+                .insert(QueryParams::PAGE_TOKEN, page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert(QueryParams::PAGE_SIZE, page_size.to_string());
         }
 
         if let Some(rule_type) = request.rule_type {
             api_req
                 .query_params
-                .insert("rule_type".to_string(), rule_type);
+                .insert(QueryParams::RULE_TYPE, rule_type);
         }
 
         if let Some(status) = request.status {
-            api_req.query_params.insert("status".to_string(), status);
+            api_req.query_params.insert(QueryParams::STATUS, status);
         }
 
         let api_resp: BaseResponse<RecommendRulesListResponse> =
diff --git a/src/service/workplace/mod.rs b/src/service/workplace/mod.rs
index c35702e..838fc66 100644
--- a/src/service/workplace/mod.rs
+++ b/src/service/workplace/mod.rs
@@ -44,8 +44,6 @@ pub mod app_recommend;
 pub mod models;
 pub mod workplace_access_data;
 
-use std::sync::Arc;
-
 use crate::{
     core::config::Config,
     service::workplace::{
@@ -65,9 +63,9 @@ pub struct WorkplaceService {
 
 impl WorkplaceService {
     /// 创建工作台服务实例
-    pub fn new(config: Arc<Config>) -> Self {
+    pub fn new(config: Config) -> Self {
         Self {
-            workplace_access_data: WorkplaceAccessDataService::new(Arc::clone(&config)),
+            workplace_access_data: WorkplaceAccessDataService::new(config.clone()),
             app_recommend: AppRecommendService::new(config),
         }
     }
diff --git a/src/service/workplace/workplace_access_data/mod.rs b/src/service/workplace/workplace_access_data/mod.rs
index 0ce84ec..3241512 100644
--- a/src/service/workplace/workplace_access_data/mod.rs
+++ b/src/service/workplace/workplace_access_data/mod.rs
@@ -7,7 +7,9 @@ use crate::{
         api_resp::{ApiResponseTrait, BaseResponse, ResponseFormat},
         config::Config,
         constants::AccessTokenType,
+        endpoints::Endpoints,
         http::Transport,
+        query_params::QueryParams,
         req_option::RequestOption,
         standard_response::StandardResponse,
         SDKResult,
@@ -48,7 +50,7 @@ impl WorkplaceAccessDataService {
     ) -> SDKResult<AccessDataSearchResponse> {
         let mut api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/workplace/v1/workplace_access_data/search".to_string(),
+            api_path: Endpoints::WORKPLACE_ACCESS_DATA_SEARCH.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: vec![],
             ..Default::default()
@@ -58,41 +60,41 @@ impl WorkplaceAccessDataService {
         if let Some(page_token) = request.page_token {
             api_req
                 .query_params
-                .insert("page_token".to_string(), page_token);
+                .insert(QueryParams::PAGE_TOKEN, page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert(QueryParams::PAGE_SIZE, page_size.to_string());
         }
 
         if let Some(start_time) = request.start_time {
             api_req
                 .query_params
-                .insert("start_time".to_string(), start_time.to_string());
+                .insert(QueryParams::START_TIME, start_time.to_string());
         }
 
         if let Some(end_time) = request.end_time {
             api_req
                 .query_params
-                .insert("end_time".to_string(), end_time.to_string());
+                .insert(QueryParams::END_TIME, end_time.to_string());
         }
 
         if let Some(user_id) = request.user_id {
-            api_req.query_params.insert("user_id".to_string(), user_id);
+            api_req.query_params.insert(QueryParams::USER_ID, user_id);
         }
 
         if let Some(department_id) = request.department_id {
             api_req
                 .query_params
-                .insert("department_id".to_string(), department_id);
+                .insert(QueryParams::DEPARTMENT_ID, department_id);
         }
 
         if let Some(access_type) = request.access_type {
             api_req
                 .query_params
-                .insert("access_type".to_string(), access_type);
+                .insert(QueryParams::ACCESS_TYPE, access_type);
         }
 
         let api_resp: BaseResponse<AccessDataSearchResponse> =
@@ -119,7 +121,7 @@ impl WorkplaceAccessDataService {
     ) -> SDKResult<CustomAccessDataSearchResponse> {
         let mut api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/workplace/v1/custom_workplace_access_data/search".to_string(),
+            api_path: Endpoints::WORKPLACE_CUSTOM_ACCESS_DATA_SEARCH.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: vec![],
             ..Default::default()
@@ -129,35 +131,36 @@ impl WorkplaceAccessDataService {
         if let Some(page_token) = request.page_token {
             api_req
                 .query_params
-                .insert("page_token".to_string(), page_token);
+                .insert(QueryParams::PAGE_TOKEN, page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert(QueryParams::PAGE_SIZE, page_size.to_string());
         }
 
         if let Some(start_time) = request.start_time {
             api_req
                 .query_params
-                .insert("start_time".to_string(), start_time.to_string());
+                .insert(QueryParams::START_TIME, start_time.to_string());
         }
 
         if let Some(end_time) = request.end_time {
             api_req
                 .query_params
-                .insert("end_time".to_string(), end_time.to_string());
+                .insert(QueryParams::END_TIME, end_time.to_string());
         }
 
         if let Some(user_id) = request.user_id {
-            api_req.query_params.insert("user_id".to_string(), user_id);
+            api_req.query_params.insert(QueryParams::USER_ID, user_id);
         }
 
         if let Some(custom_workplace_id) = request.custom_workplace_id {
-            api_req
-                .query_params
-                .insert("custom_workplace_id".to_string(), custom_workplace_id);
+            api_req.query_params.insert(
+                QueryParams::CUSTOM_WORKPLACE_ID,
+                custom_workplace_id,
+            );
         }
 
         let api_resp: BaseResponse<CustomAccessDataSearchResponse> =
@@ -184,8 +187,7 @@ impl WorkplaceAccessDataService {
     ) -> SDKResult<CustomWidgetAccessDataSearchResponse> {
         let mut api_req = ApiRequest {
             http_method: Method::GET,
-            api_path: "/open-apis/workplace/v1/custom_workplace_widget_access_data/search"
-                .to_string(),
+            api_path: Endpoints::WORKPLACE_WIDGET_ACCESS_DATA_SEARCH.to_string(),
             supported_access_token_types: vec![AccessTokenType::Tenant, AccessTokenType::User],
             body: vec![],
             ..Default::default()
@@ -195,41 +197,42 @@ impl WorkplaceAccessDataService {
         if let Some(page_token) = request.page_token {
             api_req
                 .query_params
-                .insert("page_token".to_string(), page_token);
+                .insert(QueryParams::PAGE_TOKEN, page_token);
         }
 
         if let Some(page_size) = request.page_size {
             api_req
                 .query_params
-                .insert("page_size".to_string(), page_size.to_string());
+                .insert(QueryParams::PAGE_SIZE, page_size.to_string());
         }
 
         if let Some(start_time) = request.start_time {
             api_req
                 .query_params
-                .insert("start_time".to_string(), start_time.to_string());
+                .insert(QueryParams::START_TIME, start_time.to_string());
         }
 
         if let Some(end_time) = request.end_time {
             api_req
                 .query_params
-                .insert("end_time".to_string(), end_time.to_string());
+                .insert(QueryParams::END_TIME, end_time.to_string());
         }
 
         if let Some(user_id) = request.user_id {
-            api_req.query_params.insert("user_id".to_string(), user_id);
+            api_req.query_params.insert(QueryParams::USER_ID, user_id);
         }
 
         if let Some(custom_workplace_id) = request.custom_workplace_id {
-            api_req
-                .query_params
-                .insert("custom_workplace_id".to_string(), custom_workplace_id);
+            api_req.query_params.insert(
+                QueryParams::CUSTOM_WORKPLACE_ID,
+                custom_workplace_id,
+            );
         }
 
         if let Some(widget_id) = request.widget_id {
             api_req
                 .query_params
-                .insert("widget_id".to_string(), widget_id);
+                .insert(QueryParams::WIDGET_ID, widget_id);
         }
 
         let api_resp: BaseResponse<CustomWidgetAccessDataSearchResponse> =
