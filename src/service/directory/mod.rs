//! ÁªÑÁªáÊû∂ÊûÑÔºàDirectoryÔºâÊúçÂä°
//!
//! Êèê‰æõÈ£û‰π¶ÁªÑÁªáÊû∂ÊûÑÁöÑÂÆåÊï¥ÂäüËÉΩÈõÜÔºåÊîØÊåÅÂëòÂ∑•ÁÆ°ÁêÜ„ÄÅÈÉ®Èó®ÁÆ°ÁêÜ„ÄÅÁªÑÁªáÊû∂ÊûÑÁª¥Êä§„ÄÅ
//! ‰∫∫Âëò‰ø°ÊÅØÂêåÊ≠•Á≠â‰ºÅ‰∏öÁ∫ßÁªÑÁªáÁÆ°ÁêÜËÉΩÂäõ„ÄÇÊòØ‰ºÅ‰∏ö‰∫∫ÂäõËµÑÊ∫êÂíåÁªÑÁªáÁÆ°ÁêÜÁöÑÊ†∏ÂøÉÂ∑•ÂÖ∑„ÄÇ
//!
//! # Ê†∏ÂøÉÂäüËÉΩ
//!
//! ## ÂëòÂ∑•ÁÆ°ÁêÜ
//! - üë• ÂëòÂ∑•‰ø°ÊÅØÂàõÂª∫„ÄÅÊõ¥Êñ∞ÂíåÂà†Èô§
//! - üìã ÂëòÂ∑•ÂàóË°®Êü•ËØ¢ÂíåÁ≠õÈÄâ
//! - üîç ÂëòÂ∑•‰ø°ÊÅØÊêúÁ¥¢ÂíåÊ£ÄÁ¥¢
//! - üìä ÂëòÂ∑•ÁªüËÆ°ÂíåÂàÜÊûê
//! - üè∑Ô∏è ÂëòÂ∑•Ê†áÁ≠æÂíåÂàÜÁ±ª
//!
//! ## ÈÉ®Èó®ÁÆ°ÁêÜ
//! - üè¢ ÈÉ®Èó®ÁªìÊûÑÂàõÂª∫ÂíåÁª¥Êä§
//! - üìä ÈÉ®Èó®Â±ÇÁ∫ßÂÖ≥Á≥ªÁÆ°ÁêÜ
//! - üëë ÈÉ®Èó®Ë¥üË¥£‰∫∫ËÆæÁΩÆ
//! - üìã ÈÉ®Èó®‰ø°ÊÅØÊü•ËØ¢ÂíåÊõ¥Êñ∞
//! - üîÑ ÈÉ®Èó®ÂêàÂπ∂ÂíåË∞ÉÊï¥
//!
//! ## ÁªÑÁªáÊû∂ÊûÑ
//! - üå≥ ÁªÑÁªáÊû∂ÊûÑÊ†ëÂΩ¢ÁªìÊûÑ
//! - üìà ÁªÑÁªáÂ±ÇÁ∫ßÂÖ≥Á≥ªÁª¥Êä§
//! - üîÑ ÁªÑÁªáÂèòÊõ¥ÂíåË∞ÉÊï¥
//! - üìä ÁªÑÁªáÁªüËÆ°ÂíåÂàÜÊûê
//! - üéØ ÁªÑÁªáÁõÆÊ†áÂíåKPI
//!
//! ## Êï∞ÊçÆÂêåÊ≠•
//! - üîÑ ‰∫∫Âëò‰ø°ÊÅØËá™Âä®ÂêåÊ≠•
//! - üìä Êï∞ÊçÆ‰∏ÄËá¥ÊÄßÊ†°È™å
//! - üîî ÂèòÊõ¥ÈÄöÁü•ÂíåÊèêÈÜí
//! - üìã ÂêåÊ≠•Êó•ÂøóÂíåÂÆ°ËÆ°
//! - üõ†Ô∏è Êï∞ÊçÆ‰øÆÂ§çÂíåÁª¥Êä§
//!
//! # ‰ΩøÁî®Á§∫‰æã
//!
//! ```rust
//! use open_lark::prelude::*;
//!
//! let client = LarkClient::builder("app_id", "app_secret")
//!     .with_app_type(AppType::SelfBuild)
//!     .build();
//!
//! // Ëé∑ÂèñÁªÑÁªáÊû∂ÊûÑÊúçÂä°
//! let directory = &client.directory;
//!
//! // ÂàõÂª∫ÂëòÂ∑•
//! // let employee_request = CreateEmployeeRequest::builder()
//! //     .name("Âº†‰∏â")
//! //     .email("zhangsan@company.com")
//! //     .mobile("13800138000")
//! //     .department_id("dept_123")
//! //     .job_title("ËΩØ‰ª∂Â∑•Á®ãÂ∏à")
//! //     .build();
//! // directory.v1.employee.create(employee_request, None).await?;
//!
//! // Êü•ËØ¢ÂëòÂ∑•ÂàóË°®
//! // let list_request = ListEmployeesRequest::builder()
//! //     .department_id("dept_123")
//! //     .page_size(20)
//! //     .build();
//! // let employees = directory.v1.employee.list(list_request, None).await?;
//!
//! // ÂàõÂª∫ÈÉ®Èó®
//! // let department_request = CreateDepartmentRequest::builder()
//! //     .name("ÊäÄÊúØÈÉ®")
//! //     .parent_id("parent_dept_123")
//! //     .leader_id("leader_user_123")
//! //     .build();
//! // directory.v1.department.create(department_request, None).await?;
//!
//! // Êõ¥Êñ∞ÈÉ®Èó®‰ø°ÊÅØ
//! // let update_request = UpdateDepartmentRequest::builder()
//! //     .department_id("dept_123")
//! //     .name("‰∫ßÂìÅÊäÄÊúØÈÉ®")
//! //     .description("Ë¥üË¥£‰∫ßÂìÅÊäÄÊúØÁ†îÂèë")
//! //     .build();
//! // directory.v1.department.update(update_request, None).await?;
//! ```
//!
//! # APIÁâàÊú¨
//!
//! ÂΩìÂâçÊîØÊåÅv1ÁâàÊú¨ÔºåÊèê‰æõÂü∫Á°ÄÁöÑÁªÑÁªáÊû∂ÊûÑÂäüËÉΩÔºö
//! - ÂëòÂ∑•ÂÖ®ÁîüÂëΩÂë®ÊúüÁÆ°ÁêÜ
//! - ÈÉ®Èó®ÁªìÊûÑÁÆ°ÁêÜ
//! - ÁªÑÁªáÊû∂ÊûÑÁª¥Êä§
//! - Êï∞ÊçÆÂêåÊ≠•ÂíåÊ†°È™å
//!
//! # ÁªÑÁªáÁÆ°ÁêÜÁâπÊÄß
//!
//! - üè¢ ÁÅµÊ¥ªÁöÑÁªÑÁªáÊû∂ÊûÑËÆæËÆ°
//! - üë• ÂÆåÂñÑÁöÑ‰∫∫ÂëòÁÆ°ÁêÜ‰ΩìÁ≥ª
//! - üìä ÂÆûÊó∂Êï∞ÊçÆÂêåÊ≠•Êõ¥Êñ∞
//! - üîê ÊùÉÈôêÊéßÂà∂ÂíåÂÆâÂÖ®‰øùÈöú
//! - üì± ÁßªÂä®Á´ØÁÆ°ÁêÜÊîØÊåÅ
//!
//! # ‰∫∫ÂäõËµÑÊ∫êÈõÜÊàê
//!
//! - üíº HRÁ≥ªÁªüÊ∑±Â∫¶ÈõÜÊàê
//! - üìã ‰∫∫‰∫ãÊµÅÁ®ãËá™Âä®Âåñ
//! - üìä ‰∫∫ÂäõËµÑÊ∫êÊï∞ÊçÆÂàÜÊûê
//! - üéØ Áª©ÊïàËÄÉÊ†∏ÊîØÊåÅ
//! - üìà ÁªÑÁªáÂèëÂ±ïËßÑÂàí

use crate::core::config::Config;

/// ÁªÑÁªáÊû∂ÊûÑÊúçÂä° v1 ÁâàÊú¨
pub mod v1;

/// ÁªÑÁªáÊû∂ÊûÑÊúçÂä°
///
/// ‰ºÅ‰∏öÁ∫ßÁªÑÁªáÁÆ°ÁêÜÁöÑÁªü‰∏ÄÂÖ•Âè£ÔºåÊèê‰æõÂëòÂ∑•ÁÆ°ÁêÜ„ÄÅÈÉ®Èó®ÁÆ°ÁêÜ„ÄÅ
/// ÁªÑÁªáÊû∂ÊûÑÁª¥Êä§„ÄÅÊï∞ÊçÆÂêåÊ≠•Á≠âÂÆåÊï¥ÁöÑÁªÑÁªáÁÆ°ÁêÜËÉΩÂäõ„ÄÇ
///
/// # ÊúçÂä°Êû∂ÊûÑ
///
/// - **v1**: ÁªÑÁªáÊû∂ÊûÑAPI v1ÁâàÊú¨ÔºåÊèê‰æõÂü∫Á°ÄÂäüËÉΩÈõÜ
///
/// # Ê†∏ÂøÉÁâπÊÄß
///
/// - üë• ÂÖ®Èù¢ÁöÑÂëòÂ∑•ÁÆ°ÁêÜÂäüËÉΩ
/// - üè¢ ÁÅµÊ¥ªÁöÑÈÉ®Èó®ÁÆ°ÁêÜÁ≥ªÁªü
/// - üå≥ ÂÆåÊï¥ÁöÑÁªÑÁªáÊû∂ÊûÑÁª¥Êä§
/// - üîÑ Êô∫ËÉΩÁöÑÊï∞ÊçÆÂêåÊ≠•Êú∫Âà∂
/// - üìä ‰∏∞ÂØåÁöÑÁªüËÆ°ÂàÜÊûêÂäüËÉΩ
///
/// # ÈÄÇÁî®Âú∫ÊôØ
///
/// - ‰ºÅ‰∏öÁªÑÁªáÊû∂ÊûÑÁÆ°ÁêÜ
/// - ‰∫∫Âëò‰ø°ÊÅØÁÆ°ÁêÜÂíåÁª¥Êä§
/// - ÈÉ®Èó®ÁªìÊûÑË∞ÉÊï¥Âíå‰ºòÂåñ
/// - HRÁ≥ªÁªüÊï∞ÊçÆÂêåÊ≠•
/// - ÁªÑÁªáÂèòÊõ¥ÁÆ°ÁêÜ
///
/// # ÊúÄ‰Ω≥ÂÆûË∑µ
///
/// - Âª∫Á´ãÊ∏ÖÊô∞ÁöÑÁªÑÁªáÂ±ÇÁ∫ß
/// - ÂÆöÊúüÁª¥Êä§‰∫∫Âëò‰ø°ÊÅØ
/// - ÂêàÁêÜËÆæÁΩÆÈÉ®Èó®ÊùÉÈôê
/// - ÁõëÊéßÊï∞ÊçÆÂêåÊ≠•Áä∂ÊÄÅ
/// - ‰øùÊä§ÂëòÂ∑•ÈöêÁßÅ‰ø°ÊÅØ
///
/// # Á§∫‰æãÁî®Ê≥ï
///
/// ```rust,ignore
/// use open_lark::LarkClient;
///
/// let client = LarkClient::builder("app_id", "app_secret").build();
///
/// // ÂàõÂª∫ÂëòÂ∑•
/// let response = client.directory.v1.employee.create(request, None).await?;
///
/// // ÂàõÂª∫ÈÉ®Èó®
/// let response = client.directory.v1.department.create(request, None).await?;
/// ```
pub struct DirectoryService {
    /// v1ÁâàÊú¨APIÊúçÂä°
    pub v1: v1::V1,
}

impl DirectoryService {
    /// ÂàõÂª∫Êñ∞ÁöÑÁªÑÁªáÊû∂ÊûÑÊúçÂä°ÂÆû‰æã
    ///
    /// # ÂèÇÊï∞
    /// - `config`: ÂÆ¢Êà∑Á´ØÈÖçÁΩÆÔºåÂåÖÂê´ËÆ§ËØÅ‰ø°ÊÅØÂíåAPIËÆæÁΩÆ
    ///
    /// # ËøîÂõûÂÄº
    /// ÈÖçÁΩÆÂÆåÊàêÁöÑÁªÑÁªáÊû∂ÊûÑÊúçÂä°ÂÆû‰æã
    pub fn new(config: Config) -> Self {
        Self {
            v1: v1::V1::new(config),
        }
    }

    /// ‰ΩøÁî®ÂÖ±‰∫´ÈÖçÁΩÆÂàõÂª∫ÊúçÂä°ÔºàÂÆûÈ™åÊÄßÔºâ
    pub fn new_from_shared(shared: std::sync::Arc<Config>) -> Self {
        Self { v1: v1::V1::new(shared.as_ref().clone()) }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::time::Duration;

    #[test]
    fn test_directory_service_creation() {
        let config = Config::default();
        let service = DirectoryService::new(config.clone());

        assert_eq!(service.v1.employee.config.app_id, config.app_id);
        assert_eq!(service.v1.employee.config.app_secret, config.app_secret);
        assert_eq!(service.v1.department.config.app_id, config.app_id);
        assert_eq!(service.v1.department.config.app_secret, config.app_secret);
    }

    #[test]
    fn test_directory_service_with_custom_config() {
        let config = Config::builder()
            .app_id("directory_test_app")
            .app_secret("directory_test_secret")
            .req_timeout(Duration::from_secs(250))
            .build();

        let service = DirectoryService::new(config.clone());

        assert_eq!(service.v1.employee.config.app_id, "directory_test_app");
        assert_eq!(
            service.v1.employee.config.app_secret,
            "directory_test_secret"
        );
        assert_eq!(
            service.v1.employee.config.req_timeout,
            Some(Duration::from_secs(250))
        );
        assert_eq!(service.v1.department.config.app_id, "directory_test_app");
        assert_eq!(
            service.v1.department.config.req_timeout,
            Some(Duration::from_secs(250))
        );
    }

    #[test]
    fn test_directory_service_config_independence() {
        let config1 = Config::builder().app_id("directory_app_1").build();

        let config2 = Config::builder().app_id("directory_app_2").build();

        let service1 = DirectoryService::new(config1);
        let service2 = DirectoryService::new(config2);

        assert_eq!(service1.v1.employee.config.app_id, "directory_app_1");
        assert_eq!(service2.v1.employee.config.app_id, "directory_app_2");
        assert_ne!(
            service1.v1.employee.config.app_id,
            service2.v1.employee.config.app_id
        );
        assert_ne!(
            service1.v1.department.config.app_id,
            service2.v1.department.config.app_id
        );
    }

    #[test]
    fn test_directory_service_sub_services_accessible() {
        let config = Config::default();
        let service = DirectoryService::new(config.clone());

        assert_eq!(service.v1.employee.config.app_id, config.app_id);
        assert_eq!(service.v1.department.config.app_id, config.app_id);
    }

    #[test]
    fn test_directory_service_config_cloning() {
        let config = Config::builder()
            .app_id("clone_test_app")
            .app_secret("clone_test_secret")
            .build();

        let service = DirectoryService::new(config.clone());

        assert_eq!(service.v1.employee.config.app_id, "clone_test_app");
        assert_eq!(service.v1.employee.config.app_secret, "clone_test_secret");
        assert_eq!(service.v1.department.config.app_secret, "clone_test_secret");
        assert_eq!(service.v1.department.config.app_id, "clone_test_app");
    }

    #[test]
    fn test_directory_service_timeout_propagation() {
        let config = Config::builder()
            .req_timeout(Duration::from_secs(260))
            .build();

        let service = DirectoryService::new(config);

        assert_eq!(
            service.v1.employee.config.req_timeout,
            Some(Duration::from_secs(260))
        );
        assert_eq!(
            service.v1.department.config.req_timeout,
            Some(Duration::from_secs(260))
        );
    }

    #[test]
    fn test_directory_service_multiple_instances() {
        let config = Config::default();

        let service1 = DirectoryService::new(config.clone());
        let service2 = DirectoryService::new(config.clone());

        assert_eq!(
            service1.v1.employee.config.app_id,
            service2.v1.employee.config.app_id
        );
        assert_eq!(
            service1.v1.employee.config.app_secret,
            service2.v1.employee.config.app_secret
        );
        assert_eq!(
            service1.v1.department.config.app_id,
            service2.v1.department.config.app_id
        );
        assert_eq!(
            service1.v1.department.config.app_secret,
            service2.v1.department.config.app_secret
        );
    }

    #[test]
    fn test_directory_service_config_consistency() {
        let config = Config::builder()
            .app_id("consistency_test")
            .app_secret("consistency_secret")
            .req_timeout(Duration::from_secs(180))
            .build();

        let service = DirectoryService::new(config);

        assert_eq!(service.v1.employee.config.app_id, "consistency_test");
        assert_eq!(service.v1.employee.config.app_secret, "consistency_secret");
        assert_eq!(
            service.v1.employee.config.req_timeout,
            Some(Duration::from_secs(180))
        );
        assert_eq!(service.v1.department.config.app_id, "consistency_test");
        assert_eq!(
            service.v1.department.config.app_secret,
            "consistency_secret"
        );
        assert_eq!(
            service.v1.department.config.req_timeout,
            Some(Duration::from_secs(180))
        );
    }
}
