//! ‰ºÅ‰∏ö‰ø°ÊÅØÔºàTenantÔºâÊúçÂä°
//!
//! Êèê‰æõÈ£û‰π¶‰ºÅ‰∏ö‰ø°ÊÅØÁÆ°ÁêÜÁöÑÂÆåÊï¥ÂäüËÉΩÈõÜÔºåÊîØÊåÅ‰ºÅ‰∏öÂü∫Êú¨‰ø°ÊÅØÊü•ËØ¢„ÄÅ‰∫ßÂìÅÈÖçÁΩÆ„ÄÅ
//! ÁÆ°ÁêÜÂëòËÆæÁΩÆ„ÄÅ‰ºÅ‰∏öÊùÉÈôêÁ≠â‰ºÅ‰∏öÁ∫ßÁÆ°ÁêÜËÉΩÂäõ„ÄÇÊòØ‰ºÅ‰∏öÁÆ°ÁêÜÂíåÈÖçÁΩÆÁöÑÊ†∏ÂøÉÊúçÂä°„ÄÇ
//!
//! # Ê†∏ÂøÉÂäüËÉΩ
//!
//! ## ‰ºÅ‰∏ö‰ø°ÊÅØÁÆ°ÁêÜ
//! - üè¢ ‰ºÅ‰∏öÂü∫Êú¨‰ø°ÊÅØÊü•ËØ¢ÂíåÊõ¥Êñ∞
//! - üÜî ‰ºÅ‰∏öIDÂíåÂüüÂêçÁÆ°ÁêÜ
//! - üìä ‰ºÅ‰∏öËßÑÊ®°ÂíåÁ±ªÂûã‰ø°ÊÅØ
//! - üåç ‰ºÅ‰∏öÂú∞ÁêÜ‰ΩçÁΩÆÂíåÊó∂Âå∫
//! - üìû ‰ºÅ‰∏öËÅîÁ≥ªÊñπÂºèÁÆ°ÁêÜ
//!
//! ## ‰∫ßÂìÅÈÖçÁΩÆÁÆ°ÁêÜ
//! - üì¶ ‰ºÅ‰∏ö‰∫ßÂìÅÊéàÊùÉÂíåÈÖçÁΩÆ
//! - üí∞ ‰∫ßÂìÅËÆ°Ë¥πÂíåËÆ¢ÈòÖÁÆ°ÁêÜ
//! - üéØ ÂäüËÉΩÊ®°ÂùóÂêØÁî®ÂíåÁ¶ÅÁî®
//! - üìà ‰∫ßÂìÅ‰ΩøÁî®ÊÉÖÂÜµÁªüËÆ°
//! - üîÑ ‰∫ßÂìÅÂçáÁ∫ßÂíåÂèòÊõ¥
//!
//! ## ÁÆ°ÁêÜÂëòÊùÉÈôê
//! - üëë Ë∂ÖÁ∫ßÁÆ°ÁêÜÂëòËÆæÁΩÆÂíåÁÆ°ÁêÜ
//! - üîê ÁÆ°ÁêÜÂëòÊùÉÈôêÂàÜÈÖçÂíåÊéßÂà∂
//! - üìã ÁÆ°ÁêÜÂëòÊìç‰ΩúÊó•ÂøóËÆ∞ÂΩï
//! - üõ°Ô∏è ÂÆâÂÖ®Á≠ñÁï•ÂíåËÆøÈóÆÊéßÂà∂
//! - üë• ÁÆ°ÁêÜÂëòËßíËâ≤ÂíåËÅåË¥£ÂÆö‰πâ
//!
//! ## ‰ºÅ‰∏öËÆæÁΩÆ
//! - ‚öôÔ∏è ‰ºÅ‰∏öÁ∫ßÂäüËÉΩËÆæÁΩÆÂíåÈÖçÁΩÆ
//! - üîí ÂÆâÂÖ®Á≠ñÁï•ÂíåÂêàËßÑËÆæÁΩÆ
//! - üìß ÈÄöÁü•ÂíåÊ∂àÊÅØÊé®ÈÄÅÈÖçÁΩÆ
//! - üé® ‰ºÅ‰∏öÂìÅÁâåÂíåÂ§ñËßÇÂÆöÂà∂
//! - üîó Á¨¨‰∏âÊñπÈõÜÊàêÂíåÂØπÊé•
//!
//! # ‰ΩøÁî®Á§∫‰æã
//!
//! ```rust
//! use open_lark::prelude::*;
//!
//! let client = LarkClient::builder("app_id", "app_secret")
//!     .with_app_type(AppType::SelfBuild)
//!     .build();
//!
//! // Ëé∑Âèñ‰ºÅ‰∏ö‰ø°ÊÅØÊúçÂä°
//! let tenant = &client.tenant;
//!
//! // Êü•ËØ¢‰ºÅ‰∏öÂü∫Êú¨‰ø°ÊÅØ
//! // let tenant_request = GetTenantInfoRequest::builder()
//! //     .build();
//! // let tenant_info = tenant.v2.tenant.get(tenant_request, None).await?;
//!
//! // Êü•ËØ¢‰∫ßÂìÅÈÖçÁΩÆ‰ø°ÊÅØ
//! // let product_request = GetProductAssignInfoRequest::builder()
//! //     .build();
//! // let product_info = tenant.v2.tenant_product_assign_info.get(product_request, None).await?;
//!
//! // Êü•ËØ¢ÁÆ°ÁêÜÂëòÂàóË°®
//! // let admin_request = ListAdminRequest::builder()
//! //     .page_size(20)
//! //     .build();
//! // let admins = tenant.v2.admin.list(admin_request, None).await?;
//! ```
//!
//! # APIÁâàÊú¨
//!
//! ÂΩìÂâçÊîØÊåÅv2ÁâàÊú¨ÔºåÊòØÊúÄÊñ∞ÁöÑÁ®≥ÂÆöÁâàÊú¨ÔºåÊèê‰æõÔºö
//! - ÂÆåÊï¥ÁöÑ‰ºÅ‰∏ö‰ø°ÊÅØÁÆ°ÁêÜÂäüËÉΩ
//! - ËØ¶ÁªÜÁöÑ‰∫ßÂìÅÈÖçÁΩÆÁÆ°ÁêÜ
//! - ÂÖ®Èù¢ÁöÑÊùÉÈôêÂíåÂÆâÂÖ®ÊéßÂà∂
//! - ‰∏∞ÂØåÁöÑ‰ºÅ‰∏öËÆæÁΩÆÈÄâÈ°π
//!
//! # ‰ºÅ‰∏öÁÆ°ÁêÜÁâπÊÄß
//!
//! - üè¢ Â§öÁßüÊà∑Êû∂ÊûÑÊîØÊåÅ
//! - üîê ‰ºÅ‰∏öÁ∫ßÂÆâÂÖ®‰øùÈöú
//! - üìä ÂÆûÊó∂Êï∞ÊçÆÂêåÊ≠•Êõ¥Êñ∞
//! - üåç ÂÖ®ÁêÉÂåñÂíåÊú¨Âú∞ÂåñÊîØÊåÅ
//! - üîó ÁÅµÊ¥ªÁöÑÈõÜÊàêËÉΩÂäõ
//!
//! # ÁÆ°ÁêÜÂäüËÉΩ
//!
//! - üëë ÂàÜÁ∫ßÁÆ°ÁêÜÊùÉÈôê‰ΩìÁ≥ª
//! - üìã ËØ¶ÁªÜÁöÑÊìç‰ΩúÂÆ°ËÆ°Êó•Âøó
//! - üõ°Ô∏è Â§öÂ±ÇÊ¨°ÂÆâÂÖ®Èò≤Êä§
//! - ‚öôÔ∏è ÁÅµÊ¥ªÁöÑÈÖçÁΩÆÁÆ°ÁêÜ
//! - üìà ‰ºÅ‰∏öËøêËê•Êï∞ÊçÆÂàÜÊûê

/// Êï∞ÊçÆÊ®°ÂûãÂÆö‰πâ
pub mod models;
/// ‰ºÅ‰∏ö‰ø°ÊÅØÊúçÂä° v2 ÁâàÊú¨
pub mod v2;

use crate::core::config::Config;

/// ‰ºÅ‰∏ö‰ø°ÊÅØÊúçÂä°
///
/// ‰ºÅ‰∏öÁ∫ß‰ø°ÊÅØÁÆ°ÁêÜÁöÑÁªü‰∏ÄÂÖ•Âè£ÔºåÊèê‰æõ‰ºÅ‰∏öÂü∫Êú¨‰ø°ÊÅØ„ÄÅ‰∫ßÂìÅÈÖçÁΩÆ„ÄÅ
/// ÁÆ°ÁêÜÂëòÊùÉÈôê„ÄÅ‰ºÅ‰∏öËÆæÁΩÆÁ≠âÂÆåÊï¥ÁöÑ‰ºÅ‰∏öÁÆ°ÁêÜËÉΩÂäõ„ÄÇ
///
/// # ÊúçÂä°Êû∂ÊûÑ
///
/// - **v2**: ÊúÄÊñ∞ÁâàÊú¨APIÔºåÊèê‰æõÂÆåÊï¥ÁöÑ‰ºÅ‰∏öÁÆ°ÁêÜÂäüËÉΩÈõÜ
/// - **models**: Êï∞ÊçÆÊ®°ÂûãÂíåÁªìÊûÑÂÆö‰πâ
///
/// # Ê†∏ÂøÉÁâπÊÄß
///
/// - üè¢ ÂÖ®Èù¢ÁöÑ‰ºÅ‰∏ö‰ø°ÊÅØÁÆ°ÁêÜ
/// - üì¶ ÁÅµÊ¥ªÁöÑ‰∫ßÂìÅÈÖçÁΩÆÁÆ°ÁêÜ
/// - üëë ÂÆåÂñÑÁöÑÊùÉÈôêÁÆ°ÁêÜ‰ΩìÁ≥ª
/// - ‚öôÔ∏è ‰∏∞ÂØåÁöÑ‰ºÅ‰∏öËÆæÁΩÆÈÄâÈ°π
/// - üîê ‰ºÅ‰∏öÁ∫ßÂÆâÂÖ®‰øùÈöú
///
/// # ÈÄÇÁî®Âú∫ÊôØ
///
/// - ‰ºÅ‰∏öÂü∫Á°Ä‰ø°ÊÅØÁÆ°ÁêÜ
/// - ‰∫ßÂìÅÊéàÊùÉÂíåÈÖçÁΩÆ
/// - ÁÆ°ÁêÜÂëòÊùÉÈôêÂàÜÈÖç
/// - ‰ºÅ‰∏öÂÆâÂÖ®Á≠ñÁï•ËÆæÁΩÆ
/// - ‰ºÅ‰∏öÁ∫ßÂäüËÉΩÈÖçÁΩÆ
///
/// # ÊúÄ‰Ω≥ÂÆûË∑µ
///
/// - ÂÆöÊúüÊõ¥Êñ∞‰ºÅ‰∏ö‰ø°ÊÅØ
/// - ÂêàÁêÜÂàÜÈÖçÁÆ°ÁêÜÂëòÊùÉÈôê
/// - ËÆæÁΩÆÂêàÈÄÇÁöÑÂÆâÂÖ®Á≠ñÁï•
/// - ÁõëÊéß‰∫ßÂìÅ‰ΩøÁî®ÊÉÖÂÜµ
/// - ‰øùÊä§‰ºÅ‰∏öÊïèÊÑü‰ø°ÊÅØ
pub struct TenantService {
    /// v2ÁâàÊú¨APIÊúçÂä°
    pub v2: v2::V2,
}

impl TenantService {
    /// ÂàõÂª∫Êñ∞ÁöÑ‰ºÅ‰∏ö‰ø°ÊÅØÊúçÂä°ÂÆû‰æã
    ///
    /// # ÂèÇÊï∞
    /// - `config`: ÂÆ¢Êà∑Á´ØÈÖçÁΩÆÔºåÂåÖÂê´ËÆ§ËØÅ‰ø°ÊÅØÂíåAPIËÆæÁΩÆ
    ///
    /// # ËøîÂõûÂÄº
    /// ÈÖçÁΩÆÂÆåÊàêÁöÑ‰ºÅ‰∏ö‰ø°ÊÅØÊúçÂä°ÂÆû‰æã
    pub fn new(config: Config) -> Self {
        Self { v2: v2::V2::new(config) }
    }

    /// ‰ΩøÁî®ÂÖ±‰∫´ÈÖçÁΩÆÂàõÂª∫ÊúçÂä°ÔºàÂÆûÈ™åÊÄßÔºâ
    pub fn new_from_shared(shared: std::sync::Arc<Config>) -> Self {
        Self { v2: v2::V2::new_from_shared(shared) }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::time::Duration;

    #[test]
    fn test_tenant_service_creation() {
        let config = Config::default();
        let service = TenantService::new(config.clone());

        assert_eq!(service.v2.tenant.config.app_id, config.app_id);
        assert_eq!(service.v2.tenant.config.app_secret, config.app_secret);
        assert_eq!(
            service.v2.tenant_product_assign_info.config.app_id,
            config.app_id
        );
        assert_eq!(
            service.v2.tenant_product_assign_info.config.app_secret,
            config.app_secret
        );
    }

    #[test]
    fn test_tenant_service_with_custom_config() {
        let config = Config::builder()
            .app_id("tenant_test_app")
            .app_secret("tenant_test_secret")
            .req_timeout(Duration::from_secs(160))
            .build();

        let service = TenantService::new(config.clone());

        assert_eq!(service.v2.tenant.config.app_id, "tenant_test_app");
        assert_eq!(service.v2.tenant.config.app_secret, "tenant_test_secret");
        assert_eq!(
            service.v2.tenant.config.req_timeout,
            Some(Duration::from_secs(160))
        );
        assert_eq!(
            service.v2.tenant_product_assign_info.config.app_id,
            "tenant_test_app"
        );
        assert_eq!(
            service.v2.tenant_product_assign_info.config.req_timeout,
            Some(Duration::from_secs(160))
        );
    }

    #[test]
    fn test_tenant_service_config_independence() {
        let config1 = Config::builder().app_id("tenant_app_1").build();

        let config2 = Config::builder().app_id("tenant_app_2").build();

        let service1 = TenantService::new(config1);
        let service2 = TenantService::new(config2);

        assert_eq!(service1.v2.tenant.config.app_id, "tenant_app_1");
        assert_eq!(service2.v2.tenant.config.app_id, "tenant_app_2");
        assert_ne!(
            service1.v2.tenant.config.app_id,
            service2.v2.tenant.config.app_id
        );
        assert_ne!(
            service1.v2.tenant_product_assign_info.config.app_id,
            service2.v2.tenant_product_assign_info.config.app_id
        );
    }

    #[test]
    fn test_tenant_service_sub_services_accessible() {
        let config = Config::default();
        let service = TenantService::new(config.clone());

        assert_eq!(service.v2.tenant.config.app_id, config.app_id);
        assert_eq!(
            service.v2.tenant_product_assign_info.config.app_id,
            config.app_id
        );
    }

    #[test]
    fn test_tenant_service_config_cloning() {
        let config = Config::builder()
            .app_id("clone_test_app")
            .app_secret("clone_test_secret")
            .build();

        let service = TenantService::new(config.clone());

        assert_eq!(service.v2.tenant.config.app_id, "clone_test_app");
        assert_eq!(service.v2.tenant.config.app_secret, "clone_test_secret");
        assert_eq!(
            service.v2.tenant_product_assign_info.config.app_secret,
            "clone_test_secret"
        );
        assert_eq!(
            service.v2.tenant_product_assign_info.config.app_id,
            "clone_test_app"
        );
    }

    #[test]
    fn test_tenant_service_timeout_propagation() {
        let config = Config::builder()
            .req_timeout(Duration::from_secs(170))
            .build();

        let service = TenantService::new(config);

        assert_eq!(
            service.v2.tenant.config.req_timeout,
            Some(Duration::from_secs(170))
        );
        assert_eq!(
            service.v2.tenant_product_assign_info.config.req_timeout,
            Some(Duration::from_secs(170))
        );
    }

    #[test]
    fn test_tenant_service_multiple_instances() {
        let config = Config::default();

        let service1 = TenantService::new(config.clone());
        let service2 = TenantService::new(config.clone());

        assert_eq!(
            service1.v2.tenant.config.app_id,
            service2.v2.tenant.config.app_id
        );
        assert_eq!(
            service1.v2.tenant.config.app_secret,
            service2.v2.tenant.config.app_secret
        );
        assert_eq!(
            service1.v2.tenant_product_assign_info.config.app_id,
            service2.v2.tenant_product_assign_info.config.app_id
        );
        assert_eq!(
            service1.v2.tenant_product_assign_info.config.app_secret,
            service2.v2.tenant_product_assign_info.config.app_secret
        );
    }

    #[test]
    fn test_tenant_service_config_consistency() {
        let config = Config::builder()
            .app_id("consistency_test")
            .app_secret("consistency_secret")
            .req_timeout(Duration::from_secs(140))
            .build();

        let service = TenantService::new(config);

        assert_eq!(service.v2.tenant.config.app_id, "consistency_test");
        assert_eq!(service.v2.tenant.config.app_secret, "consistency_secret");
        assert_eq!(
            service.v2.tenant.config.req_timeout,
            Some(Duration::from_secs(140))
        );
        assert_eq!(
            service.v2.tenant_product_assign_info.config.app_id,
            "consistency_test"
        );
        assert_eq!(
            service.v2.tenant_product_assign_info.config.app_secret,
            "consistency_secret"
        );
        assert_eq!(
            service.v2.tenant_product_assign_info.config.req_timeout,
            Some(Duration::from_secs(140))
        );
    }
}
