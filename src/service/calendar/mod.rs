//! Êó•ÂéÜÔºàCalendarÔºâÊúçÂä°
//!
//! Êèê‰æõÈ£û‰π¶Êó•ÂéÜÁöÑÂÆåÊï¥ÂäüËÉΩÈõÜÔºåÊîØÊåÅÊó•ÂéÜÁÆ°ÁêÜ„ÄÅÊó•Á®ãÂÆâÊéí„ÄÅ‰ºöËÆÆÂÆ§È¢ÑËÆ¢Á≠â
//! ‰ºÅ‰∏öÁ∫ßÊó∂Èó¥ÁÆ°ÁêÜÈúÄÊ±Ç„ÄÇÊòØÂõ¢ÈòüÂçè‰ΩúÂíåÊó∂Èó¥ËßÑÂàíÁöÑÊ†∏ÂøÉÊúçÂä°Ê®°Âùó„ÄÇ
//!
//! # Ê†∏ÂøÉÂäüËÉΩ
//!
//! ## Êó•ÂéÜÁÆ°ÁêÜ
//! - üìÖ ‰∏™‰∫∫ÂíåÂÖ±‰∫´Êó•ÂéÜÁöÑÂàõÂª∫‰∏éÁÆ°ÁêÜ
//! - üé® Êó•ÂéÜÂ§ñËßÇÂíåÂ±ûÊÄßËÆæÁΩÆ
//! - üë• Êó•ÂéÜÂÖ±‰∫´ÂíåÊùÉÈôêÊéßÂà∂
//! - üîÑ Êó•ÂéÜÂêåÊ≠•ÂíåÂØºÂÖ•ÂØºÂá∫
//!
//! ## Êó•Á®ãÁÆ°ÁêÜ
//! - üìù Êó•Á®ãÁöÑÂ¢ûÂà†ÊîπÊü•Êìç‰Ωú
//! - ‚è∞ ÊèêÈÜíÂíåÈÄöÁü•ËÆæÁΩÆ
//! - üîÑ ÈáçÂ§çÊó•Á®ãÂíåËßÑÂàôÈÖçÁΩÆ
//! - üìã Êó•Á®ãËØ¶ÊÉÖÂíåÊèèËø∞ÁÆ°ÁêÜ
//!
//! ## ‰ºöËÆÆÂÆ§ÁÆ°ÁêÜ
//! - üè¢ ‰ºöËÆÆÂÆ§‰ø°ÊÅØÂíåËµÑÊ∫êÁÆ°ÁêÜ
//! - üìÖ ‰ºöËÆÆÂÆ§È¢ÑËÆ¢ÂíåÂÜ≤Á™ÅÊ£ÄÊµã
//! - üìä ‰ºöËÆÆÂÆ§‰ΩøÁî®ÁªüËÆ°ÂíåÂàÜÊûê
//! - üîß ‰ºöËÆÆÂÆ§ËÆæÂ§áÂíåËÆæÊñΩÈÖçÁΩÆ
//!
//! ## ÂèÇ‰∏é‰∫∫ÁÆ°ÁêÜ
//! - üë§ Êó•Á®ãÂèÇ‰∏éËÄÖÁöÑÈÇÄËØ∑ÂíåÁÆ°ÁêÜ
//! - ‚úÖ ÂèÇ‰∏éÁä∂ÊÄÅË∑üË∏™ÔºàÊé•Âèó/ÊãíÁªù/ÂæÖÂÆöÔºâ
//! - üìß ÈÇÄËØ∑ÈÄöÁü•ÂíåÊèêÈÜíÂèëÈÄÅ
//! - üîÑ ÂèÇ‰∏éËÄÖÊùÉÈôêÂíåËßíËâ≤ËÆæÁΩÆ
//!
//! ## È´òÁ∫ßÂäüËÉΩ
//! - üèñÔ∏è ËØ∑ÂÅáÊó•Á®ãÂíåÂÅáÊúüÁÆ°ÁêÜ
//! - üìù ‰ºöËÆÆÁ∫™Ë¶ÅÂíåËÆ∞ÂΩïÂÖ≥ËÅî
//! - üîó CalDAVÊ†áÂáÜÂçèËÆÆÊîØÊåÅ
//! - üìß ExchangeÊó•ÂéÜÈõÜÊàêÂíåÂêåÊ≠•
//!
//! # ‰ΩøÁî®Á§∫‰æã
//!
//! ```rust
//! use open_lark::prelude::*;
//!
//! let client = LarkClient::builder("app_id", "app_secret")
//!     .with_app_type(AppType::SelfBuild)
//!     .build();
//!
//! // Ëé∑ÂèñÊó•ÂéÜÊúçÂä°
//! let calendar = &client.calendar;
//!
//! // ÂàõÂª∫Êó•ÂéÜÁ§∫‰æã
//! // let create_calendar_req = CreateCalendarRequest::builder()
//! //     .summary("Âõ¢ÈòüÊó•ÂéÜ")
//! //     .description("Âõ¢ÈòüÊó•Á®ãÂÆâÊéíÂíå‰ºöËÆÆ")
//! //     .build();
//! // let calendar_result = calendar.v4.calendar.create(create_calendar_req, None).await?;
//!
//! // ÂàõÂª∫Êó•Á®ãÁ§∫‰æã
//! // let create_event_req = CreateEventRequest::builder()
//! //     .calendar_id("calendar_id")
//! //     .summary("Âõ¢ÈòüÂë®‰ºö")
//! //     .start_time("2024-07-01T10:00:00")
//! //     .end_time("2024-07-01T11:00:00")
//! //     .build();
//! // let event_result = calendar.v4.calendar_event.create(create_event_req, None).await?;
//! ```
//!
//! # APIÁâàÊú¨
//!
//! ÂΩìÂâçÊîØÊåÅv4ÁâàÊú¨ÔºåÊòØÊúÄÊñ∞ÁöÑÁ®≥ÂÆöÁâàÊú¨ÔºåÊèê‰æõÔºö
//! - ÂÆåÊï¥ÁöÑÊó•ÂéÜÂíåÊó•Á®ãÁÆ°ÁêÜÂäüËÉΩ
//! - È´òÊÄßËÉΩÁöÑÊâπÈáèÊìç‰ΩúÊîØÊåÅ
//! - ‰∏∞ÂØåÁöÑÊü•ËØ¢ÂíåÁ≠õÈÄâÈÄâÈ°π
//! - ‰ºÅ‰∏öÁ∫ßÁöÑÂÆâÂÖ®ÂíåÊùÉÈôêÊéßÂà∂
//!
//! # ÈõÜÊàêÁâπÊÄß
//!
//! - üì± ÁßªÂä®Á´ØÂíåÊ°åÈù¢Á´ØÂêåÊ≠•
//! - üîó Á¨¨‰∏âÊñπÊó•ÂéÜÁ≥ªÁªüÈõÜÊàê
//! - üìä Êï∞ÊçÆÂàÜÊûêÂíåÊä•Ë°®ÊîØÊåÅ
//! - üîí ‰ºÅ‰∏öÂÆâÂÖ®Á≠ñÁï•ÂÖºÂÆπ

use crate::core::config::Config;

/// Êó•ÂéÜÊúçÂä° v4 ÁâàÊú¨
pub mod v4;

use v4::V4;

/// Êó•ÂéÜÊúçÂä°
///
/// È£û‰π¶Êó•ÂéÜÂäüËÉΩÁöÑÁªü‰∏ÄÁÆ°ÁêÜÂÖ•Âè£ÔºåÊèê‰æõÂÆåÊï¥ÁöÑÊó∂Èó¥ÁÆ°ÁêÜÂíåÊó•Á®ãÂçè‰ΩúËÉΩÂäõ„ÄÇ
/// ÊîØÊåÅ‰∏™‰∫∫Êó•Á®ãÁÆ°ÁêÜ„ÄÅÂõ¢ÈòüÂçè‰Ωú„ÄÅ‰ºöËÆÆÂÆ§È¢ÑËÆ¢Á≠â‰ºÅ‰∏öÁ∫ßÈúÄÊ±Ç„ÄÇ
///
/// # ÊúçÂä°Êû∂ÊûÑ
///
/// - **v4**: ÊúÄÊñ∞ÁâàÊú¨APIÔºåÊèê‰æõÂÆåÊï¥ÁöÑÊó•ÂéÜÂäüËÉΩÈõÜ
///
/// # Ê†∏ÂøÉÁâπÊÄß
///
/// - üöÄ È´òÊÄßËÉΩÊó•Á®ãÊü•ËØ¢ÂíåÊìç‰Ωú
/// - üë• Â§ö‰∫∫Âçè‰ΩúÂíåÂÜ≤Á™ÅÊ£ÄÊµã
/// - üîî Êô∫ËÉΩÊèêÈÜíÂíåÈÄöÁü•Á≥ªÁªü
/// - üì± Ë∑®Âπ≥Âè∞ÂêåÊ≠•ÂíåËÆøÈóÆ
/// - üîê ‰ºÅ‰∏öÁ∫ßÊùÉÈôêÂíåÂÆâÂÖ®ÊéßÂà∂
///
/// # ÈÄÇÁî®Âú∫ÊôØ
///
/// - ‰ºÅ‰∏öÂõ¢ÈòüÊó•Á®ãÂçèË∞É
/// - ‰ºöËÆÆÂÆ§ËµÑÊ∫êÁÆ°ÁêÜ
/// - È°πÁõÆÊó∂Èó¥ËßÑÂàí
/// - ‰∏™‰∫∫Êó∂Èó¥ÁÆ°ÁêÜ
/// - Ë∑®ÈÉ®Èó®Âçè‰ΩúÂÆâÊéí
///
/// # ÊúÄ‰Ω≥ÂÆûË∑µ
///
/// - ÂêàÁêÜËÆæÁΩÆÊó•Á®ãÊèêÈÜíÊó∂Èó¥
/// - ÂèäÊó∂Êõ¥Êñ∞ÂèÇ‰∏éÁä∂ÊÄÅ
/// - ÈÅøÂÖç‰ºöËÆÆÂÆ§È¢ÑËÆ¢ÂÜ≤Á™Å
/// - ÂÆöÊúüÊ∏ÖÁêÜËøáÊúüÊó•Á®ã
/// - ‰ΩøÁî®ÈáçÂ§çËßÑÂàôÂáèÂ∞ëÈáçÂ§çÊìç‰Ωú
pub struct CalendarService {
    /// v4ÁâàÊú¨APIÊúçÂä°
    pub v4: V4,
}

impl CalendarService {
    /// ÂàõÂª∫Êñ∞ÁöÑÊó•ÂéÜÊúçÂä°ÂÆû‰æã
    ///
    /// # ÂèÇÊï∞
    /// - `config`: ÂÆ¢Êà∑Á´ØÈÖçÁΩÆÔºåÂåÖÂê´ËÆ§ËØÅ‰ø°ÊÅØÂíåAPIËÆæÁΩÆ
    ///
    /// # ËøîÂõûÂÄº
    /// ÈÖçÁΩÆÂÆåÊàêÁöÑÊó•ÂéÜÊúçÂä°ÂÆû‰æã
    pub fn new(config: Config) -> Self {
        Self {
            v4: V4::new(config),
        }
    }

    /// ‰ΩøÁî®ÂÖ±‰∫´ÈÖçÁΩÆÔºàÂÆûÈ™åÊÄßÔºâ
    pub fn new_from_shared(shared: std::sync::Arc<Config>) -> Self {
        Self { v4: V4::new(shared.as_ref().clone()) }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::time::Duration;

    #[test]
    fn test_calendar_service_creation() {
        let config = Config::default();
        let service = CalendarService::new(config.clone());

        // Verify all 10 sub-services are configured correctly
        assert_eq!(service.v4.calendar.config.app_id, config.app_id);
        assert_eq!(service.v4.calendar.config.app_secret, config.app_secret);
        assert_eq!(service.v4.calendar_acl.config.app_id, config.app_id);
        assert_eq!(service.v4.calendar_event.config.app_id, config.app_id);
        assert_eq!(service.v4.meeting_chat.config.app_secret, config.app_secret);
        assert_eq!(service.v4.meeting_minute.config.app_id, config.app_id);
        assert_eq!(service.v4.timeoff_event.config.app_id, config.app_id);
        assert_eq!(
            service.v4.meeting_room_event.config.app_secret,
            config.app_secret
        );
        assert_eq!(service.v4.attendee.config.app_id, config.app_id);
        assert_eq!(service.v4.setting.config.app_id, config.app_id);
        assert_eq!(
            service.v4.exchange_binding.config.app_secret,
            config.app_secret
        );
    }

    #[test]
    fn test_calendar_service_with_custom_config() {
        let config = Config::builder()
            .app_id("calendar_test_app")
            .app_secret("calendar_test_secret")
            .req_timeout(Duration::from_secs(440))
            .build();

        let service = CalendarService::new(config.clone());

        assert_eq!(service.v4.calendar.config.app_id, "calendar_test_app");
        assert_eq!(
            service.v4.calendar.config.app_secret,
            "calendar_test_secret"
        );
        assert_eq!(
            service.v4.calendar.config.req_timeout,
            Some(Duration::from_secs(440))
        );
        assert_eq!(service.v4.calendar_acl.config.app_id, "calendar_test_app");
        assert_eq!(
            service.v4.calendar_event.config.req_timeout,
            Some(Duration::from_secs(440))
        );
        assert_eq!(service.v4.meeting_chat.config.app_id, "calendar_test_app");
        assert_eq!(
            service.v4.meeting_minute.config.req_timeout,
            Some(Duration::from_secs(440))
        );
        assert_eq!(service.v4.timeoff_event.config.app_id, "calendar_test_app");
        assert_eq!(
            service.v4.meeting_room_event.config.req_timeout,
            Some(Duration::from_secs(440))
        );
        assert_eq!(service.v4.attendee.config.app_id, "calendar_test_app");
        assert_eq!(
            service.v4.setting.config.req_timeout,
            Some(Duration::from_secs(440))
        );
        assert_eq!(
            service.v4.exchange_binding.config.app_id,
            "calendar_test_app"
        );
    }

    #[test]
    fn test_calendar_service_config_independence() {
        let config1 = Config::builder().app_id("calendar_app_1").build();

        let config2 = Config::builder().app_id("calendar_app_2").build();

        let service1 = CalendarService::new(config1);
        let service2 = CalendarService::new(config2);

        assert_eq!(service1.v4.calendar.config.app_id, "calendar_app_1");
        assert_eq!(service2.v4.calendar.config.app_id, "calendar_app_2");
        assert_ne!(
            service1.v4.calendar.config.app_id,
            service2.v4.calendar.config.app_id
        );
        assert_ne!(
            service1.v4.calendar_acl.config.app_id,
            service2.v4.calendar_acl.config.app_id
        );
        assert_ne!(
            service1.v4.calendar_event.config.app_id,
            service2.v4.calendar_event.config.app_id
        );
        assert_ne!(
            service1.v4.meeting_chat.config.app_id,
            service2.v4.meeting_chat.config.app_id
        );
        assert_ne!(
            service1.v4.meeting_minute.config.app_id,
            service2.v4.meeting_minute.config.app_id
        );
        assert_ne!(
            service1.v4.timeoff_event.config.app_id,
            service2.v4.timeoff_event.config.app_id
        );
        assert_ne!(
            service1.v4.meeting_room_event.config.app_id,
            service2.v4.meeting_room_event.config.app_id
        );
        assert_ne!(
            service1.v4.attendee.config.app_id,
            service2.v4.attendee.config.app_id
        );
        assert_ne!(
            service1.v4.setting.config.app_id,
            service2.v4.setting.config.app_id
        );
        assert_ne!(
            service1.v4.exchange_binding.config.app_id,
            service2.v4.exchange_binding.config.app_id
        );
    }

    #[test]
    fn test_calendar_service_sub_services_accessible() {
        let config = Config::default();
        let service = CalendarService::new(config.clone());

        // Test that all sub-services are accessible
        assert_eq!(service.v4.calendar.config.app_id, config.app_id);
        assert_eq!(service.v4.calendar_acl.config.app_id, config.app_id);
        assert_eq!(service.v4.calendar_event.config.app_id, config.app_id);
        assert_eq!(service.v4.meeting_chat.config.app_id, config.app_id);
        assert_eq!(service.v4.meeting_minute.config.app_id, config.app_id);
        assert_eq!(service.v4.timeoff_event.config.app_id, config.app_id);
        assert_eq!(service.v4.meeting_room_event.config.app_id, config.app_id);
        assert_eq!(service.v4.attendee.config.app_id, config.app_id);
        assert_eq!(service.v4.setting.config.app_id, config.app_id);
        assert_eq!(service.v4.exchange_binding.config.app_id, config.app_id);
    }

    #[test]
    fn test_calendar_service_config_cloning() {
        let config = Config::builder()
            .app_id("clone_test_app")
            .app_secret("clone_test_secret")
            .build();

        let service = CalendarService::new(config.clone());

        assert_eq!(service.v4.calendar.config.app_id, "clone_test_app");
        assert_eq!(service.v4.calendar.config.app_secret, "clone_test_secret");
        assert_eq!(
            service.v4.calendar_acl.config.app_secret,
            "clone_test_secret"
        );
        assert_eq!(service.v4.calendar_event.config.app_id, "clone_test_app");
        assert_eq!(
            service.v4.meeting_chat.config.app_secret,
            "clone_test_secret"
        );
        assert_eq!(service.v4.meeting_minute.config.app_id, "clone_test_app");
        assert_eq!(
            service.v4.timeoff_event.config.app_secret,
            "clone_test_secret"
        );
        assert_eq!(
            service.v4.meeting_room_event.config.app_id,
            "clone_test_app"
        );
        assert_eq!(service.v4.attendee.config.app_secret, "clone_test_secret");
        assert_eq!(service.v4.setting.config.app_id, "clone_test_app");
        assert_eq!(
            service.v4.exchange_binding.config.app_secret,
            "clone_test_secret"
        );
    }

    #[test]
    fn test_calendar_service_timeout_propagation() {
        let config = Config::builder()
            .req_timeout(Duration::from_secs(450))
            .build();

        let service = CalendarService::new(config);

        // Verify timeout is propagated to all sub-services
        assert_eq!(
            service.v4.calendar.config.req_timeout,
            Some(Duration::from_secs(450))
        );
        assert_eq!(
            service.v4.calendar_acl.config.req_timeout,
            Some(Duration::from_secs(450))
        );
        assert_eq!(
            service.v4.calendar_event.config.req_timeout,
            Some(Duration::from_secs(450))
        );
        assert_eq!(
            service.v4.meeting_chat.config.req_timeout,
            Some(Duration::from_secs(450))
        );
        assert_eq!(
            service.v4.meeting_minute.config.req_timeout,
            Some(Duration::from_secs(450))
        );
        assert_eq!(
            service.v4.timeoff_event.config.req_timeout,
            Some(Duration::from_secs(450))
        );
        assert_eq!(
            service.v4.meeting_room_event.config.req_timeout,
            Some(Duration::from_secs(450))
        );
        assert_eq!(
            service.v4.attendee.config.req_timeout,
            Some(Duration::from_secs(450))
        );
        assert_eq!(
            service.v4.setting.config.req_timeout,
            Some(Duration::from_secs(450))
        );
        assert_eq!(
            service.v4.exchange_binding.config.req_timeout,
            Some(Duration::from_secs(450))
        );
    }

    #[test]
    fn test_calendar_service_multiple_instances() {
        let config = Config::default();

        let service1 = CalendarService::new(config.clone());
        let service2 = CalendarService::new(config.clone());

        // Both services should have the same config values
        assert_eq!(
            service1.v4.calendar.config.app_id,
            service2.v4.calendar.config.app_id
        );
        assert_eq!(
            service1.v4.calendar.config.app_secret,
            service2.v4.calendar.config.app_secret
        );
        assert_eq!(
            service1.v4.calendar_acl.config.app_id,
            service2.v4.calendar_acl.config.app_id
        );
        assert_eq!(
            service1.v4.calendar_event.config.app_secret,
            service2.v4.calendar_event.config.app_secret
        );
        assert_eq!(
            service1.v4.meeting_chat.config.app_id,
            service2.v4.meeting_chat.config.app_id
        );
        assert_eq!(
            service1.v4.meeting_minute.config.app_secret,
            service2.v4.meeting_minute.config.app_secret
        );
        assert_eq!(
            service1.v4.timeoff_event.config.app_id,
            service2.v4.timeoff_event.config.app_id
        );
        assert_eq!(
            service1.v4.meeting_room_event.config.app_secret,
            service2.v4.meeting_room_event.config.app_secret
        );
        assert_eq!(
            service1.v4.attendee.config.app_id,
            service2.v4.attendee.config.app_id
        );
        assert_eq!(
            service1.v4.setting.config.app_secret,
            service2.v4.setting.config.app_secret
        );
        assert_eq!(
            service1.v4.exchange_binding.config.app_id,
            service2.v4.exchange_binding.config.app_id
        );
    }

    #[test]
    fn test_calendar_service_config_consistency() {
        let config = Config::builder()
            .app_id("consistency_test")
            .app_secret("consistency_secret")
            .req_timeout(Duration::from_secs(460))
            .build();

        let service = CalendarService::new(config);

        // Verify all sub-services have consistent configurations
        let configs = [
            &service.v4.calendar.config,
            &service.v4.calendar_acl.config,
            &service.v4.calendar_event.config,
            &service.v4.meeting_chat.config,
            &service.v4.meeting_minute.config,
            &service.v4.timeoff_event.config,
            &service.v4.meeting_room_event.config,
            &service.v4.attendee.config,
            &service.v4.setting.config,
            &service.v4.exchange_binding.config,
        ];

        for config in &configs {
            assert_eq!(config.app_id, "consistency_test");
            assert_eq!(config.app_secret, "consistency_secret");
            assert_eq!(config.req_timeout, Some(Duration::from_secs(460)));
        }
    }
}
