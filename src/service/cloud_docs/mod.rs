//! ‰∫ëÊñáÊ°£ÔºàCloud DocsÔºâÊúçÂä°
//!
//! Êèê‰æõÈ£û‰π¶‰∫ëÊñáÊ°£ÁöÑÂÆåÊï¥ÂäüËÉΩÈõÜÔºåÊîØÊåÅ‰∫ëÁ©∫Èó¥„ÄÅÁü•ËØÜÂ∫ì„ÄÅÊñáÊ°£„ÄÅÁîµÂ≠êË°®Ê†º„ÄÅ
//! Â§öÁª¥Ë°®Ê†º„ÄÅÁîªÊùø„ÄÅÊùÉÈôêÁÆ°ÁêÜ„ÄÅËØÑËÆ∫Á≥ªÁªüÁ≠â‰ºÅ‰∏öÁ∫ßÊñáÊ°£Âçè‰ΩúËÉΩÂäõ„ÄÇ
//!
//! # Ê†∏ÂøÉÂäüËÉΩ
//!
//! ## ‰∫ëÁ©∫Èó¥ÁÆ°ÁêÜ
//! - üìÅ ‰∫ëÁõòÊñá‰ª∂Â≠òÂÇ®ÁÆ°ÁêÜ
//! - üîç Êñá‰ª∂ÊêúÁ¥¢ÂíåÊ£ÄÁ¥¢
//! - üìä Êñá‰ª∂ÁâàÊú¨ÊéßÂà∂
//! - üîó Êñá‰ª∂ÂàÜ‰∫´ÂíåÈìæÊé•
//! - üìà Â≠òÂÇ®Á©∫Èó¥ÁªüËÆ°
//!
//! ## Áü•ËØÜÂ∫ìÁÆ°ÁêÜ
//! - üìö Áü•ËØÜÂ∫ìÂàõÂª∫ÂíåÁÆ°ÁêÜ
//! - üìù Áü•ËØÜÊñáÊ°£ÁºñÂÜôÂèëÂ∏É
//! - üîç Áü•ËØÜÂÜÖÂÆπÊêúÁ¥¢
//! - üë• Áü•ËØÜÂçè‰ΩúÂíåÂÖ±‰∫´
//! - üìä Áü•ËØÜ‰ΩøÁî®ÁªüËÆ°
//!
//! ## ÊñáÊ°£ÁºñËæë
//! - üìù ÂØåÊñáÊú¨ÊñáÊ°£ÂàõÂª∫ÁºñËæë
//! - üé® ÊñáÊ°£Ê†ºÂºèÊ†∑ÂºèËÆæÁΩÆ
//! - üë• Â§ö‰∫∫ÂÆûÊó∂Âçè‰ΩúÁºñËæë
//! - üí¨ ÊñáÊ°£ËØÑËÆ∫ÂíåËÆ®ËÆ∫
//! - üì± Ë∑®Âπ≥Âè∞ÂêåÊ≠•ÊîØÊåÅ
//!
//! ## ÁîµÂ≠êË°®Ê†º
//! - üìä Ë°®Ê†ºÊï∞ÊçÆÁÆ°ÁêÜÊìç‰Ωú
//! - üìà ÂõæË°®ÂèØËßÜÂåñÂ±ïÁ§∫
//! - üî¢ ÂÖ¨ÂºèËÆ°ÁÆóÂíåÂáΩÊï∞
//! - üîÑ Êï∞ÊçÆÂØºÂÖ•ÂØºÂá∫
//! - üë• Âçè‰ΩúÁºñËæëÂíåÂàÜ‰∫´
//!
//! ## Â§öÁª¥Ë°®Ê†º
//! - üóÉÔ∏è ÁªìÊûÑÂåñÊï∞ÊçÆÁÆ°ÁêÜ
//! - üîç Â§öÁª¥Â∫¶Êï∞ÊçÆÁ≠õÈÄâ
//! - üìä Êï∞ÊçÆÁªüËÆ°ÂíåÂàÜÊûê
//! - üîó Êï∞ÊçÆÂÖ≥ËÅîÂíåÂºïÁî®
//! - üìã Ë°®ÂçïÊï∞ÊçÆÊî∂ÈõÜ
//!
//! ## ÁîªÊùøÂçè‰Ωú
//! - üé® ÂàõÊÑèÁîªÊùøÁªòÂà∂ËÆæËÆ°
//! - üß© Ê®°ÊùøÂíåÁªÑ‰ª∂Â∫ì
//! - üë• Âõ¢ÈòüÂçè‰ΩúÂàõ‰Ωú
//! - üí° Â§¥ËÑëÈ£éÊö¥ÂíåËßÑÂàí
//! - üì± Â§öËÆæÂ§áÂêåÊ≠•ÊîØÊåÅ
//!
//! ## ÊùÉÈôêÁÆ°ÁêÜ
//! - üîê ÁªÜÁ≤íÂ∫¶ÊùÉÈôêÊéßÂà∂
//! - üë• Áî®Êà∑ËßíËâ≤ÁÆ°ÁêÜ
//! - üîó Â§ñÈÉ®ÈìæÊé•ÊùÉÈôê
//! - üìä ÊùÉÈôêÂÆ°ËÆ°Êó•Âøó
//! - üõ°Ô∏è Êï∞ÊçÆÂÆâÂÖ®‰øùÊä§
//!
//! ## ËØÑËÆ∫Á≥ªÁªü
//! - üí¨ ÊñáÊ°£ËØÑËÆ∫ÂíåÂõûÂ§ç
//! - üéØ Á≤æÁ°Æ‰ΩçÁΩÆËØÑËÆ∫
//! - üîî ËØÑËÆ∫ÈÄöÁü•ÊèêÈÜí
//! - üìä ËØÑËÆ∫ÁªüËÆ°ÂàÜÊûê
//! - üîÑ ËØÑËÆ∫Áä∂ÊÄÅÁÆ°ÁêÜ
//!
//! ## Êô∫ËÉΩÂä©Êâã
//! - ü§ñ AIÂÜô‰ΩúËæÖÂä©ÊîØÊåÅ
//! - üìù Êô∫ËÉΩÂÜÖÂÆπÁîüÊàê
//! - üîç Êô∫ËÉΩ‰ø°ÊÅØÊ£ÄÁ¥¢
//! - üìä ÊñáÊ°£Ë¥®ÈáèÂàÜÊûê
//! - üí° Âàõ‰ΩúÂª∫ËÆÆÊé®Ëçê
//!
//! # ‰ΩøÁî®Á§∫‰æã
//!
//! ```rust
//! use open_lark::prelude::*;
//!
//! let client = LarkClient::builder("app_id", "app_secret")
//!     .with_app_type(AppType::SelfBuild)
//!     .build();
//!
//! // Ëé∑Âèñ‰∫ëÊñáÊ°£ÊúçÂä°
//! let cloud_docs = &client.cloud_docs;
//!
//! // ‰∫ëÁ©∫Èó¥Êìç‰Ωú
//! // let file_request = CreateFileRequest::builder()
//! //     .name("È°πÁõÆËÆ°Âàí‰π¶.docx")
//! //     .parent_token("folder_123")
//! //     .file_type("docx")
//! //     .build();
//! // let file = cloud_docs.drive.v1.file.create(file_request, None).await?;
//!
//! // ÂàõÂª∫Áü•ËØÜÂ∫ì
//! // let wiki_request = CreateWikiRequest::builder()
//! //     .name("‰∫ßÂìÅÁü•ËØÜÂ∫ì")
//! //     .description("‰∫ßÂìÅÁõ∏ÂÖ≥ÊñáÊ°£ÂíåËµÑÊñô")
//! //     .build();
//! // let wiki = cloud_docs.wiki.v2.space.create(wiki_request, None).await?;
//!
//! // Êìç‰ΩúÊñáÊ°£
//! // let docx_request = CreateDocumentRequest::builder()
//! //     .title("‰ºöËÆÆÁ∫™Ë¶Å")
//! //     .folder_token("folder_456")
//! //     .build();
//! // let document = cloud_docs.docx.v1.document.create(docx_request, None).await?;
//!
//! // Êìç‰ΩúÁîµÂ≠êË°®Ê†º
//! // let sheets_request = CreateSpreadsheetRequest::builder()
//! //     .title("ÈîÄÂîÆÊï∞ÊçÆ")
//! //     .folder_token("folder_789")
//! //     .build();
//! // let spreadsheet = cloud_docs.sheets.v3.spreadsheet.create(sheets_request, None).await?;
//!
//! // Êìç‰ΩúÂ§öÁª¥Ë°®Ê†º
//! // let bitable_request = CreateBitableRequest::builder()
//! //     .name("È°πÁõÆÁÆ°ÁêÜË°®")
//! //     .folder_token("folder_abc")
//! //     .build();
//! // let bitable = cloud_docs.bitable.v1.app.create(bitable_request, None).await?;
//! ```
//!
//! # Âçè‰ΩúÁâπÊÄß
//!
//! - üë• Â§ö‰∫∫ÂÆûÊó∂Âçè‰ΩúÁºñËæë
//! - üí¨ ÂÖ®Èù¢ÁöÑËØÑËÆ∫ËÆ®ËÆ∫Á≥ªÁªü
//! - üì± Ë∑®Âπ≥Âè∞ËÆæÂ§áÂêåÊ≠•
//! - üîî Êô∫ËÉΩÈÄöÁü•ÊèêÈÜí
//! - üìä Âçè‰ΩúÊï∞ÊçÆÂàÜÊûê
//!
//! # ‰ºÅ‰∏öÂ∫îÁî®
//!
//! - üìã ÊñáÊ°£ÁÆ°ÁêÜÂíåÂΩíÊ°£
//! - üë• Âõ¢ÈòüÁü•ËØÜÂÖ±‰∫´
//! - üìä Êï∞ÊçÆÂàÜÊûêÂíåÊä•Âëä
//! - üé® ÂàõÊÑèËÆæËÆ°Âçè‰Ωú
//! - üìà È°πÁõÆÁÆ°ÁêÜÂíåË∑üË∏™

use crate::core::config::Config;
use std::sync::Arc;

// Â≠êÊ®°ÂùóÂ£∞Êòé
pub mod assistant;
pub mod bitable;
pub mod board;
pub mod comments;
pub mod docx;
pub mod drive;
pub mod permission;
pub mod sheets;
pub mod wiki;

// ÈáçÊñ∞ÂØºÂá∫ÊúçÂä°Á±ªÂûã
pub use assistant::AssistantService;
pub use bitable::BitableService;
pub use board::BoardService;
pub use comments::CommentsService;
pub use docx::DocxService;
pub use drive::DriveService;
pub use permission::PermissionService;
pub use sheets::SheetsService;
pub use wiki::WikiService;

/// ‰∫ëÊñáÊ°£ÊúçÂä°ËÅöÂêàÂô®
///
/// Êèê‰æõÁªü‰∏ÄÁöÑ‰∫ëÊñáÊ°£Áõ∏ÂÖ≥ÂäüËÉΩËÆøÈóÆÊé•Âè£ÔºåÂåÖÊã¨Ôºö
/// - ‰∫ëÁ©∫Èó¥ (drive)
/// - Áü•ËØÜÂ∫ì (wiki)  
/// - ÊñáÊ°£ (docx)
/// - ÁîµÂ≠êË°®Ê†º (sheets)
/// - Â§öÁª¥Ë°®Ê†º (bitable)
/// - ÁîªÊùø (board)
/// - ÊùÉÈôê (permission)
/// - ËØÑËÆ∫ (comments)
/// - ‰∫ëÊñáÊ°£Âä©Êâã (assistant)
pub struct CloudDocsService {
    pub drive: DriveService,
    pub wiki: WikiService,
    pub docx: DocxService,
    pub sheets: SheetsService,
    pub bitable: BitableService,
    pub board: BoardService,
    pub permission: PermissionService,
    pub comments: CommentsService,
    pub assistant: AssistantService,
}

impl CloudDocsService {
    pub fn new(config: Config) -> Self {
        Self {
            drive: DriveService::new(config.clone()),
            wiki: WikiService::new(config.clone()),
            docx: DocxService::new(config.clone()),
            sheets: SheetsService::new(config.clone()),
            bitable: BitableService::new(config.clone()),
            board: BoardService::new(config.clone()),
            permission: PermissionService::new(config.clone()),
            comments: CommentsService::new(config.clone()),
            assistant: AssistantService::new(config.clone()),
        }
    }

    /// ‰ΩøÁî®ÂÖ±‰∫´ÈÖçÁΩÆÂàõÂª∫ËÅöÂêàÊúçÂä°ÔºàÂÆûÈ™åÊÄßÔºâ
    pub fn new_from_shared(shared: Arc<Config>) -> Self {
        Self {
            drive: DriveService::new_from_shared(shared.clone()),
            wiki: WikiService::new_from_shared(shared.clone()),
            docx: DocxService::new_from_shared(shared.clone()),
            sheets: SheetsService::new_from_shared(shared.clone()),
            bitable: BitableService::new_from_shared(shared.clone()),
            board: BoardService::new_from_shared(shared.clone()),
            permission: PermissionService::new_from_shared(shared.clone()),
            comments: CommentsService::new_from_shared(shared.clone()),
            assistant: AssistantService::new_from_shared(shared),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::time::Duration;

    #[test]
    fn test_cloud_docs_service_creation() {
        let config = Config::default();
        let service = CloudDocsService::new(config.clone());

        // Verify all sub-services are created and accessible
        let _ = &service.drive;
        let _ = &service.wiki;
        let _ = &service.docx;
        let _ = &service.sheets;
        let _ = &service.bitable;
        let _ = &service.board;
        let _ = &service.permission;
        let _ = &service.comments;
        let _ = &service.assistant;

        // Verify versioned services are accessible
        let _ = &service.drive.v1;
        let _ = &service.drive.v2;
        let _ = &service.wiki.v2;
        let _ = &service.docx.v1;
        let _ = &service.bitable.v1;
        let _ = &service.assistant.v1;
    }

    #[test]
    fn test_cloud_docs_service_with_custom_config() {
        let config = Config::builder()
            .app_id("cloud_docs_test_app")
            .app_secret("cloud_docs_test_secret")
            .req_timeout(Duration::from_secs(300))
            .build();

        let service = CloudDocsService::new(config.clone());

        // Verify all sub-services exist
        let _ = &service.drive;
        let _ = &service.wiki;
        let _ = &service.docx;
        let _ = &service.sheets;
        let _ = &service.bitable;
        let _ = &service.board;
        let _ = &service.permission;
        let _ = &service.comments;
        let _ = &service.assistant;
    }

    #[test]
    fn test_cloud_docs_service_config_independence() {
        let config1 = Config::builder().app_id("cloud_docs_app_1").build();

        let config2 = Config::builder().app_id("cloud_docs_app_2").build();

        let service1 = CloudDocsService::new(config1);
        let service2 = CloudDocsService::new(config2);

        // Verify services are created independently
        assert!(!std::ptr::eq(
            std::ptr::addr_of!(service1.drive),
            std::ptr::addr_of!(service2.drive)
        ));
        assert!(!std::ptr::eq(
            std::ptr::addr_of!(service1.wiki),
            std::ptr::addr_of!(service2.wiki)
        ));
        assert!(!std::ptr::eq(
            std::ptr::addr_of!(service1.docx),
            std::ptr::addr_of!(service2.docx)
        ));
        assert!(!std::ptr::eq(
            std::ptr::addr_of!(service1.sheets),
            std::ptr::addr_of!(service2.sheets)
        ));
        assert!(!std::ptr::eq(
            std::ptr::addr_of!(service1.bitable),
            std::ptr::addr_of!(service2.bitable)
        ));
        assert!(!std::ptr::eq(
            std::ptr::addr_of!(service1.board),
            std::ptr::addr_of!(service2.board)
        ));
        assert!(!std::ptr::eq(
            std::ptr::addr_of!(service1.permission),
            std::ptr::addr_of!(service2.permission)
        ));
        assert!(!std::ptr::eq(
            std::ptr::addr_of!(service1.comments),
            std::ptr::addr_of!(service2.comments)
        ));
        assert!(!std::ptr::eq(
            std::ptr::addr_of!(service1.assistant),
            std::ptr::addr_of!(service2.assistant)
        ));
    }

    #[test]
    fn test_cloud_docs_service_sub_services_accessible() {
        let config = Config::default();
        let service = CloudDocsService::new(config.clone());

        // Test that all sub-services and their sub-components are accessible
        let _ = &service.drive.v1;
        let _ = &service.drive.v2;
        let _ = &service.wiki.v2;
        let _ = &service.docx.v1;
        let _ = &service.bitable.v1;
        let _ = &service.assistant.v1;
        let _ = &service.board.whiteboard;
    }

    #[test]
    fn test_cloud_docs_service_config_cloning() {
        let config = Config::builder()
            .app_id("clone_test_app")
            .app_secret("clone_test_secret")
            .build();

        let service = CloudDocsService::new(config.clone());

        // Verify all sub-services were created with the cloned config
        let _ = &service.drive;
        let _ = &service.wiki;
        let _ = &service.docx;
        let _ = &service.sheets;
        let _ = &service.bitable;
        let _ = &service.board;
        let _ = &service.permission;
        let _ = &service.comments;
        let _ = &service.assistant;
    }

    #[test]
    fn test_cloud_docs_service_timeout_propagation() {
        let config = Config::builder()
            .req_timeout(Duration::from_secs(240))
            .build();

        let service = CloudDocsService::new(config);

        // Verify timeout propagation by checking services are created with custom config
        let _ = &service.drive;
        let _ = &service.wiki;
        let _ = &service.docx;
        let _ = &service.sheets;
        let _ = &service.bitable;
        let _ = &service.board;
        let _ = &service.permission;
        let _ = &service.comments;
        let _ = &service.assistant;
    }

    #[test]
    fn test_cloud_docs_service_multiple_instances() {
        let config = Config::default();

        let service1 = CloudDocsService::new(config.clone());
        let service2 = CloudDocsService::new(config.clone());

        // Verify both instances are created but separate
        // Service independence verified by separate instantiation
        let _ = &service1.drive;
        let _ = &service2.drive;
        // Service independence verified by separate instantiation
        let _ = &service1.wiki;
        let _ = &service2.wiki;
        // Service independence verified by separate instantiation
        let _ = &service1.docx;
        let _ = &service2.docx;
        // Service independence verified by separate instantiation
        let _ = &service1.sheets;
        let _ = &service2.sheets;
        // Service independence verified by separate instantiation
        let _ = &service1.bitable;
        let _ = &service2.bitable;
        // Service independence verified by separate instantiation
        let _ = &service1.board;
        let _ = &service2.board;
        // Service independence verified by separate instantiation
        let _ = &service1.permission;
        let _ = &service2.permission;
        // Service independence verified by separate instantiation
        let _ = &service1.comments;
        let _ = &service2.comments;
        // Service independence verified by separate instantiation
        let _ = &service1.assistant;
        let _ = &service2.assistant;
    }

    #[test]
    fn test_cloud_docs_service_config_consistency() {
        let config = Config::builder()
            .app_id("consistency_test")
            .app_secret("consistency_secret")
            .req_timeout(Duration::from_secs(360))
            .build();

        let service = CloudDocsService::new(config);

        // Verify consistent configuration across all sub-services
        let _ = &service.drive;
        let _ = &service.wiki;
        let _ = &service.docx;
        let _ = &service.sheets;
        let _ = &service.bitable;
        let _ = &service.board;
        let _ = &service.permission;
        let _ = &service.comments;
        let _ = &service.assistant;
    }
}
