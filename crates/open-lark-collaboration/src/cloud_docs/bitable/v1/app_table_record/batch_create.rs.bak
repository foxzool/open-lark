    use reqwest::Method;
    use serde::{Deserialize, Serialize};

    use open_lark_core::core::{
    api_req::ApiRequest,
    api_resp::{ApiResponseTrait, BaseResponse, ResponseFormat},
    config::Config,
    constants::AccessTokenType,
    endpoints::cloud_docs::*,
    http::Transport,
    req_option::RequestOption,
    SDKResult,
};

/// 批量创建记录请求
#[derive(Debug, Serialize, Default, Clone)]
pub struct BatchCreateRecordsRequest {
    #[serde(skip)]
    api_request: ApiRequest,
    /// 多维表格的唯一标识符
    #[serde(skip)]
    app_token: String,
    /// 数据表的唯一标识符
    #[serde(skip)]
    table_id: String,
    /// 记录列表
    records: Vec<Record>,
}

impl BatchCreateRecordsRequest {
pub fn builder() -> BatchCreateRecordsRequestBuilder {
        BatchCreateRecordsRequestBuilder::default()
    }

    pub fn new(
        app_token: impl ToString,
        table_id: impl ToString,
        records: Vec<Record>,
) -> Self {
    Self {
            app_token: app_token.to_string(),
            table_id: table_id.to_string(),
            records,
            ..Default::default()
        }
    }
}

#[derive(Default)]
pub struct BatchCreateRecordsRequestBuilder {
    request: BatchCreateRecordsRequest,
}

impl BatchCreateRecordsRequestBuilder {
    /// 多维表格的唯一标识符
pub fn app_token(mut self, app_token: impl ToString) -> Self {
        self.request.app_token = app_token.to_string();
        self
    }

    /// 数据表的唯一标识符
pub fn table_id(mut self, table_id: impl ToString) -> Self {
        self.request.table_id = table_id.to_string();
        self
    }

    /// 记录列表
pub fn records(mut self, records: Vec<Record>) -> Self {
        self.request.records = records;
        self
    }

pub fn build(self) -> BatchCreateRecordsRequest {
        self.request
    }
}

crate::impl_executable_builder_owned!(
    BatchCreateRecordsRequestBuilder,
    super::AppTableRecordService,
    BatchCreateRecordsRequest,
    BaseResponse<BatchCreateRecordsResponse>,
    batch_create
);

/// 记录数据
#[derive(Debug, Clone, Default, Serialize, Deserialize)]
pub struct Record {
    /// 记录字段数据
    pub fields: std::collections::HashMap<String, serde_json::Value>,
}

impl Record {
    /// 创建记录
pub fn new() -> Self {
        Self::default()
    }

    /// 设置字段值
pub fn set_field(mut self, field_name: &str, value: serde_json::Value) -> Self {
        self.fields.insert(field_name.to_string(), value);
        self
    }
}

#[derive(Serialize)]
struct BatchCreateRecordsRequestBody {
    records: Vec<Record>,
}

/// 批量创建记录响应
#[derive(Debug, Deserialize)]
pub struct BatchCreateRecordsResponse {
    /// 创建成功的记录列表
    pub records: Vec<CreatedRecord>,
    /// 是否有更多数据
    pub has_more: bool,
    /// 分页标记
    pub page_token: Option<String>,
}

/// 创建的记录信息
#[derive(Debug, Deserialize)]
pub struct CreatedRecord {
    /// 记录ID
    pub record_id: String,
    /// 记录字段数据
    pub fields: std::collections::HashMap<String, serde_json::Value>,
    /// 创建时间
    pub created_time: String,
}

impl ApiResponseTrait for BatchCreateRecordsResponse {
fn data_format() -> ResponseFormat {
        ResponseFormat::Data
    }
}

/// 批量创建记录
pub async fn batch_create_records(
    request: BatchCreateRecordsRequest,
    config: &Config,
    option: Option<RequestOption>,
) -> SDKResult<BaseResponse<BatchCreateRecordsResponse>> {
    let mut api_req = request.api_request;
    api_req.set_http_method(Method::POST);
    api_req.api_path = BITABLE_V1_RECORDS_BATCH_CREATE
        .replace("{app_token}", &request.app_token)
        .replace("{table_id}", &request.table_id);
    api_req.set_supported_access_token_types(vec![AccessTokenType::Tenant, AccessTokenType::User]);
    api_req.set_body(serde_json::to_vec(&BatchCreateRecordsRequestBody {
        records: request.records,
    })?);

    let api_resp = Transport::request(api_req, config, option).await?;
    Ok(api_resp)
}

#[cfg(test)]
#[allow(unused_variables, unused_unsafe)]
    mod tests {
    use super::*;

    #[test]
fn test_batch_create_records_request_builder() {
        let record1 = Record::new()
            .set_field("title", serde_json::json!("任务1"))
            .set_field("status", serde_json::json!("进行中"));

        let record2 = Record::new()
            .set_field("title", serde_json::json!("任务2"))
            .set_field("status", serde_json::json!("未开始"));

        let request = BatchCreateRecordsRequest::builder()
            .app_token("bascnmBA*****yGehy8")
            .table_id("tblsRc9GRRXKqhvW")
            .records(vec![record1, record2])
            .build();

        assert_eq!(request.app_token, "bascnmBA*****yGehy8");
        assert_eq!(request.table_id, "tblsRc9GRRXKqhvW");
        assert_eq!(request.records.len(), 2);
    }
}