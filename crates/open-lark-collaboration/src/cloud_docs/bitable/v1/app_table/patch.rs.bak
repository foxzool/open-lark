    use reqwest::Method;
    use serde::{Deserialize, Serialize};

    use open_lark_core::core::{
    api_req::ApiRequest,
    api_resp::{ApiResponseTrait, BaseResponse, ResponseFormat},
    config::Config,
    constants::AccessTokenType,
    endpoints::cloud_docs::*,
    http::Transport,
    req_option::RequestOption,
    SDKResult,
};

/// 更新数据表请求
#[derive(Debug, Serialize, Default, Clone)]
pub struct UpdateTableRequest {
    #[serde(skip)]
    api_request: ApiRequest,
    /// 多维表格的唯一标识符
    #[serde(skip)]
    app_token: String,
    /// 数据表的唯一标识符
    #[serde(skip)]
    table_id: String,
    /// 数据表信息
    table: TableData,
}

impl UpdateTableRequest {
pub fn builder() -> UpdateTableRequestBuilder {
        UpdateTableRequestBuilder::default()
    }

    pub fn new(
        app_token: impl ToString,
        table_id: impl ToString,
        table: TableData,
) -> Self {
    Self {
            app_token: app_token.to_string(),
            table_id: table_id.to_string(),
            table,
            ..Default::default()
        }
    }
}

#[derive(Default)]
pub struct UpdateTableRequestBuilder {
    request: UpdateTableRequest,
}

impl UpdateTableRequestBuilder {
    /// 多维表格的唯一标识符
pub fn app_token(mut self, app_token: impl ToString) -> Self {
        self.request.app_token = app_token.to_string();
        self
    }

    /// 数据表的唯一标识符
pub fn table_id(mut self, table_id: impl ToString) -> Self {
        self.request.table_id = table_id.to_string();
        self
    }

    /// 数据表信息
pub fn table(mut self, table: TableData) -> Self {
        self.request.table = table;
        self
    }

pub fn build(self) -> UpdateTableRequest {
        self.request
    }
}

crate::impl_executable_builder_owned!(
    UpdateTableRequestBuilder,
    super::AppTableService,
    UpdateTableRequest,
    BaseResponse<UpdateTableResponse>,
    update
);

/// 数据表数据（复用create.rs中的定义）
#[derive(Debug, Clone, Default, Serialize, Deserialize)]
pub struct TableData {
    /// 数据表名称
    pub name: String,
    /// 数据表的默认视图名称，不填则默认为"数据表"
    #[serde(skip_serializing_if = "Option::is_none")]
    pub default_view_name: Option<String>,
    /// 数据表初始字段
    #[serde(skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<TableField>>,
}

impl TableData {
    /// 创建数据表数据
pub fn new(name: impl ToString) -> Self {
    Self {
            name: name.to_string(),
            default_view_name: None,
            fields: None,
        }
    }

    /// 设置默认视图名称
pub fn with_default_view_name(mut self, view_name: impl ToString) -> Self {
        self.default_view_name = Some(view_name.to_string());
        self
    }

    /// 设置初始字段
pub fn with_fields(mut self, fields: Vec<TableField>) -> Self {
        self.fields = Some(fields);
        self
    }
}

/// 字段信息（复用create.rs中的定义）
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TableField {
    /// 字段名称
    pub field_name: String,
    /// 字段类型
    #[serde(rename = "type")]
    pub field_type: i32,
    /// 字段属性，不同字段类型对应不同的属性结构
    #[serde(skip_serializing_if = "Option::is_none")]
    pub property: Option<serde_json::Value>,
}

#[derive(Serialize)]
struct UpdateTableRequestBody {
    table: TableData,
}

/// 更新数据表响应
#[derive(Debug, Deserialize)]
pub struct UpdateTableResponse {
    /// 数据表信息
    pub table_id: String,
    /// 数据表的默认视图 ID
    pub default_view_id: String,
    /// 数据表字段的 field_id 列表
    pub field_id_list: Vec<String>,
}

impl ApiResponseTrait for UpdateTableResponse {
fn data_format() -> ResponseFormat {
        ResponseFormat::Data
    }
}

/// 更新数据表
pub async fn update_table(
    request: UpdateTableRequest,
    config: &Config,
    option: Option<RequestOption>,
) -> SDKResult<BaseResponse<UpdateTableResponse>> {
    let mut api_req = request.api_request;
    api_req.set_http_method(Method::PATCH);
    api_req.api_path = BITABLE_V1_TABLE_PATCH
        .replace("{app_token}", &request.app_token)
        .replace("{table_id}", &request.table_id);
    api_req.set_supported_access_token_types(vec![AccessTokenType::Tenant, AccessTokenType::User]);
    api_req.set_body(serde_json::to_vec(&UpdateTableRequestBody {
        table: request.table,
    })?);

    let api_resp = Transport::request(api_req, config, option).await?;
    Ok(api_resp)
}

#[cfg(test)]
#[allow(unused_variables, unused_unsafe)]
    mod tests {
    use super::*;

    #[test]
fn test_update_table_request_builder() {
        let table = TableData::new("更新的数据表")
            .with_default_view_name("新视图");

        let request = UpdateTableRequest::builder()
            .app_token("bascnmBA*****yGehy8")
            .table_id("tblsRc9GRRXKqhvW")
            .table(table)
            .build();

        assert_eq!(request.app_token, "bascnmBA*****yGehy8");
        assert_eq!(request.table_id, "tblsRc9GRRXKqhvW");
        assert_eq!(request.table.name, "更新的数据表");
    }
}