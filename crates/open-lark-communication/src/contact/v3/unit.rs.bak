use open_lark_core::core::{
use serde_json;    constants::AccessTokenType, http::Transport,
    api_req::ApiRequest, api_resp::ApiResponseTrait, config::Config,
};
use crate::contact::models::*;
use serde::{Deserialize, Serialize};

/// 单位管理服务
pub struct UnitService {
    config: Config,
}
impl UnitService {
    pub fn new(config: Config) -> Self {
        Self { config }
    }
    /// 创建单位
    pub async fn create(
        &self,
        req: &CreateUnitRequest,
    ) -> open_lark_core::core::SDKResult<CreateUnitResponse> {
        let mut api_req = ApiRequest::default();
        api_req.set_http_method(reqwest::Method::POST);
        api_req.set_api_path(open_lark_core::core::endpoints::contact::CONTACT_V3_UNITS.to_string());
        api_req.set_supported_access_token_types(vec![AccessTokenType::Tenant]);
        api_req.body = serde_json::to_vec(req)?;
        let resp = Transport::<CreateUnitResponse>::request(api_req, &self.config, None).await?;
        Ok(resp.data.unwrap_or_default())
    /// 修改单位信息
    pub async fn patch(
        unit_id: &str,
        req: &PatchUnitRequest,
    ) -> open_lark_core::core::SDKResult<PatchUnitResponse> {
        api_req.set_http_method(reqwest::Method::PATCH);
        let resp = Transport::<PatchUnitResponse>::request(api_req, &self.config, None).await?;
    /// 建立部门与单位的绑定关系
    pub async fn bind_department(
        req: &BindDepartmentRequest,
    ) -> open_lark_core::core::SDKResult<BindDepartmentResponse> {
        let resp = Transport::<BindDepartmentResponse>::request(api_req, &self.config, None).await?;
    /// 解除部门与单位的绑定关系
    pub async fn unbind_department(
        req: &UnbindDepartmentRequest,
    ) -> open_lark_core::core::SDKResult<UnbindDepartmentResponse> {
        api_req.set_http_method(reqwest::Method::DELETE);
        let resp = Transport::<UnbindDepartmentResponse>::request(api_req, &self.config, None).await?;
    /// 获取单位绑定的部门列表
    pub async fn list_department(
        _req: &ListUnitDepartmentsRequest,
    ) -> open_lark_core::core::SDKResult<ListUnitDepartmentsResponse> {
        api_req.set_http_method(reqwest::Method::GET);
        api_req.body = Vec::new();
        api_req.query_params = std::collections::HashMap::new();
        let resp = Transport::<ListUnitDepartmentsResponse>::request(api_req, &self.config, None).await?;
    /// 获取单位信息
    ///
    /// # API文档
    /// https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/contact/get
    pub async fn get(&self, unit_id: &str) -> open_lark_core::core::SDKResult<GetUnitResponse> {
        api_req.set_supported_access_token_types(vec![AccessTokenType::Tenant, AccessTokenType::User]);
        let resp = Transport::<GetUnitResponse>::request(api_req, &self.config, None).await?;
    /// 获取单位列表
    /// https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/contact/list
    pub async fn list(&self, _req: &ListUnitsRequest) -> open_lark_core::core::SDKResult<ListUnitsResponse> {
        let resp = Transport::<ListUnitsResponse>::request(api_req, &self.config, None).await?;
    /// 删除单位
    /// https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/contact/delete
    pub async fn delete(&self, unit_id: &str) -> open_lark_core::core::SDKResult<DeleteUnitResponse> {
        let resp = Transport::<DeleteUnitResponse>::request(api_req, &self.config, None).await?;
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CreateUnitRequest {
    pub unit: Unit,
#[derive(Debug, Clone, Serialize, Deserialize, Default)]
pub struct CreateUnitResponse {
impl ApiResponseTrait for CreateUnitResponse {
    fn data_format() -> open_lark_core::core::api_resp::ResponseFormat {
        open_lark_core::core::api_resp::ResponseFormat::Data
pub struct PatchUnitRequest {
pub struct PatchUnitResponse {
impl ApiResponseTrait for PatchUnitResponse {
pub struct BindDepartmentRequest {
    pub department_id: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub department_id_type: Option<String>,
pub struct BindDepartmentResponse {}
impl ApiResponseTrait for BindDepartmentResponse {
pub struct UnbindDepartmentRequest {
pub struct UnbindDepartmentResponse {}
impl ApiResponseTrait for UnbindDepartmentResponse {
#[derive(Debug, Clone, Default, Serialize, Deserialize)]
pub struct ListUnitDepartmentsRequest {
    pub page_size: Option<i32>,
    pub page_token: Option<String>,
pub struct ListUnitDepartmentsResponse {
    pub department_list: Vec<Department>,
    pub has_more: Option<bool>,
impl ApiResponseTrait for ListUnitDepartmentsResponse {
pub struct GetUnitResponse {
impl ApiResponseTrait for GetUnitResponse {
pub struct ListUnitsRequest {
pub struct ListUnitsResponse {
    pub items: Vec<Unit>,
impl ApiResponseTrait for ListUnitsResponse {
pub struct DeleteUnitResponse {}
impl ApiResponseTrait for DeleteUnitResponse {
