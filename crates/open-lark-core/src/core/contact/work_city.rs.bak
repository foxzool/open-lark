use open_lark_core::core::{
    constants::AccessTokenType, http::Transport,
    api_req::ApiRequest, api_resp::ApiResponseTrait, config::Config,
    constants::AccessTokenType, endpoints::EndpointBuilder, http::Transport,
};
use crate::contact::models::*;
use serde::{Deserialize, Serialize};

/// 工作城市服务
pub struct WorkCityService {
    config: Config,
}
impl WorkCityService {
    pub fn new(config: Config) -> Self {
    Self { config }
    }
    /// # API文档
    ///
    /// https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/contact/get
    /// 获取单个工作城市信息
    pub async fn get(&self, work_city_id: &str) -> open_lark_core::core::SDKResult<GetWorkCityResponse> {
            let mut api_req = ApiRequest::default();
            api_req.set_http_method(reqwest::Method::GET);
            api_req.set_api_path(EndpointBuilder::replace_param(
                open_lark_core::core::endpoints::contact::CONTACT_V3_WORK_CITY_GET,
                "work_city_id",
                work_city_id,
            ));
            api_req.set_supported_access_token_types(vec![AccessTokenType::Tenant, AccessTokenType::User]);
            api_req.body = Vec::new();
            api_req.query_params = std::collections::HashMap::new();
          let resp = Transport::<GetWorkCityResponse>::request(api_req, &self.config, None).await?;
        Ok(resp.data.unwrap_or_default())
    /// 获取租户工作城市列表
    pub async fn list(
    &self,
    _req: &ListWorkCitiesRequest,
    ) -> open_lark_core::core::SDKResult<ListWorkCitiesResponse> {
            api_req.set_api_path(open_lark_core::core::endpoints::contact::CONTACT_V3_WORK_CITIES.to_string());
      let resp = Transport::<ListWorkCitiesResponse>::request(api_req, &self.config, None).await?;
#[derive(Debug, Clone, Serialize, Deserialize, Default)]
pub struct GetWorkCityResponse {
    pub work_city: WorkCity,
impl ApiResponseTrait for GetWorkCityResponse {
    fn data_format() -> open_lark_core::core::api_resp::ResponseFormat {
    open_lark_core::core::api_resp::ResponseFormat::Data
#[derive(Debug, Clone, Default, Serialize, Deserialize)]
pub struct ListWorkCitiesRequest {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub page_size: Option<i32>,
    pub page_token: Option<String>,
pub struct ListWorkCitiesResponse {
    pub items: Vec<WorkCity>,
    pub has_more: Option<bool>,
impl ApiResponseTrait for ListWorkCitiesResponse {
