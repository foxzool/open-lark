use open_lark_core::core::{
    constants::AccessTokenType, http::Transport,
    api_req::ApiRequest, api_resp::ApiResponseTrait, config::Config, constants::AccessTokenType, http::Transport,
};
use serde::{Deserialize, Serialize};
use serde_json;

// Import shared types from user module
use super::user::{GroupMember, GroupMemberInfo, GroupMemberResult};
/// 用户组成员服务
#[derive(Debug)]
pub struct GroupMemberService {
    config: Config,
}
impl GroupMemberService {
    pub fn new(config: Config) -> Self {
        Self { config }
    }
    /// 添加用户组成员
    pub async fn add(
        &self,
        group_id: &str,
        req: &AddGroupMemberRequest,
    ) -> open_lark_core::core::SDKResult<AddGroupMemberResponse> {
        let mut api_req = ApiRequest::default();
        api_req.set_http_method(reqwest::Method::POST);
        api_req.set_api_path(open_lark_core::core::endpoints::contact::CONTACT_V3_GROUP_MEMBERS.to_string());
        api_req.set_supported_access_token_types(vec![AccessTokenType::Tenant]);
        api_req.body = serde_json::to_vec(req)?;
        let resp =
            Transport::<AddGroupMemberResponse>::request(api_req, &self.config, None).await?;
        Ok(resp.data.unwrap_or_default())
    /// 批量添加用户组成员
    pub async fn batch_add(
        req: &BatchAddGroupMembersRequest,
    ) -> open_lark_core::core::SDKResult<BatchAddGroupMembersResponse> {
            Transport::<BatchAddGroupMembersResponse>::request(api_req, &self.config, None).await?;
    /// 查询用户组成员列表
    pub async fn simplelist(
        _req: &ListGroupMembersRequest,
    ) -> open_lark_core::core::SDKResult<ListGroupMembersResponse> {
        api_req.set_http_method(reqwest::Method::GET);
        api_req.body = Vec::new();
        api_req.query_params = std::collections::HashMap::new();
            Transport::<ListGroupMembersResponse>::request(api_req, &self.config, None).await?;
    /// 移除用户组成员
    pub async fn remove(
        req: &RemoveGroupMemberRequest,
    ) -> open_lark_core::core::SDKResult<RemoveGroupMemberResponse> {
            Transport::<RemoveGroupMemberResponse>::request(api_req, &self.config, None).await?;
    /// 批量移除用户组成员
    pub async fn batch_remove(
        req: &BatchRemoveGroupMembersRequest,
    ) -> open_lark_core::core::SDKResult<BatchRemoveGroupMembersResponse> {
            Transport::<BatchRemoveGroupMembersResponse>::request(api_req, &self.config, None)
                .await?;
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AddGroupMemberRequest {
    pub member_id: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub member_id_type: Option<String>,
    pub member_type: Option<String>,
#[derive(Debug, Clone, Serialize, Deserialize, Default)]
pub struct AddGroupMemberResponse {}
impl ApiResponseTrait for AddGroupMemberResponse {
    fn data_format() -> open_lark_core::core::api_resp::ResponseFormat {
        open_lark_core::core::api_resp::ResponseFormat::Data
pub struct BatchAddGroupMembersRequest {
    pub members: Vec<GroupMemberInfo>,
pub struct BatchAddGroupMembersResponse {
    pub results: Vec<GroupMemberResult>,
impl ApiResponseTrait for BatchAddGroupMembersResponse {
#[derive(Debug, Clone, Default, Serialize, Deserialize)]
pub struct ListGroupMembersRequest {
    pub page_size: Option<i32>,
    pub page_token: Option<String>,
pub struct ListGroupMembersResponse {
    pub memberlist: Vec<GroupMember>,
    pub has_more: Option<bool>,
impl ApiResponseTrait for ListGroupMembersResponse {
pub struct RemoveGroupMemberRequest {
pub struct RemoveGroupMemberResponse {}
impl ApiResponseTrait for RemoveGroupMemberResponse {
pub struct BatchRemoveGroupMembersRequest {
pub struct BatchRemoveGroupMembersResponse {
impl ApiResponseTrait for BatchRemoveGroupMembersResponse {
